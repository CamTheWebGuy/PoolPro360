[{"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\utils\\setAuthToken.js":"1","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\PumpManager.js":"2","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\index.js":"3","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\DeleteCustomerImage.js":"4","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\EditCustomerInformation.js":"5","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewUser.js":"6","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\EditUser.js":"7","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\routing\\PrivateRoute.js":"8","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ManageChecklist.js":"9","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\CustomManager.js":"10","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\App.js":"11","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ManageEquipment.js":"12","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\MapDirectionsRenderer.js":"13","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Users.js":"14","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\utils\\RoutingMachine.js":"15","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Login.js":"16","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\map.js":"17","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\auth.js":"18","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\alert.js":"19","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\FormSettingsController.js":"20","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\AddCustomers.js":"21","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\variables\\chart.js":"22","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\EditServiceNoteModal.js":"23","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\AddUser.js":"24","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\FilterManager.js":"25","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\LeafletMap.js":"26","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\FormItemController.js":"27","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\HeaterManager.js":"28","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\FormCreator.js":"29","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\customer.js":"30","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Alert.js":"31","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Routing.js":"32","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\CleanerManager..js":"33","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\customer.js":"34","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Customers.js":"35","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewCustomer.js":"36","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\map.js":"37","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\dashboard\\Dashboard.js":"38","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\employee.js":"39","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\landing\\LandingContent.js":"40","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\BookingForms.js":"41","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\index.js":"42","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Pricing.js":"43","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\dashboard\\Sidebar.js":"44","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewMyRoute.js":"45","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\RouteBuilder.js":"46","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Settings.js":"47","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\employee.js":"48","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\user.js":"49","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\types.js":"50","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\user.js":"51"},{"size":251,"mtime":1607810175854,"results":"52","hashOfConfig":"53"},{"size":31841,"mtime":1611560604114,"results":"54","hashOfConfig":"53"},{"size":193,"mtime":1608277914563,"results":"55","hashOfConfig":"53"},{"size":6621,"mtime":1609984630990,"results":"56","hashOfConfig":"53"},{"size":20895,"mtime":1611882314629,"results":"57","hashOfConfig":"53"},{"size":7873,"mtime":1612486761185,"results":"58","hashOfConfig":"53"},{"size":15595,"mtime":1611864494003,"results":"59","hashOfConfig":"53"},{"size":656,"mtime":1607929043071,"results":"60","hashOfConfig":"53"},{"size":17827,"mtime":1610845489210,"results":"61","hashOfConfig":"53"},{"size":310882,"mtime":1611610616445,"results":"62","hashOfConfig":"53"},{"size":4280,"mtime":1613984943592,"results":"63","hashOfConfig":"53"},{"size":20464,"mtime":1612642905643,"results":"64","hashOfConfig":"53"},{"size":1782,"mtime":1612079344403,"results":"65","hashOfConfig":"53"},{"size":8508,"mtime":1611909926558,"results":"66","hashOfConfig":"53"},{"size":618,"mtime":1612040618363,"results":"67","hashOfConfig":"53"},{"size":6051,"mtime":1607980867195,"results":"68","hashOfConfig":"53"},{"size":229,"mtime":1609440617664,"results":"69","hashOfConfig":"53"},{"size":1135,"mtime":1612654164168,"results":"70","hashOfConfig":"53"},{"size":388,"mtime":1603849544318,"results":"71","hashOfConfig":"53"},{"size":1528,"mtime":1607641461449,"results":"72","hashOfConfig":"53"},{"size":23754,"mtime":1612061547549,"results":"73","hashOfConfig":"53"},{"size":16282,"mtime":1606983872075,"results":"74","hashOfConfig":"53"},{"size":3875,"mtime":1610583173823,"results":"75","hashOfConfig":"53"},{"size":14775,"mtime":1611792910356,"results":"76","hashOfConfig":"53"},{"size":23820,"mtime":1611460371256,"results":"77","hashOfConfig":"53"},{"size":883,"mtime":1612040727773,"results":"78","hashOfConfig":"53"},{"size":12118,"mtime":1612039260163,"results":"79","hashOfConfig":"53"},{"size":45331,"mtime":1611460298205,"results":"80","hashOfConfig":"53"},{"size":12996,"mtime":1612039225983,"results":"81","hashOfConfig":"53"},{"size":1997,"mtime":1614739512741,"results":"82","hashOfConfig":"53"},{"size":837,"mtime":1607915838635,"results":"83","hashOfConfig":"53"},{"size":5657,"mtime":1612341693260,"results":"84","hashOfConfig":"53"},{"size":16370,"mtime":1611479173382,"results":"85","hashOfConfig":"53"},{"size":21939,"mtime":1615845744531,"results":"86","hashOfConfig":"53"},{"size":8413,"mtime":1612053439841,"results":"87","hashOfConfig":"53"},{"size":67578,"mtime":1612944140385,"results":"88","hashOfConfig":"53"},{"size":389,"mtime":1609440084910,"results":"89","hashOfConfig":"53"},{"size":232279,"mtime":1615879549166,"results":"90","hashOfConfig":"53"},{"size":550,"mtime":1611801911168,"results":"91","hashOfConfig":"53"},{"size":26123,"mtime":1606952337934,"results":"92","hashOfConfig":"53"},{"size":6614,"mtime":1607224832048,"results":"93","hashOfConfig":"53"},{"size":328,"mtime":1614194596069,"results":"94","hashOfConfig":"53"},{"size":12447,"mtime":1606954658913,"results":"95","hashOfConfig":"53"},{"size":12705,"mtime":1613985267354,"results":"96","hashOfConfig":"53"},{"size":2376,"mtime":1612646495317,"results":"97","hashOfConfig":"53"},{"size":37537,"mtime":1614590638882,"results":"98","hashOfConfig":"53"},{"size":46853,"mtime":1615924651865,"results":"99","hashOfConfig":"53"},{"size":4425,"mtime":1614124564587,"results":"100","hashOfConfig":"53"},{"size":1260,"mtime":1614194682039,"results":"101","hashOfConfig":"53"},{"size":1299,"mtime":1614739371667,"results":"102","hashOfConfig":"53"},{"size":613,"mtime":1614741991832,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"1ixd2dz",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"120"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"112"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"120"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"112"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"178"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\utils\\setAuthToken.js",[],["250","251"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\PumpManager.js",[],["252","253"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\index.js",[],["254","255"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\DeleteCustomerImage.js",["256","257","258","259","260","261","262","263","264","265","266","267","268","269"],"import React, { useState, useEffect, Fragment } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  Badge\r\n} from 'reactstrap';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getSingleCustomer } from '../../actions/customer';\r\n\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\n\r\nconst DeleteCustomerImage = ({\r\n  getSingleCustomer,\r\n  customer: { customer, singleLoading },\r\n  match\r\n}) => {\r\n  useEffect(() => {\r\n    getSingleCustomer(match.params.id);\r\n  }, [getSingleCustomer, match.params.id]);\r\n\r\n  const [loadingDeleteImage, setLoadingDeleteImage] = useState(false);\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='customers' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-12 col-12'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/customers'>Customers</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to={`/customers/${match.params.id}`}>\r\n                          {match.params.id}\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to={`/customers/${match.params.id}/deleteImage`}>\r\n                          Delete Customer Image\r\n                        </Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              {' '}\r\n              <div className='row align-items-center'>\r\n                <div className='col-8'>\r\n                  <h3 className='mb-0'>Delete Customer Image(s)</h3>\r\n                </div>\r\n              </div>\r\n            </CardHeader>\r\n            <CardBody>\r\n              {!customer || singleLoading ? (\r\n                <Fragment>\r\n                  <div className='text-center'>\r\n                    <h4>Loading Data...</h4>\r\n                    <SpinnerCircular\r\n                      size={54}\r\n                      thickness={180}\r\n                      speed={100}\r\n                      color='rgba(57, 125, 172, 1)'\r\n                      secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                    />\r\n                  </div>\r\n                </Fragment>\r\n              ) : (\r\n                <Row>\r\n                  {/* <img\r\n                  src='https://di2ponv0v5otw.cloudfront.net/posts/2019/10/22/5daf2816edb3b7766f83f1af/s_5daf2819edb3b7766f83f1b7.jpg'\r\n                  alt=''\r\n                /> */}\r\n                  {customer[0].images.map(image => (\r\n                    <Fragment key={image._id}>\r\n                      <Col lg='auto' className='mgn-btm-50'>\r\n                        {' '}\r\n                        <img\r\n                          src={image.url}\r\n                          className='max-width-250 max-height-127 mgn-btm-10'\r\n                        />\r\n                        <div className='text-center'>\r\n                          <Button\r\n                            color='danger'\r\n                            onClick={async e => {\r\n                              setLoadingDeleteImage(true);\r\n                              const config = {\r\n                                headers: {\r\n                                  'Content-Type': 'application/json'\r\n                                }\r\n                              };\r\n                              const s3Object = image.url.split('poolpro360/');\r\n\r\n                              const s3ObjectId = s3Object[1];\r\n\r\n                              const body = JSON.stringify({\r\n                                objectId: image._id,\r\n                                s3Object: s3ObjectId\r\n                              });\r\n                              await axios.post(\r\n                                `/api/customers/${match.params.id}/deleteImage`,\r\n                                body,\r\n                                config\r\n                              );\r\n                              setLoadingDeleteImage(false);\r\n                              await getSingleCustomer(match.params.id);\r\n                            }}\r\n                          >\r\n                            {loadingDeleteImage ? (\r\n                              <span>Processing...</span>\r\n                            ) : (\r\n                              <span>Delete Image</span>\r\n                            )}\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Fragment>\r\n                  ))}\r\n                </Row>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nDeleteCustomerImage.propTypes = {\r\n  getSingleCustomer: PropTypes.func.isRequired,\r\n  customer: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  customer: state.customer.singleCustomer\r\n});\r\n\r\nexport default connect(mapStateToProps, { getSingleCustomer })(\r\n  DeleteCustomerImage\r\n);\r\n",["270","271"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\EditCustomerInformation.js",["272"],"import React, { Fragment, useState, useRef, useEffect } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Formik } from 'formik';\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Input,\r\n  Form,\r\n  Label,\r\n  FormGroup,\r\n  Card,\r\n  CardHeader,\r\n  CardBody\r\n} from 'reactstrap';\r\n\r\nimport { getSingleCustomer, updateCustomer } from '../../actions/customer';\r\nimport { getEmployees } from '../../actions/employee';\r\n\r\nconst EditCustomerInformation = ({\r\n  getSingleCustomer,\r\n  updateCustomer,\r\n  getEmployees,\r\n  customer: { customer, singleLoading },\r\n  employees: { employees, loading },\r\n  match\r\n}) => {\r\n  useEffect(() => {\r\n    getSingleCustomer(match.params.id);\r\n    getEmployees();\r\n  }, [getSingleCustomer, getEmployees]);\r\n\r\n  const formRef = useRef();\r\n  const handleSubmit = () => {\r\n    if (formRef.current) {\r\n      formRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const [loadingSave, setLoadingSave] = useState(false);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='customers' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-12'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/customers'>Customers</Link>\r\n                      </li>\r\n                      {customer && customer.length >= 1 && (\r\n                        <li className='breadcrumb-item'>\r\n                          <Link to={`/customers/${match.params.id}`}>\r\n                            {customer[0].firstName} {customer[0].lastName}\r\n                          </Link>\r\n                        </li>\r\n                      )}\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to='/customers/add'>Edit Customer Details</Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              <Row className='align-items-center'>\r\n                <Col sm={{ size: 8 }}>\r\n                  <h3 className='mb-0'>Manage Customer Details:</h3>\r\n                </Col>\r\n                <Col sm={{ size: 4 }} className='d-none d-lg-block'>\r\n                  <div className='text-right'>\r\n                    <Button\r\n                      type='submit'\r\n                      color='success'\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      {loadingSave ? (\r\n                        <span>\r\n                          <SpinnerCircular\r\n                            size={24}\r\n                            thickness={180}\r\n                            speed={100}\r\n                            color='rgba(57, 125, 172, 1)'\r\n                            secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                          />{' '}\r\n                          Processing...\r\n                        </span>\r\n                      ) : (\r\n                        <span>Save Changes</span>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                </Col>\r\n                <Col\r\n                  sm={{ size: 4 }}\r\n                  className='d-block d-sm-block d-md-block d-lg-none'\r\n                >\r\n                  <br />\r\n                  <Button type='submit' color='success' onClick={handleSubmit}>\r\n                    {loadingSave ? (\r\n                      <span>\r\n                        <SpinnerCircular\r\n                          size={24}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />{' '}\r\n                        Processing...\r\n                      </span>\r\n                    ) : (\r\n                      <span>Save Changes</span>\r\n                    )}\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </CardHeader>\r\n            {customer && !singleLoading ? (\r\n              <CardBody>\r\n                <Formik\r\n                  initialValues={{\r\n                    firstName: customer[0].firstName,\r\n                    lastName: customer[0].lastName,\r\n                    email: customer[0].email,\r\n                    mobilePhone: customer[0].mobilePhone,\r\n                    serviceAddress: customer[0].serviceAddress,\r\n                    serviceCity: customer[0].serviceCity,\r\n                    serviceState: customer[0].serviceState,\r\n                    serviceZip: customer[0].serviceZip,\r\n                    gateCode: customer[0].gateCode,\r\n                    canText: customer[0].canText,\r\n                    poolType: customer[0].poolType,\r\n                    technician: customer[0].technician,\r\n                    servicePackageAndRate: customer[0].servicePackageAndRate,\r\n                    altPhone: customer[0].altPhone\r\n                  }}\r\n                  innerRef={formRef}\r\n                  onSubmit={async data => {\r\n                    // console.log(data);\r\n                    setLoadingSave(true);\r\n                    await updateCustomer(match.params.id, data);\r\n                    setLoadingSave(false);\r\n                  }}\r\n                  render={({\r\n                    handleSubmit,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    validateForm,\r\n                    isValid\r\n                  }) => (\r\n                    <Fragment>\r\n                      <Form>\r\n                        <h6 className='heading-small text-muted mb-4'>\r\n                          Customer Information\r\n                        </h6>\r\n                        <div className='pl-lg-4'>\r\n                          <Row>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='firstName'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  First name\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='firstName'\r\n                                  placeholder='John'\r\n                                  value={values.firstName}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='lastName'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Last name\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='lastName'\r\n                                  value={values.lastName}\r\n                                  placeholder='Doe'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='mobilePhone'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Mobile Number\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='mobilePhone'\r\n                                  value={values.mobilePhone}\r\n                                  placeholder='(555) 555-5555'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='email'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Email address\r\n                                </Label>\r\n                                <Input\r\n                                  type='email'\r\n                                  name='email'\r\n                                  value={values.email}\r\n                                  placeholder='jessie@example.com'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='canText'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Can text?\r\n                                </Label>\r\n                                <Input\r\n                                  type='select'\r\n                                  name='canText'\r\n                                  value={values.canText}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                >\r\n                                  <option>N/A</option>\r\n                                  <option>Yes</option>\r\n                                  <option>No</option>\r\n                                </Input>\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='altPhone'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Alt Phone\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='altPhone'\r\n                                  value={values.altPhone}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                  placeholder='(555) 123-4567'\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </div>\r\n                        <hr className='my-4' />\r\n                        {/* Address */}\r\n                        <h6 className='heading-small text-muted mb-4'>\r\n                          Service Address\r\n                        </h6>\r\n                        <div className='pl-lg-4'>\r\n                          <Row>\r\n                            <Col lg='12'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='serviceAddress'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Service Address\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='serviceAddress'\r\n                                  value={values.serviceAddress}\r\n                                  placeholder='2070 Libby Street'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col lg='4'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='serviceCity'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  City\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='serviceCity'\r\n                                  value={values.serviceCity}\r\n                                  placeholder='Beverly Hills'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='4'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='serviceState'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  State\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='serviceState'\r\n                                  value={values.serviceState}\r\n                                  placeholder='CA'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='4'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='serviceZip'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Zip\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='serviceZip'\r\n                                  value={values.serviceZip}\r\n                                  placeholder='90210'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <hr className='my-4' />\r\n\r\n                          <h6 className='heading-small text-muted mb-4'>\r\n                            Service Information\r\n                          </h6>\r\n                          <div className='pl-lg-4'>\r\n                            <Row>\r\n                              <Col lg='4'>\r\n                                <Label\r\n                                  for='gateCode'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Gate/Lock Code\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='gateCode'\r\n                                  value={values.gateCode}\r\n                                  placeholder='12345'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </Col>\r\n                              <Col lg='4'>\r\n                                <Label\r\n                                  for='servicePackage'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Rate / Service Package\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='servicePackageAndRate'\r\n                                  value={values.servicePackageAndRate}\r\n                                  placeholder='12345'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </Col>\r\n                              <Col lg='4'>\r\n                                <Label\r\n                                  for='technician'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Assigned Technician\r\n                                </Label>\r\n                                <Input\r\n                                  type='select'\r\n                                  name='technician'\r\n                                  value={values.technician}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                >\r\n                                  <option>N/A</option>\r\n\r\n                                  {employees.map(employee => (\r\n                                    <option\r\n                                      key={employee._id}\r\n                                      value={employee._id}\r\n                                    >\r\n                                      {employee.firstName} {employee.lastName}\r\n                                    </option>\r\n                                  ))}\r\n                                </Input>\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        </div>\r\n                      </Form>\r\n                    </Fragment>\r\n                  )}\r\n                />\r\n              </CardBody>\r\n            ) : (\r\n              <Fragment>\r\n                <div className='text-center'>\r\n                  <h4>Loading Data...</h4>\r\n                  <SpinnerCircular\r\n                    size={54}\r\n                    thickness={180}\r\n                    speed={100}\r\n                    color='rgba(57, 125, 172, 1)'\r\n                    secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                  />\r\n                </div>\r\n              </Fragment>\r\n            )}\r\n          </Card>\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nEditCustomerInformation.propTypes = {\r\n  getSingleCustomer: PropTypes.func.isRequired,\r\n  updateCustomer: PropTypes.func.isRequired,\r\n  getEmployees: PropTypes.func.isRequired,\r\n  customer: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  customer: state.customer.singleCustomer,\r\n  employees: state.employee\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSingleCustomer,\r\n  updateCustomer,\r\n  getEmployees\r\n})(EditCustomerInformation);\r\n",["273","274"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewUser.js",["275","276","277","278","279","280","281","282","283","284","285","286","287","288"],"import React, { Fragment, useEffect } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  Badge\r\n} from 'reactstrap';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { SpinnerCircular } from 'spinners-react';\r\nimport {\r\n  getSingleEmployee,\r\n  getEmployeeCustomers\r\n} from '../../actions/employee';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport Footer from '../Layout/Footer';\r\n\r\nconst ViewUser = ({\r\n  getSingleEmployee,\r\n  getEmployeeCustomers,\r\n  employee,\r\n  customers: { customers, loading },\r\n  match\r\n}) => {\r\n  useEffect(() => {\r\n    getSingleEmployee(match.params.id);\r\n    getEmployeeCustomers(match.params.id);\r\n  }, [getSingleEmployee]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='users' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div\r\n          className='header pb-6 d-flex align-items-center'\r\n          style={{\r\n            minHeight: '500px',\r\n            backgroundImage:\r\n              'url(https://www.lathampool.com/wp-content/uploads/2020/01/bh-header.jpg)',\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center top'\r\n          }}\r\n        >\r\n          {/* Mask */}\r\n          <span className='mask bg-gradient-default opacity-8' />\r\n          {/* Header container */}\r\n          <div className='container-fluid d-flex align-items-center'>\r\n            <div className='row'>\r\n              <div className='col-md-12'>\r\n                {!employee[0] ? (\r\n                  <Fragment>\r\n                    <div className='text-center'>\r\n                      <h4>Loading Data...</h4>\r\n                      <SpinnerCircular\r\n                        size={54}\r\n                        thickness={180}\r\n                        speed={100}\r\n                        color='rgba(57, 125, 172, 1)'\r\n                        secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                      />\r\n                    </div>\r\n                  </Fragment>\r\n                ) : (\r\n                  <Fragment>\r\n                    <h1 className='display-2 text-white mb-0'>\r\n                      {employee[0].firstName} {employee[0].lastName}\r\n                    </h1>\r\n                    <p className='text-white mt-0 mb-5'>\r\n                      {employee[0].email}\r\n                      <br />\r\n                      <Badge color='success'>\r\n                        <strong>{employee[0].role}</strong>\r\n                      </Badge>{' '}\r\n                      <br />\r\n                    </p>\r\n                  </Fragment>\r\n                )}\r\n\r\n                <Link\r\n                  to={`/users/${match.params.id}/edit`}\r\n                  className='btn btn-neutral mb-4'\r\n                >\r\n                  Edit User Information\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container className='mgn-ng-top-60'>\r\n          <Row>\r\n            <Col md='6'>\r\n              <Card>\r\n                <CardHeader>\r\n                  <h3 className='mb-0'>User Information </h3>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!employee || !employee[0] ? (\r\n                    <div className='text-center'>\r\n                      <h4>Loading Data...</h4>\r\n                      <SpinnerCircular\r\n                        size={54}\r\n                        thickness={180}\r\n                        speed={100}\r\n                        color='rgba(57, 125, 172, 1)'\r\n                        secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    <Fragment>\r\n                      <Row>\r\n                        <Col md='6'>\r\n                          <div className='form-control-label'>First name</div>\r\n                          {employee[0].firstName}\r\n                        </Col>\r\n                        <Col md='6'>\r\n                          <div className='form-control-label'>Last name</div>\r\n                          {employee[0].lastName}\r\n                        </Col>\r\n                      </Row>\r\n                      <br />\r\n                      <Row>\r\n                        <Col md='6'>\r\n                          <div className='form-control-label'>Email</div>\r\n                          {employee[0].email}\r\n                        </Col>\r\n                        <Col md='6'>\r\n                          <div className='form-control-label'>Phone</div>\r\n                          {employee[0].phone}\r\n                        </Col>\r\n                      </Row>\r\n                      <br />\r\n                      <Row>\r\n                        <Col md='12'>\r\n                          <div className='form-control-label'>Role</div>\r\n                          {employee[0].role}\r\n                        </Col>\r\n                      </Row>\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col md='6'>\r\n              <Card>\r\n                <CardHeader>\r\n                  <h3 className='mb-0'>Assigned Customers</h3>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customers || !customers.length >= 1 ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <i className='fas fa-exclamation-circle'></i>\r\n                        <h3>No Customers Assigned</h3>\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      {customers.map(customer => (\r\n                        <ListGroup key={customer._id}>\r\n                          <ListGroupItem>\r\n                            <Link to={`/customers/${customer._id}`}>\r\n                              {customer.firstName} {customer.lastName} <br />\r\n                              <small>\r\n                                {customer.serviceAddress},{' '}\r\n                                {customer.serviceCity}, {customer.serviceState}{' '}\r\n                                {customer.serviceZip}\r\n                                <br />\r\n                                {customer.isScheduled ? (\r\n                                  <Badge color='success'>\r\n                                    Scheduled {customer.frequency} for{' '}\r\n                                    {customer.scheduledDay}'s{' '}\r\n                                  </Badge>\r\n                                ) : (\r\n                                  <Badge color='danger'>Not Scheduled</Badge>\r\n                                )}\r\n                              </small>\r\n                            </Link>\r\n                          </ListGroupItem>\r\n                        </ListGroup>\r\n                      ))}\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nViewUser.propTypes = {\r\n  getSingleEmployee: PropTypes.func.isRequired,\r\n  getEmployeeCustomers: PropTypes.func.isRequired,\r\n  employee: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  employee: state.employee.singleEmployee,\r\n  customers: state.customer\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSingleEmployee,\r\n  getEmployeeCustomers\r\n})(ViewUser);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\EditUser.js",["289","290"],"import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { SpinnerCircular } from 'spinners-react';\r\nimport {\r\n  updateEmployee,\r\n  getSingleEmployee,\r\n  updateEmployeePassword\r\n} from '../../actions/employee';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Input,\r\n  Form,\r\n  Label,\r\n  FormGroup,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardFooter\r\n} from 'reactstrap';\r\n\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst EditUser = ({\r\n  match,\r\n  updateEmployee,\r\n  getSingleEmployee,\r\n  updateEmployeePassword,\r\n  employee\r\n}) => {\r\n  const [savingInfo, setSavingInfo] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getSingleEmployee(match.params.id);\r\n  }, [getSingleEmployee]);\r\n\r\n  const lowercaseRegex = /(?=.*[a-z])/;\r\n  const uppercaseRegex = /(?=.*[A-X])/;\r\n  const numericRegex = /(?=.*[0-9])/;\r\n\r\n  const passwordSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n      .matches(lowercaseRegex, 'Password must contain lowercase letter')\r\n      .matches(uppercaseRegex, 'Password must contain uppercase letter')\r\n      .matches(numericRegex, 'Password must contain a number')\r\n      .min(8, 'Password must be at least 8 characters long')\r\n      .required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password')], 'Passwords do not match')\r\n      .required('Please Confirm Password')\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='users' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/users'>Users</Link>\r\n                      </li>\r\n                      {employee.length >= 1 && (\r\n                        <li className='breadcrumb-item'>\r\n                          <Link to={`/users/${match.params.id}/view`}>\r\n                            {employee[0].firstName} {employee[0].lastName}\r\n                          </Link>\r\n                        </li>\r\n                      )}\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to={`/users/${match.params.id}/edit`}>\r\n                          Edit User\r\n                        </Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              <Row className='align-items-center'>\r\n                <Col sm={{ size: 8 }}>\r\n                  <h3 className='mb-0'>Edit User:</h3>\r\n                </Col>\r\n              </Row>\r\n            </CardHeader>\r\n            <CardBody>\r\n              {!employee || !employee.length >= 1 ? (\r\n                <Fragment>\r\n                  <div className='text-center'>\r\n                    <h4>Loading Data...</h4>\r\n                    <SpinnerCircular\r\n                      size={54}\r\n                      thickness={180}\r\n                      speed={100}\r\n                      color='rgba(57, 125, 172, 1)'\r\n                      secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                    />\r\n                  </div>\r\n                </Fragment>\r\n              ) : (\r\n                <Fragment>\r\n                  <Formik\r\n                    initialValues={{\r\n                      firstName: employee[0].firstName,\r\n                      lastName: employee[0].lastName,\r\n                      email: employee[0].email,\r\n                      phone: employee[0].phone,\r\n                      role: employee[0].role\r\n                    }}\r\n                    onSubmit={async data => {\r\n                      setSavingInfo(true);\r\n                      await updateEmployee(match.params.id, data);\r\n                      setSavingInfo(false);\r\n                    }}\r\n                    render={({\r\n                      handleSubmit,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      validateForm,\r\n                      isValid\r\n                    }) => (\r\n                      <Fragment>\r\n                        <Form>\r\n                          <h6 className='heading-small text-muted mb-4'>\r\n                            User Information\r\n                          </h6>\r\n                          <div className='pl-lg-4'>\r\n                            <Row>\r\n                              <Col md='3'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='firstName'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    First Name\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='text'\r\n                                    name='firstName'\r\n                                    placeholder='Johnny'\r\n                                    value={values.firstName}\r\n                                    onChange={handleChange}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                              <Col md='3'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='lastName'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Last Name\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='text'\r\n                                    name='lastName'\r\n                                    value={values.lastName}\r\n                                    placeholder='Appleseed'\r\n                                    onChange={handleChange}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                              <Col md='6'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='email'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Email\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='email'\r\n                                    name='email'\r\n                                    value={values.email}\r\n                                    placeholder='johnny@example.com'\r\n                                    onChange={handleChange}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col md='6'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='role'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Role\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='select'\r\n                                    name='role'\r\n                                    value={values.role}\r\n                                    onChange={handleChange}\r\n                                  >\r\n                                    <option>Technician</option>\r\n                                    <option>Logistics</option>\r\n                                    <option>Admin</option>\r\n                                  </Input>\r\n                                </FormGroup>\r\n                              </Col>\r\n                              <Col md='6'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='Phone'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Phone\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='text'\r\n                                    name='phone'\r\n                                    value={values.phone}\r\n                                    placeholder='(555) 555-5555'\r\n                                    onChange={handleChange}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n                            <Button\r\n                              color='success'\r\n                              type='submit'\r\n                              onClick={handleSubmit}\r\n                            >\r\n                              {savingInfo ? (\r\n                                <span>\r\n                                  {' '}\r\n                                  <SpinnerCircular\r\n                                    size={24}\r\n                                    thickness={180}\r\n                                    speed={100}\r\n                                    color='rgba(57, 125, 172, 1)'\r\n                                    secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                  />{' '}\r\n                                  Processing...\r\n                                </span>\r\n                              ) : (\r\n                                <span>Save User Info</span>\r\n                              )}\r\n                            </Button>\r\n                          </div>\r\n                        </Form>\r\n                      </Fragment>\r\n                    )}\r\n                  />\r\n\r\n                  <hr className='my-4' />\r\n\r\n                  <Formik\r\n                    initialValues={{\r\n                      password: '',\r\n                      confirmPassword: ''\r\n                    }}\r\n                    onSubmit={async data => {\r\n                      updateEmployeePassword(match.params.id, data);\r\n                    }}\r\n                    validationSchema={passwordSchema}\r\n                    render={({\r\n                      handleSubmit,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      validateForm,\r\n                      isValid\r\n                    }) => (\r\n                      <Fragment>\r\n                        <h6 className='heading-small text-muted mb-4'>\r\n                          Change Password\r\n                        </h6>\r\n                        <div className='pl-lg-4'>\r\n                          <Form>\r\n                            <Row>\r\n                              <Col md='6'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='password'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    New Password\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='password'\r\n                                    name='password'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                  />\r\n                                  {errors.password && touched.password && (\r\n                                    <p className='color-red'>\r\n                                      {errors.password}\r\n                                    </p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n\r\n                              <Col md='6'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='confirmPassword'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Confirm New Password\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='password'\r\n                                    name='confirmPassword'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                  />\r\n                                  {errors.confirmPassword &&\r\n                                    touched.confirmPassword && (\r\n                                      <p className='color-red'>\r\n                                        {errors.confirmPassword}\r\n                                      </p>\r\n                                    )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n                            <Button\r\n                              color='success'\r\n                              type='submit'\r\n                              onClick={handleSubmit}\r\n                            >\r\n                              Save New Password\r\n                            </Button>\r\n                          </Form>\r\n                        </div>\r\n                      </Fragment>\r\n                    )}\r\n                  />\r\n                </Fragment>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nEditUser.propTypes = {\r\n  updateEmployee: PropTypes.func.isRequired,\r\n  getSingleEmployee: PropTypes.func.isRequired,\r\n  updateEmployeePassword: PropTypes.func.isRequired,\r\n  employee: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  employee: state.employee.singleEmployee\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateEmployee,\r\n  getSingleEmployee,\r\n  updateEmployeePassword\r\n})(EditUser);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\routing\\PrivateRoute.js",[],["291","292"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ManageChecklist.js",[],["293","294"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\CustomManager.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\App.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ManageEquipment.js",["295","296","297","298","299","300"],"import React, { Fragment, useState, useEffect, useRef } from 'react';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Badge\r\n} from 'reactstrap';\r\n\r\nimport { Formik } from 'formik';\r\nimport {\r\n  getSingleCustomer,\r\n  updateEquipment,\r\n  deleteEquipment\r\n} from '../../actions/customer';\r\n\r\nimport Alert from '../Layout/Alert';\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\n\r\nimport PumpManager from '../EquipmentManagers/PumpManager';\r\nimport FilterManager from '../EquipmentManagers/FilterManager';\r\nimport HeaterManager from '../EquipmentManagers/HeaterManager';\r\nimport CleanerManager from '../EquipmentManagers/CleanerManager.';\r\nimport CustomManager from '../EquipmentManagers/CustomManager';\r\n\r\nconst ManageEquipment = ({\r\n  match,\r\n  getSingleCustomer,\r\n  updateEquipment,\r\n  deleteEquipment,\r\n  customer: { customer, singleLoading }\r\n}) => {\r\n  useEffect(() => {\r\n    getSingleCustomer(match.params.id);\r\n  }, [getSingleCustomer]);\r\n\r\n  const [itemsList, setItemsList] = useState([]);\r\n  const formRef = useRef();\r\n  const handleSubmit = () => {\r\n    if (formRef.current) {\r\n      formRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const onAddItem = () => {\r\n    const object = {};\r\n    object.itentifier = uuidv4();\r\n    object.category = 'Cleaners';\r\n    object.make = 'Aqua Products';\r\n    object.model = 'AquaBot AB';\r\n\r\n    setItemsList([...itemsList, object]);\r\n  };\r\n\r\n  const handleCategoryChange = (id, data) => {\r\n    const itemIndex = itemsList.findIndex(item => item.itentifier === `${id}`);\r\n\r\n    const list = [...itemsList];\r\n    const itemToEdit = { ...list[itemIndex] };\r\n\r\n    itemToEdit.category = data.target.value;\r\n\r\n    list[itemIndex] = itemToEdit;\r\n\r\n    setItemsList(list);\r\n  };\r\n\r\n  const handleMakeChange = (id, data) => {\r\n    const itemIndex = itemsList.findIndex(item => item.itentifier === `${id}`);\r\n\r\n    const list = [...itemsList];\r\n    const itemToEdit = { ...list[itemIndex] };\r\n\r\n    itemToEdit.make = data.target.value;\r\n\r\n    list[itemIndex] = itemToEdit;\r\n\r\n    setItemsList(list);\r\n  };\r\n\r\n  const handleModelChange = (id, data) => {\r\n    const itemIndex = itemsList.findIndex(item => item.itentifier === `${id}`);\r\n\r\n    const list = [...itemsList];\r\n    const itemToEdit = { ...list[itemIndex] };\r\n\r\n    itemToEdit.model = data.target.value;\r\n\r\n    list[itemIndex] = itemToEdit;\r\n\r\n    setItemsList(list);\r\n  };\r\n\r\n  const [itemDeleteModal, setItemDeleteModal] = useState({\r\n    isOpen: false,\r\n    active: null,\r\n    isLoading: false\r\n  });\r\n\r\n  const toggleDeleteModal = itemId => {\r\n    setItemDeleteModal({\r\n      isOpen: !itemDeleteModal.open,\r\n      active: itemId,\r\n      isLoading: false\r\n    });\r\n  };\r\n\r\n  const handleItemDelete = async itemId => {\r\n    await deleteEquipment(match.params.id, itemId);\r\n    getSingleCustomer(match.params.id);\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='customers' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-12 col-12'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/customers'>Customers</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to={`/customers/${match.params.id}`}>\r\n                          {match.params.id}\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link\r\n                          to={`/customers/${match.params.id}/manage/equipment`}\r\n                        >\r\n                          Manage Equipment\r\n                        </Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60'>\r\n          {!customer ? (\r\n            <Card>\r\n              <CardHeader>\r\n                {' '}\r\n                <div className='row align-items-center'>\r\n                  <div className='col-8'>\r\n                    <h3 className='mb-0'>Manage Equipment:</h3>\r\n                  </div>\r\n                </div>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <div className='text-center'>\r\n                  <h4>Loading Data...</h4>\r\n                  <SpinnerCircular\r\n                    size={54}\r\n                    thickness={180}\r\n                    speed={100}\r\n                    color='rgba(57, 125, 172, 1)'\r\n                    secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                  />\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          ) : (\r\n            <Card>\r\n              <CardHeader>\r\n                {' '}\r\n                <div className='row align-items-center'>\r\n                  <Col sm={{ size: 8 }}>\r\n                    <h3 className='mb-0'>Manage Equipment:</h3>\r\n                  </Col>\r\n                  <Col sm={{ size: 4 }} className='d-none d-lg-block'>\r\n                    <div className='text-right'>\r\n                      <Button\r\n                        type='submit'\r\n                        color='success'\r\n                        onClick={() => {\r\n                          handleSubmit();\r\n                          history.push(`/customers/${match.params.id}`);\r\n                        }}\r\n                      >\r\n                        Save Changes\r\n                      </Button>\r\n                    </div>\r\n                  </Col>\r\n                  <Col\r\n                    sm={{ size: 4 }}\r\n                    className='d-block d-sm-block d-md-block d-lg-none'\r\n                  >\r\n                    <br />\r\n                    <Button\r\n                      type='submit'\r\n                      color='success'\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      Save Changes\r\n                    </Button>\r\n                  </Col>\r\n                </div>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Fragment>\r\n                  <Formik\r\n                    initialValues={{\r\n                      poolType: customer[0].poolEquipment.poolType,\r\n                      bodiesOfWater: customer[0].poolEquipment.bodiesOfWater,\r\n                      poolGallons: customer[0].poolEquipment.poolGallons,\r\n                      pumpMake: customer[0].poolEquipment.pumpMake,\r\n                      pumpModel: customer[0].poolEquipment.pumpModel,\r\n                      heaterMake: customer[0].poolEquipment.heaterMake,\r\n                      heaterModel: customer[0].poolEquipment.heaterModel,\r\n                      filterMake: customer[0].poolEquipment.filterMake,\r\n                      filterModel: customer[0].poolEquipment.filterModel,\r\n                      cleanerMake: customer[0].poolEquipment.cleanerMake,\r\n                      cleanerModel: customer[0].poolEquipment.cleanerModel\r\n                    }}\r\n                    innerRef={formRef}\r\n                    onSubmit={async data => {\r\n                      await updateEquipment(match.params.id, itemsList, data);\r\n                      getSingleCustomer(match.params.id);\r\n                      setItemsList([]);\r\n                    }}\r\n                    render={({\r\n                      handleSubmit,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      values\r\n                    }) => (\r\n                      <Fragment>\r\n                        <Form onSubmit={handleSubmit}>\r\n                          <Row>\r\n                            <Col lg='4'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='poolType'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Pool Type:\r\n                                </Label>\r\n                                <Input\r\n                                  type='select'\r\n                                  name='poolType'\r\n                                  onChange={handleChange}\r\n                                  value={values.poolType}\r\n                                >\r\n                                  <option>N/A</option>\r\n                                  <option>Inground Pool</option>\r\n                                  <option>Above Ground Pool</option>\r\n                                  <option>Other</option>\r\n                                </Input>\r\n                              </FormGroup>\r\n                              <FormGroup>\r\n                                <Label className='form-control-label'>\r\n                                  How Many Gallons Is The Pool?:\r\n                                </Label>\r\n                                <InputGroup>\r\n                                  <Input\r\n                                    type='number'\r\n                                    placeholder='28000'\r\n                                    onChange={handleChange}\r\n                                    name='poolGallons'\r\n                                    value={values.poolGallons}\r\n                                  />\r\n                                  <InputGroupAddon addonType='append'>\r\n                                    <InputGroupText>Gallons</InputGroupText>\r\n                                  </InputGroupAddon>\r\n                                </InputGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='4'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='bodiesOfWater'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Bodies Of Water:\r\n                                </Label>\r\n                                <Input\r\n                                  type='select'\r\n                                  name='bodiesOfWater'\r\n                                  onChange={handleChange}\r\n                                  value={values.bodiesOfWater}\r\n                                >\r\n                                  <option>N/A</option>\r\n                                  <option>Pool</option>\r\n                                  <option>Spa</option>\r\n                                  <option>Pool & Spa</option>\r\n                                </Input>\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='4'>\r\n                              <PumpManager\r\n                                handleChange={handleChange}\r\n                                handleBlur={handleBlur}\r\n                                values={values}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <hr />\r\n                          <Row>\r\n                            <Col lg='4'>\r\n                              <FilterManager\r\n                                handleChange={handleChange}\r\n                                handleBlur={handleBlur}\r\n                                values={values}\r\n                              />\r\n                            </Col>\r\n                            <Col lg='4'>\r\n                              <HeaterManager\r\n                                handleChange={handleChange}\r\n                                handleBlur={handleBlur}\r\n                                values={values}\r\n                              />\r\n                            </Col>\r\n\r\n                            <Col lg='4'>\r\n                              <CleanerManager\r\n                                handleChange={handleChange}\r\n                                handleBlur={handleBlur}\r\n                                values={values}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <hr />\r\n                          {customer[0].poolEquipment.other.map(item => (\r\n                            <Fragment key={item._id}>\r\n                              <Row>\r\n                                <Col md='3'>\r\n                                  <h4>Category:</h4>\r\n                                  {item.category}\r\n                                </Col>\r\n                                <Col md='3'>\r\n                                  <h4>Make:</h4>\r\n                                  {item.make}\r\n                                </Col>\r\n                                <Col md='3'>\r\n                                  <h4>Model:</h4>\r\n                                  {item.model}\r\n                                </Col>\r\n                                <Col md='3'>\r\n                                  <h4>Actions:</h4>\r\n                                  <Button\r\n                                    color='danger'\r\n                                    size='sm'\r\n                                    onClick={() => {\r\n                                      toggleDeleteModal(item._id);\r\n                                    }}\r\n                                  >\r\n                                    Delete Item\r\n                                  </Button>\r\n                                </Col>\r\n                              </Row>\r\n                              <br />\r\n                            </Fragment>\r\n                          ))}\r\n                          <Modal\r\n                            isOpen={itemDeleteModal.isOpen}\r\n                            toggle={e =>\r\n                              setItemDeleteModal({\r\n                                ...itemDeleteModal,\r\n                                isOpen: false\r\n                              })\r\n                            }\r\n                          >\r\n                            <ModalHeader\r\n                              toggle={e =>\r\n                                setItemDeleteModal({\r\n                                  ...itemDeleteModal,\r\n                                  isOpen: false\r\n                                })\r\n                              }\r\n                            >\r\n                              Are you sure?\r\n                            </ModalHeader>\r\n                            <ModalBody>\r\n                              Are you sure you want to delete this item? This\r\n                              action cannot be undone.\r\n                            </ModalBody>\r\n                            <ModalFooter>\r\n                              <Button\r\n                                onClick={e =>\r\n                                  setItemDeleteModal({\r\n                                    ...itemDeleteModal,\r\n                                    isOpen: false\r\n                                  })\r\n                                }\r\n                              >\r\n                                Cancel\r\n                              </Button>\r\n                              <Button\r\n                                color='danger'\r\n                                onClick={async e => {\r\n                                  setItemDeleteModal({\r\n                                    ...itemDeleteModal,\r\n                                    isLoading: true\r\n                                  });\r\n                                  await handleItemDelete(\r\n                                    itemDeleteModal.active\r\n                                  );\r\n                                  setItemDeleteModal({\r\n                                    isLoading: false,\r\n                                    isOpen: false,\r\n                                    active: null\r\n                                  });\r\n                                }}\r\n                              >\r\n                                {itemDeleteModal.isLoading ? (\r\n                                  <span>\r\n                                    <SpinnerCircular\r\n                                      size={24}\r\n                                      thickness={180}\r\n                                      speed={100}\r\n                                      color='rgba(57, 125, 172, 1)'\r\n                                      secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                    />{' '}\r\n                                    Processing...\r\n                                  </span>\r\n                                ) : (\r\n                                  <span>Delete Item</span>\r\n                                )}\r\n                              </Button>\r\n                            </ModalFooter>\r\n                          </Modal>\r\n                          <br />\r\n                          <CustomManager\r\n                            itemsList={itemsList}\r\n                            handleCategoryChange={handleCategoryChange}\r\n                            handleBlur={handleBlur}\r\n                            handleChange={handleChange}\r\n                            handleModelChange={handleModelChange}\r\n                            handleMakeChange={handleMakeChange}\r\n                          />\r\n\r\n                          <Row>\r\n                            <Col lg='12'>\r\n                              <div className='text-center'>\r\n                                <Button\r\n                                  className='btn-icon'\r\n                                  color='success'\r\n                                  onClick={onAddItem}\r\n                                  block\r\n                                >\r\n                                  <span className='btn-inner--icon'>\r\n                                    <i className='fas fa-plus'></i>\r\n                                  </span>\r\n                                  <span className='btn-inner--text'>\r\n                                    Add Item\r\n                                  </span>\r\n                                </Button>\r\n                              </div>\r\n                            </Col>\r\n                          </Row>\r\n                          <br />\r\n                        </Form>\r\n                      </Fragment>\r\n                    )}\r\n                  />\r\n                </Fragment>\r\n              </CardBody>\r\n            </Card>\r\n          )}\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nManageEquipment.propTypes = {\r\n  getSingleCustomer: PropTypes.func.isRequired,\r\n  updateEquipment: PropTypes.func.isRequired,\r\n  deleteEquipment: PropTypes.func.isRequired,\r\n  customer: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  customer: state.customer.singleCustomer\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSingleCustomer,\r\n  updateEquipment,\r\n  deleteEquipment\r\n})(ManageEquipment);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\MapDirectionsRenderer.js",["301","302","303","304","305"],"import React, { useState, useEffect, Fragment } from 'react';\r\n/* global google */\r\nimport {\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  withScriptjs,\r\n  Marker,\r\n  DirectionsRenderer\r\n} from '@react-google-maps/api';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getRouteLegs } from '../../actions/map';\r\n\r\nconst MapDirectionsRenderer = ({ places, travelMode, getRouteLegs }) => {\r\n  const [directions, setDirections] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // const { places, travelMode } = props;\r\n\r\n    const waypoints = places.map(p => ({\r\n      location: {\r\n        lat: parseFloat(p.serviceLat),\r\n        lng: parseFloat(p.serviceLng)\r\n      },\r\n      stopover: true\r\n    }));\r\n\r\n    // console.log(waypoints[waypoints.length - 1]);\r\n    const origin = waypoints.shift().location;\r\n    const destination = waypoints.pop().location;\r\n\r\n    const directionsService = new google.maps.DirectionsService();\r\n    directionsService.route(\r\n      {\r\n        origin: origin,\r\n        destination: destination,\r\n        waypoints: waypoints,\r\n        travelMode: travelMode\r\n      },\r\n      (result, status) => {\r\n        if (status === 'OK') {\r\n          setDirections(result);\r\n          getRouteLegs(result.routes[0].legs);\r\n        } else {\r\n          console.log(result);\r\n          setError(result);\r\n        }\r\n      }\r\n    );\r\n  }, [getRouteLegs]);\r\n\r\n  if (error) {\r\n    return <h1>{error}</h1>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {directions && <DirectionsRenderer directions={directions} />}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nMapDirectionsRenderer.propTypes = {\r\n  getRouteLegs: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, { getRouteLegs })(MapDirectionsRenderer);\r\n",["306","307"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Users.js",["308","309","310","311","312","313","314","315","316","317"],"import React, { Fragment, useEffect } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Formik } from 'formik';\r\n\r\nimport { getEmployees, markEmployeeInactive } from '../../actions/employee';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\nimport Alert from '../Layout/Alert';\r\n\r\nimport {\r\n  Button,\r\n  Badge,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label\r\n} from 'reactstrap';\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport\r\n} from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nconst { SearchBar } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst pagination = paginationFactory({\r\n  page: 1,\r\n  alwaysShowAllBtns: true,\r\n  showTotal: true,\r\n  withFirstAndLast: false,\r\n  sizePerPageRenderer: ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <div className='dataTables_length' id='datatable-basic_length'>\r\n      <select\r\n        name='datatable-basic_length'\r\n        aria-controls='datatable-basic'\r\n        className='form-control form-control-sm'\r\n        style={{ width: '30%' }}\r\n        onChange={e => onSizePerPageChange(e.target.value)}\r\n      >\r\n        <option value='10'>10</option>\r\n        <option value='25'>25</option>\r\n        <option value='50'>50</option>\r\n        <option value='100'>100</option>\r\n      </select>\r\n    </div>\r\n  )\r\n});\r\n\r\nconst statusFormatter = cell => {\r\n  if (cell === true) {\r\n    return <Badge color='success'>Active</Badge>;\r\n  } else if (cell === false) {\r\n    return <Badge color='secondary'>Inactive</Badge>;\r\n  } else {\r\n    return <Badge color='dark'>N/A</Badge>;\r\n  }\r\n};\r\n\r\nconst Users = ({\r\n  getEmployees,\r\n  markEmployeeInactive,\r\n  employees: { employees, loading }\r\n}) => {\r\n  useEffect(() => {\r\n    getEmployees();\r\n  }, [getEmployees]);\r\n\r\n  const actionFormatter = cell => {\r\n    return (\r\n      <UncontrolledDropdown>\r\n        <DropdownToggle\r\n          className='btn-icon-only text-light'\r\n          color=''\r\n          role='button'\r\n          size='sm'\r\n        >\r\n          <i className='fas fa-ellipsis-v' />\r\n        </DropdownToggle>\r\n        <DropdownMenu className='dropdown-menu-arrow' right>\r\n          <DropdownItem tag={Link} to={`/users/${cell}/view`}>\r\n            View User\r\n          </DropdownItem>\r\n          <DropdownItem tag={Link} to={`/users/${cell}/edit`}>\r\n            Edit User\r\n          </DropdownItem>\r\n          <DropdownItem\r\n            onClick={async () => {\r\n              await markEmployeeInactive(cell);\r\n              getEmployees();\r\n            }}\r\n          >\r\n            Toggle User Active\r\n          </DropdownItem>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      dataField: 'firstName',\r\n      text: 'First Name'\r\n    },\r\n    {\r\n      dataField: 'lastName',\r\n      text: 'Last Name'\r\n    },\r\n    {\r\n      dataField: 'email',\r\n      text: 'Email/Username'\r\n    },\r\n    {\r\n      dataField: 'role',\r\n      text: 'Role'\r\n    },\r\n    {\r\n      dataField: 'isActive',\r\n      text: 'Status',\r\n      formatter: statusFormatter\r\n    },\r\n    {\r\n      dataField: '_id',\r\n      text: 'Actions',\r\n      formatter: actionFormatter\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='users' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/'>\r\n                          <i className='fas fa-home' />\r\n                        </a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/dashboard'>Dashboard</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <a href='/users'>Users</a>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container className='mgn-ng-top-60'>\r\n          <div className='card'>\r\n            <div className='card-header'>\r\n              <div className='row align-items-center'>\r\n                <div className='col-8'>\r\n                  <h3 className='mb-0'>Users </h3>\r\n                </div>\r\n                <div className='col-4 text-right'>\r\n                  <Link className='float-right btn btn-primary' to='/users/add'>\r\n                    <span className='btn-inner--icon'>\r\n                      <i className='fas fa-user-plus'></i>\r\n                    </span>{' '}\r\n                    <span className='btn-inner--text'>Add User</span>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='card-body'>\r\n              {loading ? (\r\n                <Fragment>\r\n                  <div className='text-center'>\r\n                    <h4>Locating Users...</h4>\r\n                    <SpinnerCircular\r\n                      size={54}\r\n                      thickness={180}\r\n                      speed={100}\r\n                      color='rgba(57, 125, 172, 1)'\r\n                      secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                    />\r\n                  </div>\r\n                </Fragment>\r\n              ) : (\r\n                <ToolkitProvider\r\n                  data={employees}\r\n                  keyField='_id'\r\n                  columns={columns}\r\n                  search\r\n                  exportCSV\r\n                >\r\n                  {props => (\r\n                    <div\r\n                      className='py-4 table-responsive'\r\n                      style={{ padding: '25px' }}\r\n                    >\r\n                      <div id='datatable-basic_filter' className='px-4 pb-1'>\r\n                        <Row>\r\n                          <Col md='6'>\r\n                            <ExportCSVButton\r\n                              className='buttons-copy buttons-html5 btn-sm'\r\n                              {...props.csvProps}\r\n                            >\r\n                              <i className='ni ni-align-left-2'></i> Export CSV\r\n                            </ExportCSVButton>\r\n                          </Col>\r\n                          <Col md={{ size: 'auto', offset: 3 }}>\r\n                            <SearchBar\r\n                              className='form-control-sm'\r\n                              placeholder='Search Users'\r\n                              {...props.searchProps}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n\r\n                      <BootstrapTable\r\n                        {...props.baseProps}\r\n                        bootstrap4={true}\r\n                        pagination={pagination}\r\n                        bordered={false}\r\n                        wrapperClasses='table-responsive mh-330'\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </ToolkitProvider>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nUsers.propTypes = {\r\n  getEmployees: PropTypes.func.isRequired,\r\n  markEmployeeInactive: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  employees: state.employee\r\n});\r\n\r\nexport default connect(mapStateToProps, { getEmployees, markEmployeeInactive })(\r\n  Users\r\n);\r\n",["318","319"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\utils\\RoutingMachine.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Login.js",["320","321","322","323","324"],"import React, { Fragment, useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { login } from '../../actions/auth';\r\n\r\nimport Navbar from '../Layout/Navbar';\r\nimport Footer from '../Layout/Footer';\r\nimport Alert from '../Layout/Alert';\r\n\r\nconst Login = ({ login, isAuthenticated }) => {\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    password: ''\r\n  });\r\n\r\n  const { email, password } = formData;\r\n\r\n  const onChange = e => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmit = async e => {\r\n    e.preventDefault();\r\n    login(email, password);\r\n  };\r\n\r\n  // Redirect if logged in\r\n  if (isAuthenticated) {\r\n    return <Redirect to='/dashboard' />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Navbar />\r\n      <Alert />\r\n\r\n      <div className='main-content' style={{ background: '#172b4d' }}>\r\n        <div className='header bg-gradient-primary py-7 py-lg-8 pt-lg-9'>\r\n          <div className='container'>\r\n            <div className='header-body text-center mb-7'>\r\n              <div className='row justify-content-center'>\r\n                <div className='col-xl-5 col-lg-6 col-md-8 px-5'>\r\n                  <h1 className='text-white'>Welcome Back!</h1>\r\n                  <p className='text-lead text-white'>\r\n                    Sign into your PoolPro360 account below.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='separator separator-bottom separator-skew zindex-100'>\r\n            <svg\r\n              x='0'\r\n              y='0'\r\n              viewBox='0 0 2560 100'\r\n              preserveAspectRatio='none'\r\n              version='1.1'\r\n              xmlns='http://www.w3.org/2000/svg'\r\n            >\r\n              <polygon\r\n                className='fill-default'\r\n                points='2560 0 2560 100 0 100'\r\n              ></polygon>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='container mt--8 pb-5'>\r\n          <div className='row justify-content-center'>\r\n            <div className='col-lg-5 col-md-7'>\r\n              <div className='card bg-secondary border-0 mb-0'>\r\n                <div className='card-body px-lg-5 py-lg-5'>\r\n                  <div className='text-center text-muted mb-4'>\r\n                    <small>Sign in with credentials:</small>\r\n                  </div>\r\n                  <form role='form' onSubmit={onSubmit}>\r\n                    <div className='form-group mb-3'>\r\n                      <div className='input-group input-group-merge input-group-alternative'>\r\n                        <div className='input-group-prepend'>\r\n                          <span className='input-group-text'>\r\n                            <i className='ni ni-email-83'></i>\r\n                          </span>\r\n                        </div>\r\n                        <input\r\n                          className='form-control'\r\n                          placeholder='Email'\r\n                          type='email'\r\n                          onChange={e => onChange(e)}\r\n                          name='email'\r\n                          value={email}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                      <div className='input-group input-group-merge input-group-alternative'>\r\n                        <div className='input-group-prepend'>\r\n                          <span className='input-group-text'>\r\n                            <i className='ni ni-lock-circle-open'></i>\r\n                          </span>\r\n                        </div>\r\n                        <input\r\n                          className='form-control'\r\n                          placeholder='Password'\r\n                          type='password'\r\n                          onChange={e => onChange(e)}\r\n                          name='password'\r\n                          value={password}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='custom-control custom-control-alternative custom-checkbox'>\r\n                      <input\r\n                        className='custom-control-input'\r\n                        id=' customCheckLogin'\r\n                        type='checkbox'\r\n                      />\r\n                      <label\r\n                        className='custom-control-label'\r\n                        htmlFor=' customCheckLogin'\r\n                      >\r\n                        <span className='text-muted'>Remember me</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type='button'\r\n                        type='submit'\r\n                        className='btn btn-primary my-4'\r\n                      >\r\n                        Sign in\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n              <div className='row mt-3'>\r\n                <div className='col-6'>\r\n                  <a href='#' className='text-light'>\r\n                    <small>Forgot password?</small>\r\n                  </a>\r\n                </div>\r\n                <div className='col-6 text-right'>\r\n                  <a href='#' className='text-light'>\r\n                    <small>Create new account</small>\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Footer cssClass='footer-dark' />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nLogin.propTypes = {\r\n  login: PropTypes.func.isRequired,\r\n  isAuthenticated: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n",["325","326"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\map.js",["327"],"import { setAlert } from './alert';\r\nimport { GET_ROUTE_LEGS } from './types';\r\n\r\n// Get Route Legs\r\nexport const getRouteLegs = legs => async dispatch => {\r\n  dispatch({\r\n    type: GET_ROUTE_LEGS,\r\n    payload: legs\r\n  });\r\n};\r\n",["328","329"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\auth.js",["330"],"import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  ACCOUNT_DELETED\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  token: localStorage.getItem('token'),\r\n  isAuthenticated: null,\r\n  loading: true,\r\n  user: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case USER_LOADED:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        user: payload\r\n      };\r\n    case REGISTER_SUCCESS:\r\n    case LOGIN_SUCCESS:\r\n      localStorage.setItem('token', payload.token);\r\n      return {\r\n        ...state,\r\n        ...payload,\r\n        isAuthenticated: false,\r\n        loading: false\r\n      };\r\n    case REGISTER_FAIL:\r\n    case AUTH_ERROR:\r\n    case LOGIN_FAIL:\r\n    case LOGOUT:\r\n    case ACCOUNT_DELETED:\r\n      localStorage.removeItem('token');\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        user: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\alert.js",["331"],"import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\r\n\r\nconst initialState = [];\r\n\r\nexport default function(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_ALERT:\r\n      return [...state, payload];\r\n    case REMOVE_ALERT:\r\n      return state.filter(alert => alert.id !== payload);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\FormSettingsController.js",["332","333","334","335","336","337","338"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\AddCustomers.js",["339","340","341"],"import React, { Fragment, useState, useRef, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { addCustomer } from '../../actions/customer';\r\nimport { getEmployees } from '../../actions/employee';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Input,\r\n  Form,\r\n  Label,\r\n  FormGroup\r\n} from 'reactstrap';\r\n\r\nimport { Formik } from 'formik';\r\n\r\nimport * as Yup from 'yup';\r\n\r\nconst AddCustomers = ({\r\n  addCustomer,\r\n  getEmployees,\r\n  employees: { employees }\r\n}) => {\r\n  const [showBilling, setShowBilling] = useState(false);\r\n\r\n  const toggleBilling = () => setShowBilling(!showBilling);\r\n\r\n  const formSchema = Yup.object().shape({\r\n    firstName: Yup.string().required('First name is required'),\r\n    lastName: Yup.string().required('Last name is required'),\r\n    email: Yup.string().email('Please provide a valid email'),\r\n    mobilePhone: Yup.string(),\r\n    serviceAddress: Yup.string().required('Service address is required'),\r\n    serviceCity: Yup.string().required('Service city is required'),\r\n    serviceState: Yup.string().required('Service state is required'),\r\n    serviceZip: Yup.string().required('Service zip is required')\r\n  });\r\n\r\n  const formRef = useRef();\r\n  const history = useHistory();\r\n  const handleSubmit = () => {\r\n    if (formRef.current) {\r\n      formRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getEmployees();\r\n  }, [getEmployees]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='customers' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/'>\r\n                          <i className='fas fa-home' />\r\n                        </a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/dashboard'>Dashboard</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/customers'>Customers</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <a href='/customers/add'>Add Customer</a>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n                <div className='col-lg-6 col-5 text-right'>\r\n                  <a href='#' className='btn btn-sm btn-neutral'>\r\n                    New\r\n                  </a>\r\n                  <a href='#' className='btn btn-sm btn-neutral'>\r\n                    Filters\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60'>\r\n          <div className='card'>\r\n            <div className='card-header'>\r\n              <div className='row align-items-center'>\r\n                <div className='col-8'>\r\n                  <h3 className='mb-0'>Add Customer </h3>\r\n                </div>\r\n                <div className='col-4 text-right'>\r\n                  <Button type='submit' color='success' onClick={handleSubmit}>\r\n                    Save Customer\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='card-body'>\r\n              <Formik\r\n                initialValues={{\r\n                  firstName: '',\r\n                  lastName: '',\r\n                  email: '',\r\n                  mobilePhone: '',\r\n                  serviceAddress: '',\r\n                  serviceCity: '',\r\n                  serviceState: '',\r\n                  serviceZip: '',\r\n                  gateCode: '',\r\n                  canText: 'N/A',\r\n                  poolType: 'N/A',\r\n                  technician: 'N/A',\r\n                  servicePackageAndRate:\r\n                    'Inactive (Customer Will Not Be Serviced)',\r\n                  billingSame: false,\r\n                  billingType: 'Manual Billing',\r\n                  paymentMethod: 'N/A',\r\n                  billingAddress: '',\r\n                  billingCity: '',\r\n                  billingState: '',\r\n                  billingZip: ''\r\n                }}\r\n                innerRef={formRef}\r\n                validationSchema={formSchema}\r\n                onSubmit={async data => {\r\n                  await addCustomer(data);\r\n                  history.push('/customers');\r\n                }}\r\n                render={({\r\n                  handleSubmit,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  validateForm,\r\n                  isValid\r\n                }) => (\r\n                  <Fragment>\r\n                    <Form onSubmit={handleSubmit}>\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        Customer Information\r\n                      </h6>\r\n                      <div className='pl-lg-4'>\r\n                        <Row>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='firstName'\r\n                                className='form-control-label'\r\n                              >\r\n                                First name\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='firstName'\r\n                                placeholder='John'\r\n                                value={values.firstName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.firstName && touched.firstName && (\r\n                                <p className='color-red'>{errors.firstName}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='lastName'\r\n                                className='form-control-label'\r\n                              >\r\n                                Last name\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='lastName'\r\n                                placeholder='Doe'\r\n                                value={values.lastName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.lastName && touched.lastName && (\r\n                                <p className='color-red'>{errors.lastName}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='mobilePhone'\r\n                                className='form-control-label'\r\n                              >\r\n                                Mobile Number\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='mobilePhone'\r\n                                placeholder='(555) 555-5555'\r\n                                value={values.mobilePhone}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.mobilePhone && touched.mobilePhone && (\r\n                                <p className='color-red'>\r\n                                  {errors.mobilePhone}\r\n                                </p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label for='email' className='form-control-label'>\r\n                                Email address\r\n                              </Label>\r\n                              <Input\r\n                                type='email'\r\n                                name='email'\r\n                                placeholder='jessie@example.com'\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.email && touched.email && (\r\n                                <p className='color-red'>{errors.email}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='canText'\r\n                                className='form-control-label'\r\n                              >\r\n                                Can text?\r\n                              </Label>\r\n                              <Input\r\n                                type='select'\r\n                                name='canText'\r\n                                value={values.canText}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              >\r\n                                <option>N/A</option>\r\n                                <option>Yes</option>\r\n                                <option>No</option>\r\n                              </Input>\r\n                              {errors.canText && touched.canText && (\r\n                                <p className='color-red'>{errors.canText}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='poolType'\r\n                                className='form-control-label'\r\n                              >\r\n                                Pool Type\r\n                              </Label>\r\n                              <Input\r\n                                type='select'\r\n                                name='poolType'\r\n                                value={values.poolType}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              >\r\n                                <option>N/A</option>\r\n                                <option>Residential</option>\r\n                                <option>Commercial</option>\r\n                              </Input>\r\n                              {errors.poolType && touched.poolType && (\r\n                                <p className='color-red'>{errors.poolType}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                      <hr className='my-4' />\r\n                      {/* Address */}\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        Service information\r\n                      </h6>\r\n                      <div className='pl-lg-4'>\r\n                        <Row>\r\n                          <Col lg='12'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='serviceAddress'\r\n                                className='form-control-label'\r\n                              >\r\n                                Address\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='serviceAddress'\r\n                                placeholder='2070 Libby Street'\r\n                                value={values.serviceAddress}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.serviceAddress &&\r\n                                touched.serviceAddress && (\r\n                                  <p className='color-red'>\r\n                                    {errors.serviceAddress}\r\n                                  </p>\r\n                                )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col lg='4'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='serviceCity'\r\n                                className='form-control-label'\r\n                              >\r\n                                City\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='serviceCity'\r\n                                placeholder='Beverly Hills'\r\n                                value={values.serviceCity}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.serviceCity && touched.serviceCity && (\r\n                                <p className='color-red'>\r\n                                  {errors.serviceCity}\r\n                                </p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='4'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='serviceState'\r\n                                className='form-control-label'\r\n                              >\r\n                                State\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='serviceState'\r\n                                placeholder='CA'\r\n                                value={values.serviceState}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.serviceState && touched.serviceState && (\r\n                                <p className='color-red'>\r\n                                  {errors.serviceState}\r\n                                </p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='4'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='serviceZip'\r\n                                className='form-control-label'\r\n                              >\r\n                                Zip\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='serviceZip'\r\n                                placeholder='90210'\r\n                                value={values.serviceZip}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.serviceZip && touched.serviceZip && (\r\n                                <p className='color-red'>{errors.serviceZip}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col lg='6'>\r\n                            <Label\r\n                              for='gateCode'\r\n                              className='form-control-label'\r\n                            >\r\n                              Gate/Lock Code\r\n                            </Label>\r\n                            <Input\r\n                              type='text'\r\n                              name='gateCode'\r\n                              placeholder='12345'\r\n                              value={values.gateCode}\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                            />\r\n                          </Col>\r\n                          <Col lg='6'>\r\n                            <Label\r\n                              for='technician'\r\n                              className='form-control-label'\r\n                            >\r\n                              Assigned Technician\r\n                            </Label>\r\n                            <Input\r\n                              type='select'\r\n                              name='technician'\r\n                              value={values.technician}\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                            >\r\n                              <option>N/A</option>\r\n                              {employees.map(employee => (\r\n                                <option key={employee._id} value={employee._id}>\r\n                                  {employee.firstName} {employee.lastName}\r\n                                </option>\r\n                              ))}\r\n                            </Input>\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                      <hr className='my-4' />\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        Billing information\r\n                      </h6>\r\n                      <div className='pl-lg-4'>\r\n                        <Row>\r\n                          <Col lg='12'>\r\n                            <FormGroup>\r\n                              <Input\r\n                                name='billingSame'\r\n                                type='checkbox'\r\n                                onClick={toggleBilling}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              <Label\r\n                                for='billingSame'\r\n                                className='form-control-label'\r\n                              >\r\n                                Billing Address Same as Service Address?\r\n                              </Label>\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        {!showBilling && (\r\n                          <Fragment>\r\n                            <Row>\r\n                              <Col lg='12'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='billingAddress'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Billing Address\r\n                                  </Label>\r\n                                  <Input\r\n                                    name='billingAddress'\r\n                                    type='text'\r\n                                    placeholder='2070 Mercer Avenue'\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col lg='4'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='billingCity'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Billing City\r\n                                  </Label>\r\n                                  <Input\r\n                                    name='billingCity'\r\n                                    type='text'\r\n                                    placeholder='Beverly Hills'\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                              <Col lg='4'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='billingState'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Billing State\r\n                                  </Label>\r\n                                  <Input\r\n                                    name='billingState'\r\n                                    type='text'\r\n                                    placeholder='CA'\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                              <Col lg='4'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='billingZip'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Billing Zip\r\n                                  </Label>\r\n                                  <Input\r\n                                    name='billingZip'\r\n                                    type='text'\r\n                                    placeholder='90210'\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n                          </Fragment>\r\n                        )}\r\n                      </div>\r\n                    </Form>\r\n                  </Fragment>\r\n                )}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nAddCustomers.propTypes = {\r\n  addCustomer: PropTypes.func.isRequired,\r\n  getEmployees: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  employees: state.employee\r\n});\r\n\r\nexport default connect(mapStateToProps, { addCustomer, getEmployees })(\r\n  AddCustomers\r\n);\r\n",["342","343"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\variables\\chart.js",[],["344","345"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\EditServiceNoteModal.js",["346","347","348"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\AddUser.js",["349","350","351","352"],"import React, { Fragment, useRef, useState } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { addEmployee } from '../../actions/employee';\r\nimport { registerSubuser } from '../../actions/auth';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\nimport Alert from '../Layout/Alert';\r\n\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label\r\n} from 'reactstrap';\r\n\r\nimport { Formik } from 'formik';\r\n\r\nimport * as Yup from 'yup';\r\nimport generator from 'generate-password';\r\n\r\nconst AddUser = ({ addEmployee, registerSubuser }) => {\r\n  const [generatedPassword, setGeneratedPassword] = useState(null);\r\n\r\n  const phoneRegExp = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\r\n  const lowercaseRegex = /(?=.*[a-z])/;\r\n  const uppercaseRegex = /(?=.*[A-X])/;\r\n  const numericRegex = /(?=.*[0-9])/;\r\n\r\n  const formSchema = Yup.object().shape({\r\n    firstName: Yup.string().required('First name is required'),\r\n    lastName: Yup.string().required('Last name is required'),\r\n    email: Yup.string()\r\n      .email('Please provide a valid email')\r\n      .required('Email is required'),\r\n    phone: Yup.string()\r\n      .matches(phoneRegExp, 'Phone number is not valid')\r\n      .required('Phone is required'),\r\n    password: Yup.string()\r\n      .matches(lowercaseRegex, 'Password must contain lowercase letter')\r\n      .matches(uppercaseRegex, 'Password must contain uppercase letter')\r\n      .matches(numericRegex, 'Password must contain a number')\r\n      .min(8, 'Password must be at least 8 characters long')\r\n      .required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password')], 'Passwords do not match')\r\n      .required('Confirm password is required')\r\n  });\r\n\r\n  const formRef = useRef();\r\n  const history = useHistory();\r\n  const handleSubmit = () => {\r\n    if (formRef.current) {\r\n      formRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const onGeneratePassword = () => {\r\n    setGeneratedPassword(generator.generate({ length: 12, numbers: true }));\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='users' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/'>\r\n                          <i className='fas fa-home' />\r\n                        </a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/dashboard'>Dashboard</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/users'>Users</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <a href='/users/add'>Add User</a>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n                <div className='col-lg-6 col-5 text-right'>\r\n                  <a href='#' className='btn btn-sm btn-neutral'>\r\n                    New\r\n                  </a>\r\n                  <a href='#' className='btn btn-sm btn-neutral'>\r\n                    Filters\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              <div className='row align-items-center'>\r\n                <div className='col-8'>\r\n                  <h3 className='mb-0'>Add User </h3>\r\n                </div>\r\n                <div className='col-4 text-right'>\r\n                  <Button type='submit' color='primary' onClick={handleSubmit}>\r\n                    <span className='btn-inner--icon'>\r\n                      <i className='fas fa-save'></i>\r\n                    </span>{' '}\r\n                    <span className='btn-inner--text'>Save User</span>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Formik\r\n                initialValues={{\r\n                  firstName: '',\r\n                  lastName: '',\r\n                  email: '',\r\n                  phone: '',\r\n                  role: 'Technician',\r\n                  password: '',\r\n                  confirmPassword: ''\r\n                }}\r\n                innerRef={formRef}\r\n                onSubmit={async data => {\r\n                  await registerSubuser(data);\r\n                  history.push('/users');\r\n                }}\r\n                validationSchema={formSchema}\r\n                render={({\r\n                  handleSubmit,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  values,\r\n                  errors,\r\n                  touched\r\n                }) => (\r\n                  <Fragment>\r\n                    <Form onSubmit={handleSubmit}>\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        User Information\r\n                      </h6>\r\n                      <div className='pl-lg-4'>\r\n                        <Row>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='firstName'\r\n                                className='form-control-label'\r\n                              >\r\n                                First Name\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='firstName'\r\n                                placeholder='John'\r\n                                value={values.firstName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.firstName && touched.firstName && (\r\n                                <p className='color-red'>{errors.firstName}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='lastName'\r\n                                className='form-control-label'\r\n                              >\r\n                                Last Name\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='lastName'\r\n                                placeholder='Doe'\r\n                                value={values.lastName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.lastName && touched.lastName && (\r\n                                <p className='color-red'>{errors.lastName}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label for='email' className='form-control-label'>\r\n                                Email\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='email'\r\n                                placeholder='john.doe@gmail.com'\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.email && touched.email && (\r\n                                <p className='color-red'>{errors.email}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label for='Phone' className='form-control-label'>\r\n                                Phone\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='phone'\r\n                                placeholder='555-555-5555'\r\n                                value={values.phone}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.phone && touched.phone && (\r\n                                <p className='color-red'>{errors.phone}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col lg='12'>\r\n                            <FormGroup>\r\n                              <Label for='role' className='form-control-label'>\r\n                                User Role\r\n                              </Label>\r\n                              <Input\r\n                                type='select'\r\n                                name='role'\r\n                                value={values.role}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              >\r\n                                <option>Technician</option>\r\n                                <option>Logistics</option>\r\n                                <option>Admin</option>\r\n                              </Input>\r\n                              {errors.role && touched.role && (\r\n                                <p className='color-red'>{errors.role}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='password'\r\n                                className='form-control-label'\r\n                              >\r\n                                Password\r\n                              </Label>\r\n                              <Input\r\n                                type='password'\r\n                                name='password'\r\n                                autoComplete='on'\r\n                                placeholder='Password'\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.password && touched.password && (\r\n                                <p className='color-red'>{errors.password}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='confirmPassword'\r\n                                className='form-control-label'\r\n                              >\r\n                                Confirm Password\r\n                              </Label>\r\n                              <Input\r\n                                type='password'\r\n                                name='confirmPassword'\r\n                                autoComplete='on'\r\n                                placeholder='Confirm Password'\r\n                                value={values.confirmPassword}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.confirmPassword &&\r\n                                touched.confirmPassword && (\r\n                                  <p className='color-red'>\r\n                                    {errors.confirmPassword}\r\n                                  </p>\r\n                                )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col lg='12'>\r\n                            {generatedPassword && (\r\n                              <Fragment>\r\n                                <span>Password: {generatedPassword}</span>\r\n                                <br />\r\n                                <small>\r\n                                  Make sure to save or write down this password\r\n                                </small>\r\n                                <br />\r\n                                <br />\r\n                              </Fragment>\r\n                            )}\r\n\r\n                            <Button\r\n                              color='success'\r\n                              onClick={onGeneratePassword}\r\n                            >\r\n                              Generate a Password\r\n                            </Button>\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                    </Form>\r\n                  </Fragment>\r\n                )}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </Container>\r\n\r\n        <Footer />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nAddUser.propTypes = {\r\n  addEmployee: PropTypes.func.isRequired,\r\n  registerSubuser: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, { addEmployee, registerSubuser })(AddUser);\r\n",["353","354"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\FilterManager.js",[],["355","356"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\LeafletMap.js",[],["357","358"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\FormItemController.js",["359","360","361","362","363","364","365","366"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\HeaterManager.js",[],["367","368"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\FormCreator.js",["369","370","371","372","373","374","375","376","377","378","379","380"],"import React, { Component, Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styled from 'styled-components';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from 'reactstrap';\r\n\r\nimport FormItemController from './FormItemController';\r\nimport FormSettingsController from './FormSettingsController';\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst copy = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const item = sourceClone[droppableSource.index];\r\n\r\n  destClone.splice(droppableDestination.index, 0, { ...item, id: uuidv4() });\r\n  return destClone;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst Content = styled.div`\r\n  margin-right: 200px;\r\n`;\r\n\r\nconst Item = styled.div`\r\n  display: flex;\r\n  user-select: none;\r\n  padding: 0.5rem;\r\n  margin: 0 0 0.5rem 0;\r\n  align-items: flex-start;\r\n  align-content: flex-start;\r\n  line-height: 1.5;\r\n  border-radius: 3px;\r\n  background: #fff;\r\n  border: 1px ${props => (props.isDragging ? 'dashed #000' : 'solid #ddd')};\r\n`;\r\n\r\nconst Clone = styled(Item)`\r\n  ~ div {\r\n    transform: none !important;\r\n  }\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  align-content: center;\r\n  user-select: none;\r\n  margin: -0.5rem 0.5rem -0.5rem -0.5rem;\r\n  padding: 0.5rem;\r\n  line-height: 1.5;\r\n  border-radius: 3px 0 0 3px;\r\n  background: #fff;\r\n  border-right: 1px solid #ddd;\r\n  color: #000;\r\n`;\r\n\r\nconst List = styled.div`\r\n  border: 1px ${props => (props.isDraggingOver ? 'dashed #000' : 'solid #ddd')};\r\n  background: #fff;\r\n  padding: 0.5rem 0.5rem 0;\r\n  border-radius: 3px;\r\n  flex: 0 0 150px;\r\n  font-family: sans-serif;\r\n  min-height: 200px;\r\n`;\r\n\r\nconst Kiosk = styled(List)`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  width: 200px;\r\n`;\r\n\r\nconst Container = styled(List)`\r\n  margin: 0.5rem 0.5rem 1.5rem;\r\n`;\r\n\r\nconst Notice = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  align-content: center;\r\n  justify-content: center;\r\n  padding: 0.5rem;\r\n  margin: 0 0.5rem 0.5rem;\r\n  border: 1px solid transparent;\r\n  line-height: 1.5;\r\n  color: #aaa;\r\n`;\r\n\r\nconst ITEMS = [\r\n  {\r\n    id: uuidv4(),\r\n    content: 'Input',\r\n    icon: 'fa-font',\r\n    tag: 'input',\r\n    type: 'text',\r\n    label: 'Input Field',\r\n    placeholder: ''\r\n  },\r\n  {\r\n    id: uuidv4(),\r\n    content: 'Text Area',\r\n    icon: 'fa-align-left',\r\n    tag: 'textarea',\r\n    label: 'Text Area Field',\r\n    placeholder: ''\r\n  },\r\n  {\r\n    id: uuidv4(),\r\n    content: 'Multiple Choice',\r\n    icon: 'fa-check-square',\r\n    label: 'Multiple Choice Field',\r\n    placeholder: '',\r\n    items: [\r\n      {\r\n        label: 'Inground Pool',\r\n        priceChange: 'increase',\r\n        amount: '20'\r\n      },\r\n      {\r\n        label: 'Above Ground Pool',\r\n        priceChange: 'increase',\r\n        amount: '0'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: uuidv4(),\r\n    content: 'Email',\r\n    icon: 'fa-envelope',\r\n    tag: 'input',\r\n    type: 'email',\r\n    label: 'Email Field',\r\n    placeholder: ''\r\n  },\r\n  {\r\n    id: uuidv4(),\r\n    content: 'Picture Choice',\r\n    icon: 'fa-image',\r\n    label: 'Picture Choice Field',\r\n    placeholder: '',\r\n    items: [\r\n      {\r\n        id: uuidv4(),\r\n        label: 'Inground Pool',\r\n        priceChange: 'increase',\r\n        amount: '20'\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        label: 'Above Ground Pool',\r\n        priceChange: 'decrease',\r\n        amount: '5'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default class FormCreator extends Component {\r\n  state = {\r\n    form: []\r\n  };\r\n\r\n  editPictureField(itemId, label, itemData) {\r\n    const formState = this.state.form;\r\n    let foundIndex = formState.findIndex(e => e.id == itemId);\r\n\r\n    formState[foundIndex].label = label;\r\n    formState[foundIndex].items = itemData;\r\n\r\n    //console.log(formState);\r\n\r\n    this.setState({ form: formState });\r\n\r\n    console.log(this.state.form);\r\n  }\r\n\r\n  editItem(itemId, label, placeholder) {\r\n    const formState = this.state.form;\r\n\r\n    let foundIndex = formState.findIndex(e => e.id == itemId);\r\n\r\n    formState[foundIndex].label = label;\r\n    formState[foundIndex].placeholder = placeholder;\r\n\r\n    // Never saved to state?\r\n  }\r\n\r\n  deletePictureOption(itemId, optionId) {\r\n    let formState = this.state.form.slice();\r\n\r\n    let foundIndex = formState.findIndex(e => e.id == itemId);\r\n\r\n    let updatedOptions = formState[foundIndex].items.filter(obj => {\r\n      return obj.id !== `${optionId}`;\r\n    });\r\n\r\n    //console.log(updatedOptions);\r\n\r\n    formState[foundIndex].items = updatedOptions;\r\n\r\n    this.setState({ form: formState });\r\n\r\n    console.log(this.state.form);\r\n\r\n    // console.log(formState);\r\n  }\r\n\r\n  deleteItem(item) {\r\n    const formState = this.state.form;\r\n\r\n    let updatedForm = formState.filter(obj => {\r\n      return obj.id !== `${item}`;\r\n    });\r\n\r\n    this.setState({ form: updatedForm });\r\n  }\r\n\r\n  onDragEnd = result => {\r\n    const { source, destination } = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    switch (source.droppableId) {\r\n      case destination.droppableId:\r\n        this.setState({\r\n          [destination.droppableId]: reorder(\r\n            this.state[source.droppableId],\r\n            source.index,\r\n            destination.index\r\n          )\r\n        });\r\n        break;\r\n      case 'ITEMS':\r\n        this.setState({\r\n          [destination.droppableId]: copy(\r\n            ITEMS,\r\n            this.state[destination.droppableId],\r\n            source,\r\n            destination\r\n          )\r\n        });\r\n        break;\r\n      default:\r\n        this.setState(\r\n          move(\r\n            this.state[source.droppableId],\r\n            this.state[destination.droppableId],\r\n            source,\r\n            destination\r\n          )\r\n        );\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    // console.log(this.state.form);\r\n    return (\r\n      <Fragment>\r\n        <FormSettingsController />\r\n        <DragDropContext onDragEnd={this.onDragEnd}>\r\n          <Droppable droppableId='ITEMS' isDropDisabled={true}>\r\n            {(provided, snapshot) => (\r\n              <Kiosk\r\n                ref={provided.innerRef}\r\n                isDraggingOver={snapshot.isDraggingOver}\r\n                className='builder__sidebar'\r\n              >\r\n                <h3 className='text-center text-white'>Control Panel</h3>\r\n                {ITEMS.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <React.Fragment>\r\n                        <Item\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          isDragging={snapshot.isDragging}\r\n                          style={provided.draggableProps.style}\r\n                          className='text-center creator__block'\r\n                        >\r\n                          <div className='width-100'>\r\n                            <i className={`fas ${item.icon}`}></i>\r\n                            <h4 className='text-white fweight-normal'>\r\n                              {item.content}\r\n                            </h4>\r\n                          </div>\r\n                        </Item>\r\n                        {snapshot.isDragging && (\r\n                          <Clone>\r\n                            {' '}\r\n                            <div className='width-100 text-center creator__block'>\r\n                              <i className={`fas ${item.icon}`}></i>\r\n                              <h4 className='text-white fweight-normal'>\r\n                                {item.content}\r\n                              </h4>\r\n                            </div>\r\n                          </Clone>\r\n                        )}\r\n                      </React.Fragment>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n\r\n                {provided.placeholder}\r\n              </Kiosk>\r\n            )}\r\n          </Droppable>\r\n          <Content>\r\n            {Object.keys(this.state).map((list, i) => (\r\n              <Droppable key={list} droppableId={list}>\r\n                {(provided, snapshot) => (\r\n                  <Container\r\n                    ref={provided.innerRef}\r\n                    isDraggingOver={snapshot.isDraggingOver}\r\n                  >\r\n                    <div className='text-center'>\r\n                      <i className='fas fa-plus-square'></i>\r\n                      <p>\r\n                        Drag and drop a item from the control panel to get\r\n                        started.\r\n                      </p>\r\n                    </div>\r\n\r\n                    {this.state[list].length\r\n                      ? this.state[list].map((item, index) => (\r\n                          <Draggable\r\n                            key={item.id}\r\n                            draggableId={item.id}\r\n                            index={index}\r\n                          >\r\n                            {(provided, snapshot) => (\r\n                              <Item\r\n                                ref={provided.innerRef}\r\n                                {...provided.draggableProps}\r\n                                isDragging={snapshot.isDragging}\r\n                                style={provided.draggableProps.style}\r\n                              >\r\n                                <Handle {...provided.dragHandleProps}>\r\n                                  <svg\r\n                                    width='24'\r\n                                    height='24'\r\n                                    viewBox='0 0 24 24'\r\n                                  >\r\n                                    <path\r\n                                      fill='currentColor'\r\n                                      d='M3,15H21V13H3V15M3,19H21V17H3V19M3,11H21V9H3V11M3,5V7H21V5H3Z'\r\n                                    />\r\n                                  </svg>\r\n                                </Handle>\r\n                                <FormItemController\r\n                                  item={item}\r\n                                  deleteItem={this.deleteItem.bind(this)}\r\n                                  editItem={this.editItem.bind(this)}\r\n                                  editPictureField={this.editPictureField.bind(\r\n                                    this\r\n                                  )}\r\n                                  deletePictureOption={this.deletePictureOption.bind(\r\n                                    this\r\n                                  )}\r\n                                />\r\n                                {/* {item.content}\r\n                              \r\n                              <div className='mgn-left-30'>\r\n                                <Button size='sm' color='info'>\r\n                                  Edit\r\n                                </Button>\r\n                                <Button\r\n                                  size='sm'\r\n                                  color='warning'\r\n                                  onClick={e => this.deleteItem(item.id)}\r\n                                >\r\n                                  Delete\r\n                                </Button>\r\n                              </div> */}\r\n                              </Item>\r\n                            )}\r\n                          </Draggable>\r\n                        ))\r\n                      : !provided.placeholder && (\r\n                          <Notice>Drop items here</Notice>\r\n                        )}\r\n                    {provided.placeholder}\r\n                  </Container>\r\n                )}\r\n              </Droppable>\r\n            ))}\r\n          </Content>\r\n        </DragDropContext>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// export default FormCreator;\r\n",["381","382"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\customer.js",["383"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Alert.js",["384","385"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Routing.js",["386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410"],"import React, { Fragment, useState, useEffect, useRef } from 'react';\r\n\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n  DirectionsRenderer,\r\n  DirectionsService,\r\n  Polyline\r\n} from '@react-google-maps/api';\r\n\r\nimport MapDirectionsRenderer from './MapDirectionsRenderer';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getEmployeeCustomers } from '../../actions/employee';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport Footer from '../Layout/Footer';\r\nimport RouteBuilder from '../Layout/RouteBuilder';\r\n\r\nimport { Container } from 'reactstrap';\r\n\r\n// import { Map, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport RoutingMachine from '../../utils/RoutingMachine';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-routing-machine/dist/leaflet-routing-machine';\r\nimport 'leaflet-routing-machine/dist/leaflet-routing-machine.css';\r\nimport 'leaflet-routing-machine/dist/leaflet.routing.icons.png';\r\n\r\nimport LeafletMap from '../Layout/LeafletMap';\r\n\r\nlet key = 'AIzaSyBPTZtirCX7Ar2bIandK2EZzj10V2bBUag';\r\n\r\nconst markerIcon = new L.Icon({\r\n  iconUrl:\r\n    'https://cdn0.iconfinder.com/data/icons/small-n-flat/24/678111-map-marker-512.png',\r\n  iconSize: [35, 45],\r\n  iconAnchor: [17, 46],\r\n  popupAnchor: [0, -46],\r\n  html: '5'\r\n});\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '400px'\r\n};\r\n\r\nconst locations = [\r\n  {\r\n    id: 4,\r\n    info: 'Greg Bryson',\r\n    lat: 34.238134,\r\n    lng: -84.072205\r\n  },\r\n\r\n  {\r\n    id: 3,\r\n    info: 'Lee Wood',\r\n    lat: 34.224666,\r\n    lng: -84.077647\r\n  },\r\n  {\r\n    id: 5,\r\n    info: 'Sam Siemon',\r\n    lat: 34.235536,\r\n    lng: -84.072864\r\n  },\r\n  {\r\n    id: 2,\r\n    info: 'Scott Harris',\r\n    lat: 34.189243,\r\n    lng: -84.069363\r\n  }\r\n];\r\n\r\nconst Routing = ({\r\n  mapRedux: { legs, loading },\r\n  customers: { customers },\r\n  getEmployeeCustomers\r\n}) => {\r\n  const [map, setMap] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    // getEmployeeCustomers('6011ff1582278974ac42fe88');\r\n  }, [getEmployeeCustomers]);\r\n\r\n  const [mapState, setMapState] = useState({\r\n    showingInfoWindow: false,\r\n    selectedMarker: null\r\n  });\r\n\r\n  const onMarkerClick = id => {\r\n    setMapState({\r\n      showingInfoWindow: true,\r\n      selectedMarker: id\r\n    });\r\n  };\r\n\r\n  const onInfoWindowClose = () => {\r\n    setMapState({\r\n      showingInfoWindow: false,\r\n      selectedMarker: null\r\n    });\r\n  };\r\n\r\n  const onLoad = React.useCallback(function callback(map) {\r\n    const bounds = new window.google.maps.LatLngBounds();\r\n    map.fitBounds(bounds);\r\n    setMap(map);\r\n  }, []);\r\n\r\n  const onUnmount = React.useCallback(function callback(map) {\r\n    setMap(null);\r\n  }, []);\r\n  let totalDistance = 0;\r\n  let totalDuration = 0;\r\n  let METERS_TO_MILES = 0.000621371192;\r\n\r\n  const calculateTotalDistance = () => {\r\n    for (var i = 0; i < legs.length; ++i) {\r\n      totalDistance += legs[i].distance.value;\r\n      totalDuration += legs[i].duration.value;\r\n    }\r\n\r\n    totalDistance = Math.round(totalDistance * METERS_TO_MILES * 10) / 10;\r\n    totalDuration = Math.round(totalDuration / 60);\r\n\r\n    // setTotals({\r\n    //   totalDistance,\r\n    //   totalDuration\r\n    // });\r\n  };\r\n\r\n  calculateTotalDistance();\r\n\r\n  // console.log(totalDuration, totalDistance);\r\n\r\n  const [centerPoint, setCenterPoint] = useState({\r\n    lat: 34.2313319,\r\n    lng: -84.1105079\r\n  });\r\n  const ZOOM_LEVEL = 13;\r\n  const mapRef = useRef();\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='routing' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/'>\r\n                          <i className='fas fa-home' />\r\n                        </a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/dashboard'>Dashboard</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <a href='/users'>Routing</a>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container>\r\n          <h1>Google Maps Route</h1>\r\n\r\n          {totalDistance && <h2>Total Distance: {totalDistance} miles</h2>}\r\n          {totalDuration && <h3>Total Duration: {totalDuration} minutes</h3>}\r\n\r\n          <h1>Route Builder</h1>\r\n          <RouteBuilder />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nRouting.propTypes = {\r\n  getEmployeeCustomers: PropTypes.func.isRequired,\r\n  mapRedux: PropTypes.object.isRequired,\r\n  customers: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  mapRedux: state.map,\r\n  customers: state.customer\r\n});\r\n\r\nexport default connect(mapStateToProps, { getEmployeeCustomers })(Routing);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\CleanerManager..js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\customer.js",["411"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Customers.js",["412","413","414"],"import React, { Fragment, useEffect } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getCustomers, resetCustomerLoading } from '../../actions/customer';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownMenu\r\n} from 'reactstrap';\r\n\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport\r\n} from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nconst { SearchBar } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst pagination = paginationFactory({\r\n  page: 1,\r\n  alwaysShowAllBtns: true,\r\n  showTotal: true,\r\n  withFirstAndLast: false,\r\n  sizePerPageRenderer: ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <div className='dataTables_length' id='datatable-basic_length'>\r\n      <select\r\n        name='datatable-basic_length'\r\n        aria-controls='datatable-basic'\r\n        className='form-control form-control-sm'\r\n        style={{ width: '30%' }}\r\n        onChange={e => onSizePerPageChange(e.target.value)}\r\n      >\r\n        <option value='10'>10</option>\r\n        <option value='25'>25</option>\r\n        <option value='50'>50</option>\r\n        <option value='100'>100</option>\r\n      </select>\r\n    </div>\r\n  )\r\n});\r\n\r\nconst typeFormatter = cell => {\r\n  if (cell === 'Residential') {\r\n    return (\r\n      <span>\r\n        <i className='ni ni-shop text-primary'></i> {cell}\r\n      </span>\r\n    );\r\n  } else if (cell === 'Commercial') {\r\n    return (\r\n      <span>\r\n        <i className='ni ni-building text-red'></i> {cell}\r\n      </span>\r\n    );\r\n  } else {\r\n    return <span>N/A</span>;\r\n  }\r\n};\r\n\r\nconst actionFormatter = cell => {\r\n  return (\r\n    <UncontrolledDropdown>\r\n      <DropdownToggle\r\n        className='btn-icon-only text-light'\r\n        color=''\r\n        role='button'\r\n        size='sm'\r\n      >\r\n        <i className='fas fa-ellipsis-v' />\r\n      </DropdownToggle>\r\n      <DropdownMenu className='dropdown-menu-arrow' right>\r\n        <DropdownItem tag={Link} to={`/customers/${cell}`}>\r\n          View\r\n        </DropdownItem>\r\n        <DropdownItem tag={Link} to={`/customers/${cell}/edit`}>\r\n          Edit\r\n        </DropdownItem>\r\n        <DropdownItem tag={Link} to={`/customers/${cell}/inactive`}>\r\n          Mark Inactive\r\n        </DropdownItem>\r\n      </DropdownMenu>\r\n    </UncontrolledDropdown>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    dataField: 'firstName',\r\n    text: 'First Name'\r\n  },\r\n  {\r\n    dataField: 'lastName',\r\n    text: 'Last Name'\r\n  },\r\n  {\r\n    dataField: 'poolType',\r\n    text: 'Type',\r\n    formatter: typeFormatter\r\n  },\r\n  {\r\n    dataField: 'serviceAddress',\r\n    text: 'Property'\r\n  },\r\n  {\r\n    dataField: 'email',\r\n    text: 'Email'\r\n  },\r\n  {\r\n    dataField: '_id',\r\n    text: 'Actions',\r\n    formatter: actionFormatter\r\n  }\r\n];\r\n\r\nconst Customers = ({\r\n  getCustomers,\r\n  resetCustomerLoading,\r\n  customers: { customers, loading }\r\n}) => {\r\n  useEffect(() => {\r\n    getCustomers();\r\n  }, [getCustomers]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='customers' />\r\n      <div className='main-content of-hidden' id='panel'>\r\n        <Dashnav />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/'>\r\n                          <i className='fas fa-home' />\r\n                        </a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/dashboard'>Dashboard</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <a href='/dashboard'>Customers</a>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n                <div className='col-lg-6 col-5 text-right'>\r\n                  <a href='#' className='btn btn-sm btn-neutral'>\r\n                    New\r\n                  </a>\r\n                  <a href='#' className='btn btn-sm btn-neutral'>\r\n                    Filters\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Row className='mgn-ng-top-60'>\r\n          <Container fluid>\r\n            <div className='card'>\r\n              <div className='card-header'>\r\n                <h3 className='mb-0'>Customers</h3>{' '}\r\n                <Link\r\n                  color='primary'\r\n                  className='float-right mgn-ng-top-28 btn btn-primary'\r\n                  to='/customers/add'\r\n                >\r\n                  <span className='btn-inner--icon'>\r\n                    <i className='ni ni-fat-add' />\r\n                  </span>\r\n                  <span className='btn-inner--text'> Add Customer</span>\r\n                </Link>\r\n              </div>\r\n\r\n              {loading ? (\r\n                <Fragment>\r\n                  <div className='text-center'>\r\n                    <h4>Loading Data...</h4>\r\n                    <SpinnerCircular\r\n                      size={54}\r\n                      thickness={180}\r\n                      speed={100}\r\n                      color='rgba(57, 125, 172, 1)'\r\n                      secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                    />\r\n                  </div>\r\n                </Fragment>\r\n              ) : (\r\n                <ToolkitProvider\r\n                  data={customers}\r\n                  keyField='_id'\r\n                  columns={columns}\r\n                  search\r\n                  exportCSV\r\n                >\r\n                  {props => (\r\n                    <div\r\n                      className='py-4 table-responsive'\r\n                      style={{ padding: '25px' }}\r\n                    >\r\n                      <div id='datatable-basic_filter' className='px-4 pb-1'>\r\n                        <Row>\r\n                          <Col md='6'>\r\n                            <ExportCSVButton\r\n                              className='buttons-copy buttons-html5 btn-sm'\r\n                              {...props.csvProps}\r\n                            >\r\n                              <i className='ni ni-align-left-2'></i> Export CSV\r\n                            </ExportCSVButton>\r\n                          </Col>\r\n                          <Col md={{ size: 'auto', offset: 3 }}>\r\n                            <SearchBar\r\n                              className='form-control-sm'\r\n                              placeholder='Search Customers'\r\n                              {...props.searchProps}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n\r\n                      <BootstrapTable\r\n                        {...props.baseProps}\r\n                        bootstrap4={true}\r\n                        pagination={pagination}\r\n                        bordered={false}\r\n                        wrapperClasses='table-responsive mh-330'\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </ToolkitProvider>\r\n              )}\r\n            </div>\r\n          </Container>\r\n        </Row>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nCustomers.propTypes = {\r\n  getCustomers: PropTypes.func.isRequired,\r\n  resetCustomerLoading: PropTypes.func.isRequired,\r\n  customers: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  customers: state.customer\r\n});\r\n\r\nexport default connect(mapStateToProps, { getCustomers, resetCustomerLoading })(\r\n  Customers\r\n);\r\n",["415","416"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewCustomer.js",["417"],"import React, { Fragment, useState, useEffect, useRef } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Alert from '../Layout/Alert';\r\n\r\n// import Carousel from 'react-multi-carousel';\r\nimport Carousel from 'react-elastic-carousel';\r\nimport ModalImage from 'react-modal-image';\r\n\r\nimport Moment from 'react-moment';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n  getSingleCustomer,\r\n  addServiceNote,\r\n  getCustomerServiceNotes,\r\n  deleteServiceNote,\r\n  updateServiceNote,\r\n  addRecentActivity,\r\n  getRecentActivity,\r\n  deleteRecentActivity,\r\n  getChecklist,\r\n  updateBilling\r\n} from '../../actions/customer';\r\n\r\nimport { SpinnerCircular } from 'spinners-react';\r\nimport ImageUploader from 'react-images-upload';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  Badge\r\n} from 'reactstrap';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\n\r\nimport EditServiceNoteModal from '../Layout/EditServiceNoteModal';\r\n\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\n\r\nconst ViewCustomer = ({\r\n  getSingleCustomer,\r\n  addServiceNote,\r\n  getCustomerServiceNotes,\r\n  deleteServiceNote,\r\n  updateServiceNote,\r\n  addRecentActivity,\r\n  getRecentActivity,\r\n  deleteRecentActivity,\r\n  getChecklist,\r\n  updateBilling,\r\n  customer: { customer, singleLoading },\r\n  serviceNotes,\r\n  recentActivity,\r\n  serviceChecklist,\r\n  match\r\n}) => {\r\n  useEffect(() => {\r\n    getSingleCustomer(match.params.id);\r\n    getCustomerServiceNotes(match.params.id);\r\n    getRecentActivity(match.params.id);\r\n    getChecklist(match.params.id);\r\n  }, [\r\n    getSingleCustomer,\r\n    getCustomerServiceNotes,\r\n    getRecentActivity,\r\n    getChecklist,\r\n    match.params.id\r\n  ]);\r\n\r\n  const history = useHistory();\r\n  const billingRef = useRef();\r\n\r\n  const saveBilling = () => {\r\n    if (billingRef.current) {\r\n      billingRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const [serviceNoteModal, setServiceNoteModal] = useState(false);\r\n  const toggleServiceNoteModal = () => setServiceNoteModal(!serviceNoteModal);\r\n\r\n  const [activityModal, setActivityModal] = useState(false);\r\n  const toggleActivityModal = () => setActivityModal(!activityModal);\r\n\r\n  const [pictureState, setPictureState] = useState({ pictures: [] });\r\n\r\n  const [addImageModal, setAddImageModal] = useState(false);\r\n  const [loadingNewImages, setLoadingNewImages] = useState(false);\r\n\r\n  const toggleAddImageModal = () => setAddImageModal(!addImageModal);\r\n\r\n  const [loadingAddServiceNote, setLoadingAddServiceNote] = useState(false);\r\n\r\n  const [addActivityLoading, setAddActivityLoading] = useState(false);\r\n\r\n  const [editNoteModal, setEditNoteModal] = useState({\r\n    activeNote: '',\r\n    isOpen: false\r\n  });\r\n\r\n  const [editBillingModal, setEditBillingModal] = useState(false);\r\n  const [editBillingLoading, setEditBillingLoading] = useState(false);\r\n  const toggleBillingModal = () => {\r\n    setEditBillingModal(!editBillingModal);\r\n  };\r\n\r\n  const onDrop = picture => {\r\n    setPictureState({\r\n      pictures: picture\r\n    });\r\n  };\r\n\r\n  const uploadImages = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      };\r\n\r\n      let uploadPromises = pictureState.pictures.map(image => {\r\n        let data = new FormData();\r\n        data.append('image', image, image.name);\r\n        return axios.post(\r\n          `/api/customers/${match.params.id}/uploadImage`,\r\n          data,\r\n          config\r\n        );\r\n      });\r\n\r\n      await axios.all(uploadPromises);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const [deleteSure, setDeleteSure] = useState({\r\n    activeNote: null,\r\n    isOpen: false\r\n  });\r\n\r\n  const [deleteNoteLoading, setDeleteNoteLoading] = useState(false);\r\n\r\n  const deleteNoteModalToggle = noteId => {\r\n    setDeleteSure({\r\n      activeNote: noteId,\r\n      isOpen: true\r\n    });\r\n  };\r\n\r\n  const deleteNoteHandler = async noteId => {\r\n    setDeleteNoteLoading(true);\r\n    await deleteServiceNote(match.params.id, noteId);\r\n    setDeleteSure({\r\n      activeNote: noteId,\r\n      isOpen: false\r\n    });\r\n    getCustomerServiceNotes(match.params.id);\r\n    setDeleteNoteLoading(false);\r\n  };\r\n\r\n  const toggleNoteEditModal = noteId => {\r\n    setEditNoteModal({\r\n      activeNote: noteId,\r\n      isOpen: !editNoteModal.isOpen\r\n    });\r\n  };\r\n\r\n  const editNoteHandler = async (noteId, data) => {\r\n    await updateServiceNote(match.params.id, noteId, data);\r\n    getCustomerServiceNotes(match.params.id);\r\n  };\r\n\r\n  const [deleteActivity, setDeleteActivity] = useState({\r\n    active: null,\r\n    isOpen: false,\r\n    isLoading: false\r\n  });\r\n\r\n  const toggleActivityDeleteModal = noteId => {\r\n    setDeleteActivity({\r\n      active: noteId,\r\n      isOpen: !deleteActivity.isOpen,\r\n      isLoading: false\r\n    });\r\n  };\r\n\r\n  const recentActivityDeleteHandler = async noteId => {\r\n    setDeleteActivity({ ...deleteActivity, isLoading: true });\r\n    await deleteRecentActivity(match.params.id, noteId);\r\n    await getRecentActivity(match.params.id);\r\n    setDeleteActivity({ active: null, isLoading: false, isOpen: false });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='customers' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div\r\n          className='header pb-6 d-flex align-items-center'\r\n          style={{\r\n            minHeight: '500px',\r\n            backgroundImage:\r\n              'url(https://www.lathampool.com/wp-content/uploads/2020/01/bh-header.jpg)',\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center top'\r\n          }}\r\n        >\r\n          {/* Mask */}\r\n          <span className='mask bg-gradient-default opacity-8' />\r\n          {/* Header container */}\r\n          <div className='container-fluid d-flex align-items-center'>\r\n            <div className='row'>\r\n              <div className='col-md-12'>\r\n                {!customer || singleLoading ? (\r\n                  <Fragment>\r\n                    <div className='text-center'>\r\n                      <h4>Loading Data...</h4>\r\n                      <SpinnerCircular\r\n                        size={54}\r\n                        thickness={180}\r\n                        speed={100}\r\n                        color='rgba(57, 125, 172, 1)'\r\n                        secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                      />\r\n                    </div>\r\n                  </Fragment>\r\n                ) : (\r\n                  <Fragment>\r\n                    {!customer[0].serviceRate && !customer[0].servicePackage && (\r\n                      <Fragment>\r\n                        <Badge color='danger'>No Service Plan Assigned</Badge>{' '}\r\n                      </Fragment>\r\n                    )}\r\n                    {!customer[0].technician && (\r\n                      <Fragment>\r\n                        <Badge color='danger'>No Tech Assigned</Badge>{' '}\r\n                      </Fragment>\r\n                    )}\r\n                    <Badge color='success'>No Open Work Orders</Badge>{' '}\r\n                    <Badge color='secondary'>No Pending Expenses</Badge>{' '}\r\n                    <h1 className='display-2 text-white'>\r\n                      {customer[0].serviceAddress}\r\n                    </h1>\r\n                    <p className='text-white mt-0 mb-5'>\r\n                      <strong>\r\n                        {customer[0].poolType} Pool - Gate/Lock Code:{' '}\r\n                        {customer[0].gateCode}\r\n                      </strong>{' '}\r\n                      <br />\r\n                      <em>\r\n                        Last Serviced: Aug 01, 2020 <br /> Next Service: Aug 08,\r\n                        2020\r\n                      </em>\r\n                    </p>\r\n                  </Fragment>\r\n                )}\r\n\r\n                <Link\r\n                  to={`/customers/${match.params.id}/manage/info`}\r\n                  className='btn btn-neutral mb-4'\r\n                >\r\n                  Edit Customer Information\r\n                </Link>\r\n\r\n                {customer && customer[0] && (\r\n                  <a\r\n                    href={`mailto:${customer[0].email}`}\r\n                    className='btn btn-primary mb-4'\r\n                  >\r\n                    Email Customer\r\n                  </a>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60' fluid>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-4 d-none d-lg-inline'>\r\n                      <h3 className='mb-0'>Customer Information </h3>\r\n                    </div>\r\n                    <div className='col-8 d-lg-none'>\r\n                      <h3 className='mb-0'>Customer Information </h3>\r\n                    </div>\r\n                    <div className='col-8 text-right d-none d-lg-inline'>\r\n                      {/* <a href='#!' className='btn btn-success'>\r\n                        Start Service\r\n                      </a> */}\r\n                      <a href='#!' className='btn btn-primary'>\r\n                        Add Expense\r\n                      </a>\r\n                      <a href='#!' className='btn btn-success'>\r\n                        Add Work Order\r\n                      </a>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <UncontrolledDropdown>\r\n                        <DropdownToggle\r\n                          className='btn btn-primary d-lg-none'\r\n                          color=''\r\n                          role='button'\r\n                          size='sm'\r\n                        >\r\n                          <i className='fas fa-ellipsis-v' /> Actions\r\n                        </DropdownToggle>\r\n                        <DropdownMenu className='dropdown-menu-arrow' right>\r\n                          {/* <DropdownItem tag={Link} to='/'>\r\n                            Start Service\r\n                          </DropdownItem> */}\r\n                          <DropdownItem tag={Link} to='/'>\r\n                            Add Expense\r\n                          </DropdownItem>\r\n                          <DropdownItem tag={Link} to='/'>\r\n                            Add Work Order\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        Contact Information\r\n                      </h6>\r\n                      <Row>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>First name</div>\r\n                          <p>{customer[0].firstName}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Last name</div>\r\n                          <p>{customer[0].lastName}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Email</div>\r\n                          <p>{customer[0].email}</p>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Mobile phone</div>\r\n                          <p>{customer[0].mobilePhone}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Can text?</div>\r\n                          <p>{customer[0].canText}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Alt Phone</div>\r\n                          <p>N/A</p>\r\n                        </Col>\r\n                      </Row>\r\n                      <hr className='my-4' />\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        Service Information\r\n                      </h6>\r\n                      <Row>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>\r\n                            Service Address\r\n                          </div>\r\n                          <p>\r\n                            {customer[0].serviceAddress},{' '}\r\n                            {customer[0].serviceCity},{' '}\r\n                            {customer[0].serviceState} {customer[0].serviceZip}\r\n                          </p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>\r\n                            Service Frequency\r\n                          </div>\r\n                          <p>{customer[0].frequency}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Service Day</div>\r\n                          <p>{customer[0].scheduledDay}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Route Status</div>\r\n                          <p>\r\n                            {customer[0].isScheduled ? (\r\n                              <span>Routed</span>\r\n                            ) : (\r\n                              <span>Not Routed</span>\r\n                            )}\r\n                          </p>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Service Type</div>\r\n                          <p>{customer[0].poolType}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Technician</div>\r\n                          <Link to={`/users/${customer[0].technician}/view`}>\r\n                            {customer[0].technicianName}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Rate/Package</div>\r\n                          {customer[0].serviceRate ? (\r\n                            <p>{customer[0].servicePackageAndRate}</p>\r\n                          ) : (\r\n                            <p className='color-red'>\r\n                              <strong>\r\n                                <em>None Assigned</em>\r\n                              </strong>\r\n                            </p>\r\n                          )}\r\n                        </Col>\r\n                        <Col>\r\n                          <div className='form-control-label'>\r\n                            Gate/Lock Code:\r\n                          </div>\r\n                          <p>{customer[0].gateCode}</p>\r\n                        </Col>\r\n                      </Row>\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-8'>\r\n                      <h3 className='mb-0'>Pool & Equipment Information </h3>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <Link\r\n                        to={`/customers/${match.params.id}/manage/equipment`}\r\n                        className='btn btn-primary btn-sm'\r\n                      >\r\n                        Edit Equipment\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      {Object.entries(customer[0].poolEquipment).length !==\r\n                        1 && (\r\n                        <Row>\r\n                          <Col sm='3'>\r\n                            <div className='form-control-label'>Pool Type</div>\r\n                            <p>{customer[0].poolEquipment.poolType}</p>\r\n                          </Col>\r\n                          <Col sm='3'>\r\n                            <div className='form-control-label'>\r\n                              Bodies of Water\r\n                            </div>\r\n                            <p>{customer[0].poolEquipment.bodiesOfWater}</p>\r\n                          </Col>\r\n                          <Col sm='3'>\r\n                            <div className='form-control-label'>Pump</div>\r\n                            <p>\r\n                              {customer[0].poolEquipment.pumpMake}{' '}\r\n                              {customer[0].poolEquipment.pumpModel}\r\n                            </p>\r\n                          </Col>\r\n                          <Col sm='3'>\r\n                            <div className='form-control-label'>Filter</div>\r\n                            <p>\r\n                              {' '}\r\n                              {customer[0].poolEquipment.filterMake}{' '}\r\n                              {customer[0].poolEquipment.filterModel}\r\n                            </p>\r\n                          </Col>\r\n                        </Row>\r\n                      )}\r\n                      <Row>\r\n                        {Object.entries(customer[0].poolEquipment).length !==\r\n                          1 && (\r\n                          <Fragment>\r\n                            <Col sm='3'>\r\n                              <div className='form-control-label'>\r\n                                Pool Cleaner\r\n                              </div>\r\n                              <p>\r\n                                {' '}\r\n                                {customer[0].poolEquipment.cleanerMake}{' '}\r\n                                {customer[0].poolEquipment.cleanerModel}\r\n                              </p>\r\n                            </Col>\r\n                            <Col sm='3'>\r\n                              <div className='form-control-label'>\r\n                                Pool Heater\r\n                              </div>\r\n                              <p>\r\n                                {' '}\r\n                                {customer[0].poolEquipment.heaterMake}{' '}\r\n                                {customer[0].poolEquipment.heaterModel}\r\n                              </p>\r\n                            </Col>\r\n                          </Fragment>\r\n                        )}\r\n\r\n                        {customer[0].poolEquipment.other && (\r\n                          <Fragment>\r\n                            {customer[0].poolEquipment.other.map(item => (\r\n                              <Col sm='3' key={item.category}>\r\n                                <div className='form-control-label'>\r\n                                  {item.category.replace('s', '')}\r\n                                </div>\r\n                                <p>\r\n                                  {item.make} {item.model}\r\n                                </p>\r\n                              </Col>\r\n                            ))}\r\n                          </Fragment>\r\n                        )}\r\n                      </Row>\r\n\r\n                      {Object.entries(customer[0].poolEquipment).length <=\r\n                        1 && (\r\n                        <div className='text-center'>\r\n                          <i className='fas fa-exclamation-circle'></i>\r\n                          <h4>No Equipment Information Found</h4>\r\n                        </div>\r\n                      )}\r\n\r\n                      <hr className='my-4' />\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        Equipment Images\r\n                      </h6>\r\n                      {customer[0].images.length >= 1 ? (\r\n                        <Fragment>\r\n                          <Row>\r\n                            <Carousel\r\n                              itemsToShow={4}\r\n                              itemPadding={[10, 10]}\r\n                              pagination={false}\r\n                              enableMouseSwipe={false}\r\n                            >\r\n                              {customer[0].images.map(image => (\r\n                                <ModalImage\r\n                                  key={image._id}\r\n                                  small={image.url}\r\n                                  large={image.url}\r\n                                  showRotate={true}\r\n                                  hideZoom={true}\r\n                                  className='modal-image-thumb'\r\n                                />\r\n                              ))}\r\n                            </Carousel>\r\n                          </Row>\r\n\r\n                          <Modal\r\n                            isOpen={addImageModal}\r\n                            toggle={toggleAddImageModal}\r\n                          >\r\n                            <ModalHeader toggle={toggleAddImageModal}>\r\n                              Upload Images\r\n                            </ModalHeader>\r\n                            <ModalBody>\r\n                              <ImageUploader\r\n                                withIcon={true}\r\n                                buttonText='Choose images'\r\n                                onChange={onDrop}\r\n                                imgExtension={['.jpg', '.gif', '.png', '.gif']}\r\n                                maxFileSize={5242880}\r\n                                withPreview={true}\r\n                              />\r\n                              <ModalFooter>\r\n                                <Button onClick={toggleAddImageModal}>\r\n                                  Cancel\r\n                                </Button>\r\n                                <Button\r\n                                  onClick={async () => {\r\n                                    setLoadingNewImages(true);\r\n                                    await uploadImages();\r\n                                    await getSingleCustomer(match.params.id);\r\n                                    setLoadingNewImages(false);\r\n                                    toggleAddImageModal();\r\n                                    setPictureState({ pictures: [] });\r\n                                  }}\r\n                                  color='success'\r\n                                >\r\n                                  {loadingNewImages ? (\r\n                                    <span>Loading...</span>\r\n                                  ) : (\r\n                                    <span>Upload Image(s)</span>\r\n                                  )}\r\n                                </Button>\r\n                              </ModalFooter>\r\n                            </ModalBody>\r\n                          </Modal>\r\n\r\n                          <div className='text-center'>\r\n                            <Button\r\n                              size='sm'\r\n                              color='primary'\r\n                              onClick={toggleAddImageModal}\r\n                            >\r\n                              Add Image(s)\r\n                            </Button>\r\n                            <Button\r\n                              size='sm'\r\n                              color='danger'\r\n                              onClick={() => {\r\n                                history.push(\r\n                                  `/customers/${match.params.id}/deleteImage`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Delete Image(s)\r\n                            </Button>\r\n                          </div>\r\n                        </Fragment>\r\n                      ) : (\r\n                        <Fragment>\r\n                          <Modal\r\n                            isOpen={addImageModal}\r\n                            toggle={toggleAddImageModal}\r\n                          >\r\n                            <ModalHeader toggle={toggleAddImageModal}>\r\n                              Upload Images\r\n                            </ModalHeader>\r\n                            <ModalBody>\r\n                              <ImageUploader\r\n                                withIcon={true}\r\n                                buttonText='Choose images'\r\n                                onChange={onDrop}\r\n                                imgExtension={['.jpg', '.gif', '.png', '.gif']}\r\n                                maxFileSize={5242880}\r\n                                withPreview={true}\r\n                              />\r\n                              <ModalFooter>\r\n                                <Button onClick={toggleAddImageModal}>\r\n                                  Cancel\r\n                                </Button>\r\n                                <Button\r\n                                  onClick={async () => {\r\n                                    setLoadingNewImages(true);\r\n                                    await uploadImages();\r\n                                    await getSingleCustomer(match.params.id);\r\n                                    setLoadingNewImages(false);\r\n                                    toggleAddImageModal();\r\n                                    setPictureState({ pictures: [] });\r\n                                  }}\r\n                                  color='success'\r\n                                >\r\n                                  {loadingNewImages ? (\r\n                                    <span>Loading...</span>\r\n                                  ) : (\r\n                                    <span>Upload Image(s)</span>\r\n                                  )}\r\n                                </Button>\r\n                              </ModalFooter>\r\n                            </ModalBody>\r\n                          </Modal>\r\n\r\n                          <div className='text-center'>\r\n                            <h3>No Images Found</h3>\r\n                            <Button\r\n                              size='sm'\r\n                              color='primary'\r\n                              onClick={toggleAddImageModal}\r\n                            >\r\n                              Upload Image(s)\r\n                            </Button>\r\n                          </div>\r\n                        </Fragment>\r\n                      )}\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Modal isOpen={activityModal} toggle={toggleActivityModal}>\r\n            <ModalHeader toggle={toggleActivityModal}>\r\n              Log Recent Activity\r\n            </ModalHeader>\r\n\r\n            <Formik\r\n              initialValues={{\r\n                log: 'Phone Call',\r\n                type: '',\r\n                comments: ''\r\n              }}\r\n              onSubmit={async data => {\r\n                setAddActivityLoading(true);\r\n                await addRecentActivity(match.params.id, data);\r\n                await getRecentActivity(match.params.id);\r\n                setAddActivityLoading(false);\r\n                toggleActivityModal();\r\n              }}\r\n              render={({\r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                errors,\r\n                touched\r\n              }) => (\r\n                <Fragment>\r\n                  <ModalBody>\r\n                    <Form onSubmit={handleSubmit}>\r\n                      <FormGroup>\r\n                        <Label for='log'>What do you want to log?</Label>\r\n                        <Input\r\n                          type='select'\r\n                          name='log'\r\n                          onChange={handleChange}\r\n                          value={values.log}\r\n                        >\r\n                          <option>Phone Call</option>\r\n                          <option>Email</option>\r\n                          <option>Other</option>\r\n                        </Input>\r\n                      </FormGroup>\r\n                      {(values.log === 'Phone Call' ||\r\n                        values.log === 'Email') && (\r\n                        <Fragment>\r\n                          <FormGroup>\r\n                            {values.log === 'Phone Call' ? (\r\n                              <Label>Type Of Call?</Label>\r\n                            ) : (\r\n                              <Label>Type Of Email?</Label>\r\n                            )}\r\n                            <Input\r\n                              type='select'\r\n                              name='type'\r\n                              onChange={handleChange}\r\n                              value={values.type}\r\n                            >\r\n                              <option value='' disabled>\r\n                                Choose One\r\n                              </option>\r\n                              <option value='Outgoing'>Outgoing</option>\r\n                              <option value='Incoming'>Incoming</option>\r\n                            </Input>\r\n                          </FormGroup>\r\n                        </Fragment>\r\n                      )}\r\n                      <FormGroup>\r\n                        <Label for='comments'>Comments:</Label>\r\n                        <Input\r\n                          type='textarea'\r\n                          name='comments'\r\n                          onChange={handleChange}\r\n                          value={values.comments}\r\n                          placeholder='Message...'\r\n                        />\r\n                      </FormGroup>\r\n                    </Form>\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button\r\n                      color='success'\r\n                      type='submit'\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      {addActivityLoading ? (\r\n                        <span>\r\n                          <SpinnerCircular\r\n                            size={24}\r\n                            thickness={180}\r\n                            speed={100}\r\n                            color='rgba(57, 125, 172, 1)'\r\n                            secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                          />{' '}\r\n                          Processing...\r\n                        </span>\r\n                      ) : (\r\n                        <span>Log Activity</span>\r\n                      )}\r\n                    </Button>{' '}\r\n                    <Button color='secondary'>Cancel</Button>\r\n                  </ModalFooter>\r\n                </Fragment>\r\n              )}\r\n            />\r\n          </Modal>\r\n\r\n          <Row>\r\n            <Col lg='6'>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-8'>\r\n                      <h3 className='mb-0 float-left'>Recent Activity </h3>\r\n                      <Badge className='float-left mgn-left-8' color='primary'>\r\n                        {recentActivity.length} Item(s)\r\n                      </Badge>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <Button\r\n                        size='sm'\r\n                        color='primary'\r\n                        onClick={toggleActivityModal}\r\n                      >\r\n                        Add Activity\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      {recentActivity.length < 1 ? (\r\n                        <div className='text-center'>No Activity Found...</div>\r\n                      ) : (\r\n                        <Fragment>\r\n                          {recentActivity.map(item => (\r\n                            <Fragment key={item._id}>\r\n                              <Row className='mb-4'>\r\n                                <Col xs={{ size: 'auto' }}>\r\n                                  <i\r\n                                    className={`fas fa-${\r\n                                      item.icon\r\n                                    } fa-2x color-${\r\n                                      item.log === 'Phone Call'\r\n                                        ? 'green'\r\n                                        : item.log === 'Email'\r\n                                        ? 'yellow'\r\n                                        : item.log === 'Service'\r\n                                        ? 'purple'\r\n                                        : 'primary'\r\n                                    }`}\r\n                                  ></i>\r\n                                </Col>\r\n                                <Col xs={{ size: 'auto' }}>\r\n                                  <h3>\r\n                                    {item.type} {item.log}{' '}\r\n                                    {item.type === 'Incoming' ? (\r\n                                      <span>from</span>\r\n                                    ) : (\r\n                                      <span>to</span>\r\n                                    )}{' '}\r\n                                    {customer[0].firstName}{' '}\r\n                                    {customer[0].lastName}\r\n                                  </h3>\r\n                                  <p>{item.comments}</p>\r\n                                  <small>\r\n                                    <Moment format='ddd, MMM DD, YYYY | LT'>\r\n                                      {item.dateAdded}\r\n                                    </Moment>\r\n                                  </small>{' '}\r\n                                  <Button size='sm' color='primary'>\r\n                                    Edit\r\n                                  </Button>\r\n                                  <Button\r\n                                    size='sm'\r\n                                    color='warning'\r\n                                    onClick={() =>\r\n                                      toggleActivityDeleteModal(item._id)\r\n                                    }\r\n                                  >\r\n                                    Delete\r\n                                  </Button>\r\n                                </Col>\r\n                              </Row>\r\n\r\n                              <Modal\r\n                                isOpen={deleteActivity.isOpen}\r\n                                toggle={() =>\r\n                                  setDeleteActivity({ isOpen: false })\r\n                                }\r\n                              >\r\n                                <ModalHeader\r\n                                  toggle={() =>\r\n                                    setDeleteActivity({ isOpen: false })\r\n                                  }\r\n                                >\r\n                                  Delete Service Note?\r\n                                </ModalHeader>\r\n                                <ModalBody>\r\n                                  Are you sure you want to delete this activity?\r\n                                  This action cannot be undone.\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                  <Button\r\n                                    onClick={() =>\r\n                                      setDeleteActivity({ isOpen: false })\r\n                                    }\r\n                                  >\r\n                                    Cancel\r\n                                  </Button>\r\n                                  <Button\r\n                                    color='danger'\r\n                                    onClick={() =>\r\n                                      recentActivityDeleteHandler(\r\n                                        deleteActivity.active\r\n                                      )\r\n                                    }\r\n                                  >\r\n                                    {deleteActivity.isLoading ? (\r\n                                      <span>\r\n                                        <SpinnerCircular\r\n                                          size={24}\r\n                                          thickness={180}\r\n                                          speed={100}\r\n                                          color='rgba(57, 125, 172, 1)'\r\n                                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                        />{' '}\r\n                                        Processing...\r\n                                      </span>\r\n                                    ) : (\r\n                                      <span>Delete Activity</span>\r\n                                    )}\r\n                                  </Button>\r\n                                </ModalFooter>\r\n                              </Modal>\r\n                            </Fragment>\r\n                          ))}\r\n                        </Fragment>\r\n                      )}\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Modal isOpen={serviceNoteModal} toggle={toggleServiceNoteModal}>\r\n              <ModalHeader toggle={toggleServiceNoteModal}>\r\n                Add a Service Note\r\n              </ModalHeader>\r\n\r\n              <Formik\r\n                initialValues={{\r\n                  customerId: match.params.id,\r\n                  content: '',\r\n                  showDuringVisit: false\r\n                }}\r\n                onSubmit={async data => {\r\n                  setLoadingAddServiceNote(true);\r\n                  await addServiceNote(data);\r\n                  await getCustomerServiceNotes(match.params.id);\r\n                  toggleServiceNoteModal();\r\n                  setLoadingAddServiceNote(false);\r\n                }}\r\n                render={({\r\n                  handleSubmit,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  values,\r\n                  errors,\r\n                  touched\r\n                }) => (\r\n                  <Fragment>\r\n                    <ModalBody>\r\n                      <Form>\r\n                        <Row>\r\n                          <Col lg='12'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='content'\r\n                                className='form-control-label'\r\n                              >\r\n                                Note Content\r\n                              </Label>\r\n                              <Input\r\n                                type='textarea'\r\n                                name='content'\r\n                                placeholder='Some note here...'\r\n                                value={values.content}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.content && touched.content && (\r\n                                <p className='color-red'>{errors.content}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col lg='12'>\r\n                            <FormGroup>\r\n                              <span>Show to Technician During Visit?</span>\r\n                              <br />\r\n                              <small>\r\n                                This will make note display to technician during\r\n                                each service visit.\r\n                              </small>\r\n                              <br />\r\n                              <br />\r\n                              <Label className='custom-toggle'>\r\n                                <Input\r\n                                  type='checkbox'\r\n                                  name='showDuringVisit'\r\n                                  onChange={handleChange}\r\n                                  value={values.showDuringVisit}\r\n                                />\r\n                                <span\r\n                                  className='custom-toggle-slider rounded-circle'\r\n                                  data-label-off='No'\r\n                                  data-label-on='Yes'\r\n                                ></span>\r\n                              </Label>\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                      </Form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                      <Button\r\n                        color='secondary'\r\n                        onClick={toggleServiceNoteModal}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                      <Button\r\n                        color='success'\r\n                        type='submit'\r\n                        onClick={handleSubmit}\r\n                      >\r\n                        {loadingAddServiceNote ? (\r\n                          <span>\r\n                            <span>\r\n                              <SpinnerCircular\r\n                                size={24}\r\n                                thickness={180}\r\n                                speed={100}\r\n                                color='rgba(57, 125, 172, 1)'\r\n                                secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                              />{' '}\r\n                              Processing...\r\n                            </span>\r\n                          </span>\r\n                        ) : (\r\n                          <span>Save Note</span>\r\n                        )}\r\n                      </Button>{' '}\r\n                    </ModalFooter>\r\n                  </Fragment>\r\n                )}\r\n              />\r\n            </Modal>\r\n            <Col lg='6'>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-8'>\r\n                      <h3 className='mb-0 float-left'>Service Notes </h3>\r\n                      <Badge className='float-left mgn-left-8' color='primary'>\r\n                        {serviceNotes.length} Item(s)\r\n                      </Badge>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <Button\r\n                        color='primary'\r\n                        size='sm'\r\n                        onClick={toggleServiceNoteModal}\r\n                      >\r\n                        Add Service Note\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      {!serviceNotes || serviceNotes.length < 1 ? (\r\n                        <div className='text-center'>\r\n                          <span>No Notes Found...</span>\r\n                        </div>\r\n                      ) : (\r\n                        <Fragment>\r\n                          {serviceNotes.map(note => (\r\n                            <Row key={note._id} className='mb-4'>\r\n                              <Col xs={{ size: '1' }}>\r\n                                <i className='fas fa-clipboard fa-2x color-orange'></i>\r\n                              </Col>\r\n                              <Col xs={{ size: '11' }}>\r\n                                <h3>You created a Service Note</h3>{' '}\r\n                                {note.showDuringVisit === true && (\r\n                                  <Badge color='success'>\r\n                                    Show Note During Visits\r\n                                  </Badge>\r\n                                )}\r\n                                <p>{note.content}</p>\r\n                                <small>\r\n                                  {note.lastUpdated ? (\r\n                                    <Fragment>\r\n                                      <span>Updated: </span>\r\n                                      <Moment format='ddd, MMM DD, YYYY | LT'>\r\n                                        {note.lastUpdated}\r\n                                      </Moment>\r\n                                    </Fragment>\r\n                                  ) : (\r\n                                    <Moment format='ddd, MMM DD, YYYY | LT'>\r\n                                      {note.dateAdded}\r\n                                    </Moment>\r\n                                  )}\r\n                                </small>{' '}\r\n                                <Button\r\n                                  size='sm'\r\n                                  color='primary'\r\n                                  onClick={() => toggleNoteEditModal(note._id)}\r\n                                >\r\n                                  Edit\r\n                                </Button>\r\n                                <Button\r\n                                  size='sm'\r\n                                  color='warning'\r\n                                  onClick={() =>\r\n                                    deleteNoteModalToggle(note._id)\r\n                                  }\r\n                                >\r\n                                  Delete\r\n                                </Button>\r\n                              </Col>\r\n                              <Modal\r\n                                isOpen={deleteSure.isOpen}\r\n                                toggle={() => setDeleteSure({ isOpen: false })}\r\n                              >\r\n                                <ModalHeader\r\n                                  toggle={() =>\r\n                                    setDeleteSure({ isOpen: false })\r\n                                  }\r\n                                >\r\n                                  Delete Service Note?\r\n                                </ModalHeader>\r\n                                <ModalBody>\r\n                                  Are you sure you want to delete this service\r\n                                  note? This action cannot be undone.\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                  <Button\r\n                                    onClick={() =>\r\n                                      setDeleteSure({ isOpen: false })\r\n                                    }\r\n                                  >\r\n                                    Cancel\r\n                                  </Button>\r\n                                  <Button\r\n                                    color='danger'\r\n                                    onClick={() =>\r\n                                      deleteNoteHandler(deleteSure.activeNote)\r\n                                    }\r\n                                  >\r\n                                    {deleteNoteLoading ? (\r\n                                      <span>\r\n                                        <SpinnerCircular\r\n                                          size={24}\r\n                                          thickness={180}\r\n                                          speed={100}\r\n                                          color='rgba(57, 125, 172, 1)'\r\n                                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                        />{' '}\r\n                                        Processing...\r\n                                      </span>\r\n                                    ) : (\r\n                                      <span>Delete Note</span>\r\n                                    )}\r\n                                  </Button>\r\n                                </ModalFooter>\r\n                              </Modal>\r\n                              <EditServiceNoteModal\r\n                                isOpen={editNoteModal.isOpen}\r\n                                toggle={toggleNoteEditModal}\r\n                                activeNote={editNoteModal.activeNote}\r\n                                noteId={note._id}\r\n                                noteContent={note.content}\r\n                                showDuringVisit={note.showDuringVisit}\r\n                                editFunction={editNoteHandler}\r\n                              />\r\n                            </Row>\r\n                          ))}\r\n                        </Fragment>\r\n                      )}\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md='7'>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-8'>\r\n                      <h3 className='mb-0'>Billing Details </h3>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <Button\r\n                        onClick={toggleBillingModal}\r\n                        color='primary'\r\n                        size='sm'\r\n                      >\r\n                        Edit Billing Details\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Row className='mb-4'>\r\n                      <Col sm='4'>\r\n                        <div className='form-control-label'>Billing Type</div>\r\n                        <p>{customer[0].billingType}</p>\r\n                      </Col>\r\n                      <Col sm='4'>\r\n                        <div className='form-control-label'>\r\n                          Billing Address\r\n                        </div>\r\n                        <p>\r\n                          {customer[0].billingSame ? (\r\n                            <span>Same as Service Address</span>\r\n                          ) : (\r\n                            <span>\r\n                              {customer[0].billingAddress},{' '}\r\n                              {customer[0].billingCity}{' '}\r\n                              {customer[0].billingState},{' '}\r\n                              {customer[0].billingZip}\r\n                            </span>\r\n                          )}\r\n                        </p>\r\n                      </Col>\r\n                      <Col sm='4'>\r\n                        <div className='form-control-label'>Payment Method</div>\r\n                        <p>{customer[0].paymentMethod}</p>\r\n                      </Col>\r\n                    </Row>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n              <Modal isOpen={editBillingModal} toggle={toggleBillingModal}>\r\n                <ModalHeader toggle={toggleBillingModal}>\r\n                  Edit Billing Details:\r\n                </ModalHeader>\r\n                {customer && !singleLoading && (\r\n                  <ModalBody>\r\n                    <Formik\r\n                      initialValues={{\r\n                        billingSame: customer[0].billingSame,\r\n                        billingType: customer[0].billingType,\r\n                        paymentMethod: customer[0].paymentMethod,\r\n                        billingAddress: customer[0].billingAddress,\r\n                        billingCity: customer[0].billingCity,\r\n                        billingState: customer[0].billingState,\r\n                        billingZip: customer[0].billingZip\r\n                      }}\r\n                      onSubmit={async data => {\r\n                        setEditBillingLoading(true);\r\n                        await updateBilling(match.params.id, data);\r\n                        await getSingleCustomer(match.params.id);\r\n                        setEditBillingLoading(false);\r\n                        toggleBillingModal();\r\n                      }}\r\n                      innerRef={billingRef}\r\n                      render={({\r\n                        handleSubmit,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        values,\r\n                        errors,\r\n                        touched\r\n                      }) => (\r\n                        <Container>\r\n                          <Form onSubmit={handleSubmit}>\r\n                            <FormGroup>\r\n                              <Input\r\n                                name='billingSame'\r\n                                type='checkbox'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.billingSame}\r\n                                checked={values.billingSame}\r\n                              />\r\n\r\n                              <Label\r\n                                for='billingSame'\r\n                                className='form-control-label'\r\n                              >\r\n                                Billing Address Same As Service Address?\r\n                              </Label>\r\n                            </FormGroup>\r\n                            {!values.billingSame && (\r\n                              <Fragment>\r\n                                <Row>\r\n                                  <Col lg='12'>\r\n                                    <FormGroup>\r\n                                      <Label\r\n                                        for='billingAddress'\r\n                                        className='form-control-label'\r\n                                      >\r\n                                        Billing Address\r\n                                      </Label>\r\n                                      <Input\r\n                                        name='billingAddress'\r\n                                        value={values.billingAddress}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        type='text'\r\n                                        placeholder='2070 Mercer Avenue'\r\n                                      />\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                  <Col lg='4'>\r\n                                    <FormGroup>\r\n                                      <Label\r\n                                        for='billingCity'\r\n                                        className='form-control-label'\r\n                                      >\r\n                                        Billing City\r\n                                      </Label>\r\n                                      <Input\r\n                                        name='billingCity'\r\n                                        value={values.billingCity}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        type='text'\r\n                                        placeholder='Beverly Hills'\r\n                                      />\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                  <Col lg='4'>\r\n                                    <FormGroup>\r\n                                      <Label\r\n                                        for='billingState'\r\n                                        className='form-control-label'\r\n                                      >\r\n                                        Billing State\r\n                                      </Label>\r\n                                      <Input\r\n                                        name='billingState'\r\n                                        value={values.billingState}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        type='text'\r\n                                        placeholder='CA'\r\n                                      />\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                  <Col lg='4'>\r\n                                    <FormGroup>\r\n                                      <Label\r\n                                        for='billingZip'\r\n                                        className='form-control-label'\r\n                                      >\r\n                                        Billing Zip\r\n                                      </Label>\r\n                                      <Input\r\n                                        name='billingZip'\r\n                                        value={values.billingZip}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        type='text'\r\n                                        placeholder='90210'\r\n                                      />\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </Row>\r\n                              </Fragment>\r\n                            )}\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='billingType'\r\n                                className='form-control-label'\r\n                              >\r\n                                Billing Type\r\n                              </Label>\r\n                              <Input\r\n                                type='select'\r\n                                name='billingType'\r\n                                value={values.billingType}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              >\r\n                                <option>N/A</option>\r\n                                <option>Autobilling</option>\r\n                                <option>Manual Billing</option>\r\n                              </Input>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='billingType'\r\n                                className='form-control-label'\r\n                              >\r\n                                Payment Method\r\n                              </Label>\r\n                              <Input\r\n                                type='select'\r\n                                name='paymentMethod'\r\n                                value={values.paymentMethod}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              >\r\n                                <option>PayPal</option>\r\n                                <option>Stripe</option>\r\n                                <option>Check</option>\r\n                                <option>Other</option>\r\n                              </Input>\r\n                            </FormGroup>\r\n                          </Form>\r\n                        </Container>\r\n                      )}\r\n                    />\r\n                  </ModalBody>\r\n                )}\r\n                <ModalFooter>\r\n                  <Button onClick={toggleBillingModal}>Cancel</Button>\r\n                  <Button onClick={saveBilling} color='success'>\r\n                    {editBillingLoading ? (\r\n                      <span>\r\n                        {' '}\r\n                        <SpinnerCircular\r\n                          size={24}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />{' '}\r\n                        Processing...\r\n                      </span>\r\n                    ) : (\r\n                      <span>Save Changes</span>\r\n                    )}\r\n                  </Button>\r\n                </ModalFooter>\r\n              </Modal>\r\n            </Col>\r\n            <Col md='5'>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-8'>\r\n                      <h3 className='mb-0'>Service Checklist </h3>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <Link\r\n                        to={`/customers/${match.params.id}/manage/serviceChecklist`}\r\n                        className='btn btn-sm btn-primary'\r\n                      >\r\n                        Edit Checklist\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      {serviceChecklist.length < 1 ? (\r\n                        <div className='text-center'>No Items Found...</div>\r\n                      ) : (\r\n                        <Fragment>\r\n                          {serviceChecklist.map(item => (\r\n                            <Row key={item._id}>\r\n                              <Col xs={{ size: '12' }}>\r\n                                <h3>\r\n                                  <i className='fas fa-chevron-right fa-1x color-green'></i>{' '}\r\n                                  {item.item}\r\n                                </h3>\r\n                              </Col>\r\n                            </Row>\r\n                          ))}\r\n                        </Fragment>\r\n                      )}\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nViewCustomer.propTypes = {\r\n  getSingleCustomer: PropTypes.func.isRequired,\r\n  getCustomerServiceNotes: PropTypes.func.isRequired,\r\n  addServiceNote: PropTypes.func.isRequired,\r\n  deleteServiceNote: PropTypes.func.isRequired,\r\n  updateServiceNote: PropTypes.func.isRequired,\r\n  addRecentActivity: PropTypes.func.isRequired,\r\n  getRecentActivity: PropTypes.func.isRequired,\r\n  deleteRecentActivity: PropTypes.func.isRequired,\r\n  getChecklist: PropTypes.func.isRequired,\r\n  updateBilling: PropTypes.func.isRequired,\r\n  customer: PropTypes.object.isRequired,\r\n  serviceNotes: PropTypes.array.isRequired,\r\n  recentActivity: PropTypes.array.isRequired,\r\n  serviceChecklist: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  customer: state.customer.singleCustomer,\r\n  serviceNotes: state.customer.serviceNotes,\r\n  recentActivity: state.customer.recentActivity,\r\n  serviceChecklist: state.customer.checklist\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSingleCustomer,\r\n  addServiceNote,\r\n  getCustomerServiceNotes,\r\n  deleteServiceNote,\r\n  updateServiceNote,\r\n  addRecentActivity,\r\n  getRecentActivity,\r\n  deleteRecentActivity,\r\n  getChecklist,\r\n  updateBilling\r\n})(ViewCustomer);\r\n",["418","419"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\map.js",["420"],"import { GET_ROUTE_LEGS } from '../actions/types';\r\n\r\nconst initialState = {\r\n  legs: [],\r\n  loading: true\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case GET_ROUTE_LEGS:\r\n      return {\r\n        ...state,\r\n        legs: payload,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\dashboard\\Dashboard.js",["421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\employee.js",["452"],"import { GET_EMPLOYEES, GET_SINGLE_EMPLOYEE } from '../actions/types';\r\n\r\nconst initialState = {\r\n  employees: [],\r\n  singleEmployee: [],\r\n  loading: true\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case GET_EMPLOYEES:\r\n      return {\r\n        ...state,\r\n        employees: payload,\r\n        loading: false\r\n      };\r\n    case GET_SINGLE_EMPLOYEE:\r\n      return {\r\n        ...state,\r\n        singleEmployee: payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\landing\\LandingContent.js",["453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\BookingForms.js",["470","471","472","473","474"],"import React, { Fragment, useEffect, useState } from 'react';\r\n\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Sidebar from '../dashboard/Sidebar';\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport\r\n} from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nimport {\r\n  Button,\r\n  Container,\r\n  Col,\r\n  Row,\r\n  CardBody,\r\n  Card,\r\n  CardTitle,\r\n  UncontrolledDropdown,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle\r\n} from 'reactstrap';\r\n\r\nconst pagination = paginationFactory({\r\n  page: 1,\r\n  alwaysShowAllBtns: true,\r\n  showTotal: false,\r\n  withFirstAndLast: false,\r\n  sizePerPageRenderer: ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <div className='dataTables_length' id='datatable-basic_length'>\r\n      <select\r\n        name='datatable-basic_length'\r\n        aria-controls='datatable-basic'\r\n        className='form-control form-control-sm'\r\n        style={{ width: '30%' }}\r\n        onChange={e => onSizePerPageChange(e.target.value)}\r\n      >\r\n        <option value='10'>10</option>\r\n        <option value='25'>25</option>\r\n        <option value='50'>50</option>\r\n        <option value='100'>100</option>\r\n      </select>\r\n    </div>\r\n  )\r\n});\r\n\r\nconst dataTable = [\r\n  {\r\n    id: 1,\r\n    name: 'Weekly Pool Maintenance (Riverside)',\r\n    url: 'https://example.com/booking/a123dfj38rnxiofn',\r\n    type: 'Residential',\r\n    created: 'Aug 01, 2020',\r\n    responses: '4'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Weekly Pool Maintenance (Bakersfield)',\r\n    url: 'https://example.com/booking/ahvrhi3r7347fhjd',\r\n    created: 'Aug 01, 2020',\r\n    responses: '12'\r\n  }\r\n];\r\n\r\nconst urlFormatter = cell => {\r\n  return (\r\n    <input\r\n      type='text'\r\n      className='form-control'\r\n      aria-label='Form Url'\r\n      value={cell}\r\n    />\r\n  );\r\n};\r\n\r\nconst actionFormatter = cell => {\r\n  return (\r\n    <UncontrolledDropdown>\r\n      <DropdownToggle\r\n        className='btn-icon-only text-light'\r\n        color=''\r\n        role='button'\r\n        size='sm'\r\n      >\r\n        <i className='fas fa-ellipsis-v' />\r\n      </DropdownToggle>\r\n      <DropdownMenu className='dropdown-menu-arrow' right>\r\n        <DropdownItem\r\n          href={`/booking-forms/${cell}`}\r\n          onClick={e => e.preventDefault()}\r\n        >\r\n          View\r\n        </DropdownItem>\r\n        <DropdownItem\r\n          href={`/booking-forms/edit/${cell}`}\r\n          onClick={e => e.preventDefault()}\r\n        >\r\n          Edit\r\n        </DropdownItem>\r\n        <DropdownItem\r\n          href={`/booking-forms/delete/${cell}`}\r\n          onClick={e => e.preventDefault()}\r\n        >\r\n          Delete\r\n        </DropdownItem>\r\n      </DropdownMenu>\r\n    </UncontrolledDropdown>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    dataField: 'name',\r\n    text: 'Form Name'\r\n  },\r\n  {\r\n    dataField: 'url',\r\n    text: 'Form URL',\r\n    formatter: urlFormatter\r\n  },\r\n  {\r\n    dataField: 'created',\r\n    text: 'Created On'\r\n  },\r\n  {\r\n    dataField: 'responses',\r\n    text: 'Responses'\r\n  },\r\n  {\r\n    dataField: 'id',\r\n    text: 'Actions',\r\n    formatter: actionFormatter\r\n  }\r\n];\r\n\r\nconst BookingForms = () => {\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='bookingforms' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/'>\r\n                          <i className='fas fa-home' />\r\n                        </a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/dashboard'>Dashboard</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <a href='/booking-forms'>Booking Forms</a>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col>\r\n              <Card className='mgn-top-50'>\r\n                <CardBody>\r\n                  <CardTitle>\r\n                    <div className='card-header bg-transparent'>\r\n                      <div className='row align-items-center'>\r\n                        <div className='col'>\r\n                          <h6 className='text-uppercase text-muted ls-1 mb-1'>\r\n                            Overview\r\n                          </h6>\r\n                          <h5 className='h3 mb-0'>Booking Forms</h5>\r\n                        </div>\r\n                        <span className='float-right'>\r\n                          <Button color='primary' href='/booking-forms/add'>\r\n                            <span class='btn-inner--icon'>\r\n                              <i class='ni ni-fat-add'></i>\r\n                            </span>\r\n                            <span class='btn-inner--text'> Add New Form</span>\r\n                          </Button>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </CardTitle>\r\n\r\n                  <div\r\n                    className='py-4 table-responsive'\r\n                    style={{ padding: '25px' }}\r\n                  >\r\n                    <div id='datatable-basic_filter' className='px-4 pb-1'>\r\n                      <BootstrapTable\r\n                        data={dataTable}\r\n                        keyField='property'\r\n                        columns={columns}\r\n                        bootstrap4={true}\r\n                        pagination={pagination}\r\n                        bordered={false}\r\n                        wrapperClasses='table-responsive'\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BookingForms;\r\n",["475","476"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\index.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Pricing.js",[],["477","478"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\dashboard\\Sidebar.js",["479","480","481","482"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewMyRoute.js",["483","484","485","486","487","488","489","490","491","492","493","494","495","496","497"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Button,\r\n  Badge,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Input,\r\n  Form,\r\n  Label,\r\n  FormGroup,\r\n  ListGroupItem,\r\n  ListGroup,\r\n  Card,\r\n  CardBody,\r\n  CardHeader\r\n} from 'reactstrap';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport Footer from '../Layout/Footer';\r\n\r\nconst ViewMyRoute = () => {\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='routing' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to='/view-my-route'>View My Route</Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Stuff Here */}\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              <h3 className='mb-0'>View My Route </h3>\r\n            </CardHeader>\r\n            <CardBody></CardBody>\r\n          </Card>\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ViewMyRoute;\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\RouteBuilder.js",["498","499","500","501","502","503","504","505"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport Footer from '../Layout/Footer';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n  DirectionsRenderer,\r\n  DirectionsService,\r\n  Polyline\r\n} from '@react-google-maps/api';\r\n\r\nimport MapDirectionsRenderer from './MapDirectionsRenderer';\r\n\r\nimport {\r\n  getEmployees,\r\n  getEmployeeCustomers,\r\n  getEmployeeRoute\r\n} from '../../actions/employee';\r\n\r\nimport {\r\n  setSchedule,\r\n  unschedule,\r\n  updateRouteOrder,\r\n  getCustomersRB,\r\n  optimizeRoute,\r\n  clearCustomers,\r\n  updateFrequency,\r\n  updateTech\r\n} from '../../actions/customer';\r\n\r\nimport {\r\n  Button,\r\n  Badge,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Input,\r\n  Form,\r\n  Label,\r\n  FormGroup,\r\n  ListGroupItem,\r\n  ListGroup,\r\n  Card,\r\n  CardBody,\r\n  CardHeader\r\n} from 'reactstrap';\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '400px'\r\n};\r\n\r\nconst RouteBuilder = ({\r\n  clearCustomers,\r\n  updateFrequency,\r\n  getEmployees,\r\n  getEmployeeCustomers,\r\n  setSchedule,\r\n  unschedule,\r\n  getEmployeeRoute,\r\n  updateRouteOrder,\r\n  getCustomersRB,\r\n  optimizeRoute,\r\n  updateTech,\r\n  mapRedux: { legs },\r\n  employees: { employees },\r\n  customers: { customers, loading, routeList, allCustomers }\r\n}) => {\r\n  useEffect(() => {\r\n    clearCustomers();\r\n    getEmployees();\r\n    getCustomersRB();\r\n  }, [clearCustomers, getEmployees, getCustomersRB]);\r\n\r\n  const [selectedTech, setSelectedTech] = useState(null);\r\n  const [dateSelected, setDateSelected] = useState('Monday');\r\n  const [customerRouteList, updateCustomerRouteList] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [map, setMap] = useState(null);\r\n  const [routedCustomers, updateRoutedCustomers] = useState(null);\r\n\r\n  const onTechChange = async e => {\r\n    setIsProcessing(true);\r\n    setSelectedTech(e.target.value);\r\n    await getEmployeeCustomers(e.target.value);\r\n    await getEmployeeRoute(e.target.value, dateSelected);\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const onChangeDay = async e => {\r\n    setIsProcessing(true);\r\n    setDateSelected(e.target.value);\r\n    await getEmployeeRoute(selectedTech, e.target.value);\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const addToRoute = async e => {\r\n    setIsProcessing(true);\r\n    await setSchedule(e, selectedTech, dateSelected);\r\n    await getEmployeeCustomers(selectedTech);\r\n    await getEmployeeRoute(selectedTech, dateSelected);\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const removeFromRoute = async e => {\r\n    setIsProcessing(true);\r\n    await unschedule(e);\r\n    await getEmployeeCustomers(selectedTech);\r\n    await getEmployeeRoute(selectedTech, dateSelected);\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const [mapCenterPoint, setMapCenterPoint] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!loading && customers[0]) {\r\n      getEmployeeRoute(selectedTech, dateSelected);\r\n      setMapCenterPoint({\r\n        lat: parseFloat(customers[0].serviceLat),\r\n        lng: parseFloat(customers[0].serviceLng)\r\n      });\r\n      // const list = customers.filter(customer => customer.isScheduled === true);\r\n      // updateRoutedCustomers(list);\r\n      // console.log(list);\r\n    }\r\n  }, [customers]);\r\n\r\n  const [mapCenterPointNC, setMapCenterPointNC] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (allCustomers[0]) {\r\n      setMapCenterPointNC({\r\n        lat: parseFloat(allCustomers[0].serviceLat),\r\n        lng: parseFloat(allCustomers[0].serviceLng)\r\n      });\r\n    }\r\n  }, [allCustomers]);\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      updateCustomerRouteList(Array.from(routeList, x => x.customer));\r\n      updateRoutedCustomers(Array.from(routeList, x => x.customer));\r\n      // updateRoutedCustomers(routeList);\r\n    }\r\n  }, [routeList]);\r\n\r\n  const handleOnDragEnd = async result => {\r\n    const items = Array.from(customerRouteList);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n    updateCustomerRouteList(items);\r\n    setIsProcessing(true);\r\n    await updateRouteOrder(selectedTech, dateSelected, items);\r\n    await getEmployeeRoute(selectedTech, dateSelected);\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const onLoad = React.useCallback(function callback(map) {\r\n    const bounds = new window.google.maps.LatLngBounds();\r\n    // map.fitBounds(bounds);\r\n    setMap(map);\r\n  }, []);\r\n\r\n  const onUnmount = React.useCallback(function callback(map) {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  const [infoIsOpen, setInfoIsOpen] = useState({\r\n    isOpen: false,\r\n    active: null\r\n  });\r\n\r\n  const onToggleOpen = customer => {\r\n    setInfoIsOpen({\r\n      isOpen: !infoIsOpen.isOpen,\r\n      active: customer\r\n    });\r\n  };\r\n\r\n  let totalDistance = 0;\r\n  let totalDuration = 0;\r\n  let METERS_TO_MILES = 0.000621371192;\r\n\r\n  const calculateTotalDistance = () => {\r\n    for (var i = 0; i < legs.length; ++i) {\r\n      totalDistance += legs[i].distance.value;\r\n      totalDuration += legs[i].duration.value;\r\n    }\r\n\r\n    totalDistance = Math.round(totalDistance * METERS_TO_MILES * 10) / 10;\r\n    totalDuration = Math.round(totalDuration / 60);\r\n\r\n    // setTotals({\r\n    //   totalDistance,\r\n    //   totalDuration\r\n    // });\r\n  };\r\n\r\n  calculateTotalDistance();\r\n\r\n  const [frequency, setFrequency] = useState({\r\n    customer: null,\r\n    freq: null\r\n  });\r\n\r\n  const onFreqChange = async (customerId, freq) => {\r\n    setFrequency({\r\n      customer: customerId,\r\n      freq: freq\r\n    });\r\n    updateFrequency(customerId, freq);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='routing' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/routing'>Routing</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to='/routing/builder'>Route Builder</Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              <h3 className='mb-0'>Route Builder </h3>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Row>\r\n                <Col md='4'>\r\n                  {totalDistance && (\r\n                    <h5>Total Distance: {totalDistance} miles</h5>\r\n                  )}\r\n                  {totalDuration && (\r\n                    <h5>Total Duration: {totalDuration} minutes</h5>\r\n                  )}\r\n                </Col>\r\n                {/* <Col>\r\n                  {' '}\r\n                  <p>\r\n                    Routing Type:{' '}\r\n                    {routeList.isOptimized ? (\r\n                      <span>Optimized</span>\r\n                    ) : (\r\n                      <span>Manual</span>\r\n                    )}\r\n                  </p>\r\n                </Col> */}\r\n                <Col md={{ size: 4, offset: 4 }}>\r\n                  <Button\r\n                    color='primary'\r\n                    onClick={async () => {\r\n                      // console.log(routedCustomers);\r\n                      setIsProcessing(true);\r\n                      await optimizeRoute(\r\n                        routedCustomers,\r\n                        selectedTech,\r\n                        dateSelected\r\n                      );\r\n                      await getEmployeeRoute(selectedTech, dateSelected);\r\n                      setIsProcessing(false);\r\n                    }}\r\n                  >\r\n                    {isProcessing ? (\r\n                      <span>\r\n                        {' '}\r\n                        <SpinnerCircular\r\n                          size={24}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />{' '}\r\n                        Processing...\r\n                      </span>\r\n                    ) : (\r\n                      <span>Optimize Route</span>\r\n                    )}\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  {customers.length === 0 &&\r\n                    mapCenterPointNC !== null &&\r\n                    selectedTech && (\r\n                      <LoadScript googleMapsApiKey='AIzaSyBPTZtirCX7Ar2bIandK2EZzj10V2bBUag'>\r\n                        <GoogleMap\r\n                          mapContainerStyle={containerStyle}\r\n                          center={mapCenterPointNC}\r\n                          zoom={10}\r\n                          onLoad={onLoad}\r\n                          onUnmount={onUnmount}\r\n                        >\r\n                          {allCustomers.map(customer => (\r\n                            <Fragment key={customer._id}>\r\n                              {customer.technician !== selectedTech && (\r\n                                <Marker\r\n                                  icon={'https://i.imgur.com/SErFNu4.png'}\r\n                                  position={{\r\n                                    lat: parseFloat(customer.serviceLat),\r\n                                    lng: parseFloat(customer.serviceLng)\r\n                                  }}\r\n                                  onClick={() => {\r\n                                    onToggleOpen(customer._id);\r\n                                  }}\r\n                                >\r\n                                  {infoIsOpen.isOpen &&\r\n                                    infoIsOpen.active === customer._id && (\r\n                                      <InfoWindow onCloseClick={onToggleOpen}>\r\n                                        <div>\r\n                                          <strong>\r\n                                            <h4 className='mb-0'>\r\n                                              {customer.firstName}{' '}\r\n                                              {customer.lastName}\r\n                                            </h4>\r\n                                          </strong>{' '}\r\n                                          {customer.serviceAddress}\r\n                                          <br />\r\n                                          {customer.isScheduled ? (\r\n                                            <Badge\r\n                                              className='mgn-btm-10'\r\n                                              color='success'\r\n                                            >\r\n                                              Scheduled\r\n                                            </Badge>\r\n                                          ) : (\r\n                                            <Badge\r\n                                              className='mgn-btm-10'\r\n                                              color='danger'\r\n                                            >\r\n                                              Not Scheduled\r\n                                            </Badge>\r\n                                          )}\r\n                                          <br />\r\n                                          {customer.technician === null ? (\r\n                                            <span>\r\n                                              Not Assigned to Tech\r\n                                              <br />\r\n                                              <Button\r\n                                                size='sm'\r\n                                                color='success'\r\n                                                onClick={async () => {\r\n                                                  setIsProcessing(true);\r\n                                                  await updateTech(\r\n                                                    customer._id,\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getEmployeeCustomers(\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getCustomersRB();\r\n                                                  setIsProcessing(false);\r\n                                                }}\r\n                                              >\r\n                                                Assign to Selected Tech\r\n                                              </Button>\r\n                                            </span>\r\n                                          ) : (\r\n                                            <span>\r\n                                              Assigned to{' '}\r\n                                              {customer.technicianName}\r\n                                              <br />\r\n                                              <Button\r\n                                                size='sm'\r\n                                                color='success'\r\n                                                onClick={async () => {\r\n                                                  setIsProcessing(true);\r\n                                                  await updateTech(\r\n                                                    customer._id,\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getEmployeeCustomers(\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getCustomersRB();\r\n                                                  setIsProcessing(false);\r\n                                                }}\r\n                                              >\r\n                                                Assign to Selected Tech\r\n                                              </Button>\r\n                                            </span>\r\n                                          )}\r\n                                        </div>\r\n                                      </InfoWindow>\r\n                                    )}\r\n                                </Marker>\r\n                              )}\r\n                            </Fragment>\r\n                          ))}\r\n                        </GoogleMap>\r\n                      </LoadScript>\r\n                    )}\r\n\r\n                  {customers.length >= 1 &&\r\n                    routedCustomers !== null &&\r\n                    mapCenterPoint !== null && (\r\n                      <LoadScript googleMapsApiKey='AIzaSyBPTZtirCX7Ar2bIandK2EZzj10V2bBUag'>\r\n                        <GoogleMap\r\n                          mapContainerStyle={containerStyle}\r\n                          center={mapCenterPoint}\r\n                          zoom={10}\r\n                          onLoad={onLoad}\r\n                          onUnmount={onUnmount}\r\n                        >\r\n                          {routedCustomers.length >= 2 &&\r\n                            isProcessing === false && (\r\n                              <MapDirectionsRenderer\r\n                                travelMode='DRIVING'\r\n                                places={routedCustomers}\r\n                              />\r\n                            )}\r\n\r\n                          {routedCustomers.length === 1 && (\r\n                            <Fragment>\r\n                              {routedCustomers.map(customer => (\r\n                                <Marker\r\n                                  key={customer._id}\r\n                                  icon={'https://i.imgur.com/kAyfMFn.png'}\r\n                                  position={{\r\n                                    lat: parseFloat(customer.serviceLat),\r\n                                    lng: parseFloat(customer.serviceLng)\r\n                                  }}\r\n                                ></Marker>\r\n                              ))}\r\n                            </Fragment>\r\n                          )}\r\n\r\n                          {allCustomers.map(customer => (\r\n                            <Fragment key={customer._id}>\r\n                              {customer.technician !== selectedTech && (\r\n                                <Marker\r\n                                  icon={'https://i.imgur.com/SErFNu4.png'}\r\n                                  position={{\r\n                                    lat: parseFloat(customer.serviceLat),\r\n                                    lng: parseFloat(customer.serviceLng)\r\n                                  }}\r\n                                  onClick={() => {\r\n                                    onToggleOpen(customer._id);\r\n                                  }}\r\n                                >\r\n                                  {infoIsOpen.isOpen &&\r\n                                    infoIsOpen.active === customer._id && (\r\n                                      <InfoWindow onCloseClick={onToggleOpen}>\r\n                                        <div>\r\n                                          <strong>\r\n                                            <h4 className='mb-0'>\r\n                                              {customer.firstName}{' '}\r\n                                              {customer.lastName}\r\n                                            </h4>\r\n                                          </strong>{' '}\r\n                                          {customer.serviceAddress}\r\n                                          <br />\r\n                                          {customer.isScheduled ? (\r\n                                            <Badge\r\n                                              className='mgn-btm-10'\r\n                                              color='success'\r\n                                            >\r\n                                              Scheduled\r\n                                            </Badge>\r\n                                          ) : (\r\n                                            <Badge\r\n                                              className='mgn-btm-10'\r\n                                              color='danger'\r\n                                            >\r\n                                              Not Scheduled\r\n                                            </Badge>\r\n                                          )}\r\n                                          <br />\r\n                                          {customer.technician === null ? (\r\n                                            <span>\r\n                                              Not Assigned to Tech\r\n                                              <br />\r\n                                              <Button\r\n                                                size='sm'\r\n                                                color='success'\r\n                                                onClick={async () => {\r\n                                                  setIsProcessing(true);\r\n                                                  await updateTech(\r\n                                                    customer._id,\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getEmployeeCustomers(\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getCustomersRB();\r\n                                                  setIsProcessing(false);\r\n                                                }}\r\n                                              >\r\n                                                Assign to Selected Tech\r\n                                              </Button>\r\n                                            </span>\r\n                                          ) : (\r\n                                            <span>\r\n                                              Assigned to{' '}\r\n                                              {customer.technicianName}\r\n                                              <br />\r\n                                              <Button\r\n                                                size='sm'\r\n                                                color='success'\r\n                                                onClick={async () => {\r\n                                                  setIsProcessing(true);\r\n                                                  await updateTech(\r\n                                                    customer._id,\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getEmployeeCustomers(\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getCustomersRB();\r\n                                                  setIsProcessing(false);\r\n                                                }}\r\n                                              >\r\n                                                Assign to Selected Tech\r\n                                              </Button>\r\n                                            </span>\r\n                                          )}\r\n                                        </div>\r\n                                      </InfoWindow>\r\n                                    )}\r\n                                </Marker>\r\n                              )}\r\n                            </Fragment>\r\n                          ))}\r\n\r\n                          {customers.map(customer => (\r\n                            <Fragment key={customer._id}>\r\n                              {customer.isScheduled === false && (\r\n                                <Marker\r\n                                  icon={'https://i.imgur.com/DOITJn6.png'}\r\n                                  position={{\r\n                                    lat: parseFloat(customer.serviceLat),\r\n                                    lng: parseFloat(customer.serviceLng)\r\n                                  }}\r\n                                  onClick={() => {\r\n                                    onToggleOpen(customer._id);\r\n                                  }}\r\n                                >\r\n                                  {infoIsOpen.isOpen &&\r\n                                    infoIsOpen.active === customer._id && (\r\n                                      <InfoWindow onCloseClick={onToggleOpen}>\r\n                                        <div>\r\n                                          <strong>\r\n                                            <h4 className='mb-0'>\r\n                                              {customer.firstName}{' '}\r\n                                              {customer.lastName}\r\n                                            </h4>\r\n                                          </strong>{' '}\r\n                                          {customer.serviceAddress}\r\n                                          <br />\r\n                                          <Badge color='danger'>\r\n                                            Not Scheduled\r\n                                          </Badge>\r\n                                          <br />\r\n                                          <br />\r\n                                          Assigned to {customer.technicianName}\r\n                                          <br />\r\n                                          <Button\r\n                                            size='sm'\r\n                                            color='success'\r\n                                            onClick={() =>\r\n                                              addToRoute(customer._id)\r\n                                            }\r\n                                          >\r\n                                            Add To Route\r\n                                          </Button>\r\n                                        </div>\r\n                                      </InfoWindow>\r\n                                    )}\r\n                                </Marker>\r\n                              )}\r\n                            </Fragment>\r\n                          ))}\r\n                        </GoogleMap>\r\n                      </LoadScript>\r\n                    )}\r\n                </Col>\r\n              </Row>\r\n              <br />\r\n              <Row>\r\n                <Col lg='4'>\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label className='form-control-label'>Technician:</Label>\r\n                      <Input\r\n                        type='select'\r\n                        name='technician'\r\n                        onChange={onTechChange}\r\n                      >\r\n                        <option>Choose One</option>\r\n                        {employees.map(e => (\r\n                          <option key={e._id} value={e._id}>\r\n                            {e.firstName} {e.lastName}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Form>\r\n                  <h4>Unscheuled Customers:</h4>\r\n                  <ListGroup className='mgn-btm-10'>\r\n                    {customers.map(c => (\r\n                      <Fragment key={c._id}>\r\n                        {c.isScheduled === false && (\r\n                          <ListGroupItem>\r\n                            <strong>\r\n                              {c.firstName} {c.lastName}\r\n                            </strong>{' '}\r\n                            <br />\r\n                            <small>\r\n                              <em>{c.serviceAddress}</em>\r\n                            </small>\r\n                            <br />\r\n                            <Badge color='warning' className='mgn-btm-10'>\r\n                              Unscheduled\r\n                            </Badge>\r\n                            <br />\r\n                            <Button\r\n                              size='sm'\r\n                              color='success'\r\n                              onClick={() => addToRoute(c._id)}\r\n                            >\r\n                              Add To Route\r\n                            </Button>\r\n                          </ListGroupItem>\r\n                        )}\r\n                      </Fragment>\r\n                    ))}\r\n                  </ListGroup>\r\n                  <hr />\r\n                  <h4>Other Scheduled Customers:</h4>\r\n                  <ListGroup>\r\n                    {customers.map(c => (\r\n                      <Fragment key={c._id}>\r\n                        {c.isScheduled === true &&\r\n                          c.scheduledDay !== dateSelected && (\r\n                            <ListGroupItem>\r\n                              {c.firstName} {c.lastName}{' '}\r\n                              <Badge color='primary' className='mgn-btm-10'>\r\n                                Scheduled - {c.scheduledDay} @ 2:40pm - 4:40pm\r\n                              </Badge>\r\n                              <Button\r\n                                size='sm'\r\n                                color='success'\r\n                                onClick={async () => {\r\n                                  await removeFromRoute(c._id);\r\n                                  addToRoute(c._id);\r\n                                }}\r\n                              >\r\n                                Switch to {dateSelected}\r\n                              </Button>\r\n                            </ListGroupItem>\r\n                          )}\r\n                      </Fragment>\r\n                    ))}\r\n                  </ListGroup>\r\n                </Col>\r\n                <Col lg='8'>\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label className='form-control-label'>\r\n                        Day to Schedule:\r\n                      </Label>\r\n                      <Input type='select' name='day' onChange={onChangeDay}>\r\n                        <option>Monday</option>\r\n                        <option>Tuesday</option>\r\n                        <option>Wednesday</option>\r\n                        <option>Thursday</option>\r\n                        <option>Friday</option>\r\n                        <option>Saturday</option>\r\n                        <option>Sunday</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Form>\r\n                  <div className='route-builder-box'>\r\n                    <h3>{dateSelected}'s Route</h3>\r\n                    {!isProcessing ? (\r\n                      <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId='items'>\r\n                          {provided => (\r\n                            <div\r\n                              {...provided.droppableProps}\r\n                              ref={provided.innerRef}\r\n                            >\r\n                              <ListGroup>\r\n                                {!loading &&\r\n                                  !isProcessing &&\r\n                                  customerRouteList !== null &&\r\n                                  customerRouteList.map((c, index) => (\r\n                                    <Draggable\r\n                                      key={c._id}\r\n                                      draggableId={c._id}\r\n                                      index={index}\r\n                                    >\r\n                                      {provided => (\r\n                                        <div\r\n                                          {...provided.draggableProps}\r\n                                          {...provided.dragHandleProps}\r\n                                          ref={provided.innerRef}\r\n                                        >\r\n                                          {c.isScheduled === true &&\r\n                                            c.scheduledDay === dateSelected && (\r\n                                              <ListGroupItem>\r\n                                                <strong>\r\n                                                  {c.firstName} {c.lastName}{' '}\r\n                                                </strong>\r\n                                                <br />\r\n                                                <small>\r\n                                                  <em>{c.serviceAddress}</em>\r\n                                                </small>\r\n                                                <br />\r\n                                                <br />\r\n                                                <Row>\r\n                                                  <Col sm='3'>\r\n                                                    <Label className='form-control-label'>\r\n                                                      Frequency:\r\n                                                    </Label>\r\n                                                  </Col>\r\n                                                  <Col sm='9'>\r\n                                                    <Input\r\n                                                      type='select'\r\n                                                      defaultValue={c.frequency}\r\n                                                      name='frequency'\r\n                                                      onChange={e =>\r\n                                                        onFreqChange(\r\n                                                          c._id,\r\n                                                          e.target.value\r\n                                                        )\r\n                                                      }\r\n                                                    >\r\n                                                      <option>Weekly</option>\r\n                                                      <option>\r\n                                                        Bi-Weekly (Every 2\r\n                                                        Weeks)\r\n                                                      </option>\r\n                                                      <option>\r\n                                                        Tri-Weekly (Every 3\r\n                                                        Weeks)\r\n                                                      </option>\r\n                                                      <option>\r\n                                                        Monthly (Every 4 Weeks)\r\n                                                      </option>\r\n                                                    </Input>\r\n                                                  </Col>\r\n                                                </Row>\r\n\r\n                                                <br />\r\n                                                <Button\r\n                                                  size='sm'\r\n                                                  color='danger'\r\n                                                  onClick={() =>\r\n                                                    removeFromRoute(c._id)\r\n                                                  }\r\n                                                >\r\n                                                  Remove From {dateSelected}'s\r\n                                                  Schedule\r\n                                                </Button>\r\n                                              </ListGroupItem>\r\n                                            )}\r\n                                        </div>\r\n                                      )}\r\n                                    </Draggable>\r\n                                  ))}\r\n                                {provided.placeholder}\r\n                              </ListGroup>\r\n                            </div>\r\n                          )}\r\n                        </Droppable>\r\n                      </DragDropContext>\r\n                    ) : (\r\n                      <span>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                        <h3>Processing...</h3>\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nRouteBuilder.propTypes = {\r\n  getEmployees: PropTypes.func.isRequired,\r\n  getEmployeeCustomers: PropTypes.func.isRequired,\r\n  unschedule: PropTypes.func.isRequired,\r\n  setSchedule: PropTypes.func.isRequired,\r\n  getEmployeeRoute: PropTypes.func.isRequired,\r\n  updateRouteOrder: PropTypes.func.isRequired,\r\n  getCustomersRB: PropTypes.func.isRequired,\r\n  optimizeRoute: PropTypes.func.isRequired,\r\n  clearCustomers: PropTypes.func.isRequired,\r\n  updateFrequency: PropTypes.func.isRequired,\r\n  updateTech: PropTypes.func.isRequired,\r\n  employees: PropTypes.object.isRequired,\r\n  mapRedux: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  employees: state.employee,\r\n  customers: state.customer,\r\n  mapRedux: state.map\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getEmployees,\r\n  getEmployeeCustomers,\r\n  setSchedule,\r\n  unschedule,\r\n  getEmployeeRoute,\r\n  updateRouteOrder,\r\n  getCustomersRB,\r\n  optimizeRoute,\r\n  clearCustomers,\r\n  updateFrequency,\r\n  updateTech\r\n})(RouteBuilder);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Settings.js",["506","507","508","509","510","511","512","513","514","515","516","517","518"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\employee.js",["519"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\user.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\types.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\user.js",["520"],{"ruleId":"521","replacedBy":"522"},{"ruleId":"523","replacedBy":"524"},{"ruleId":"521","replacedBy":"525"},{"ruleId":"523","replacedBy":"526"},{"ruleId":"521","replacedBy":"527"},{"ruleId":"523","replacedBy":"528"},{"ruleId":"529","severity":1,"message":"530","line":13,"column":3,"nodeType":"531","messageId":"532","endLine":13,"endColumn":23},{"ruleId":"529","severity":1,"message":"533","line":14,"column":3,"nodeType":"531","messageId":"532","endLine":14,"endColumn":15},{"ruleId":"529","severity":1,"message":"534","line":15,"column":3,"nodeType":"531","messageId":"532","endLine":15,"endColumn":15},{"ruleId":"529","severity":1,"message":"535","line":16,"column":3,"nodeType":"531","messageId":"532","endLine":16,"endColumn":17},{"ruleId":"529","severity":1,"message":"536","line":17,"column":3,"nodeType":"531","messageId":"532","endLine":17,"endColumn":8},{"ruleId":"529","severity":1,"message":"537","line":18,"column":3,"nodeType":"531","messageId":"532","endLine":18,"endColumn":14},{"ruleId":"529","severity":1,"message":"538","line":19,"column":3,"nodeType":"531","messageId":"532","endLine":19,"endColumn":12},{"ruleId":"529","severity":1,"message":"539","line":20,"column":3,"nodeType":"531","messageId":"532","endLine":20,"endColumn":14},{"ruleId":"529","severity":1,"message":"540","line":21,"column":3,"nodeType":"531","messageId":"532","endLine":21,"endColumn":7},{"ruleId":"529","severity":1,"message":"541","line":22,"column":3,"nodeType":"531","messageId":"532","endLine":22,"endColumn":8},{"ruleId":"529","severity":1,"message":"542","line":23,"column":3,"nodeType":"531","messageId":"532","endLine":23,"endColumn":8},{"ruleId":"529","severity":1,"message":"543","line":24,"column":3,"nodeType":"531","messageId":"532","endLine":24,"endColumn":12},{"ruleId":"529","severity":1,"message":"544","line":25,"column":3,"nodeType":"531","messageId":"532","endLine":25,"endColumn":8},{"ruleId":"545","severity":1,"message":"546","line":132,"column":25,"nodeType":"547","endLine":135,"endColumn":27},{"ruleId":"521","replacedBy":"548"},{"ruleId":"523","replacedBy":"549"},{"ruleId":"550","severity":1,"message":"551","line":42,"column":6,"nodeType":"552","endLine":42,"endColumn":39,"suggestions":"553"},{"ruleId":"521","replacedBy":"554"},{"ruleId":"523","replacedBy":"555"},{"ruleId":"529","severity":1,"message":"556","line":8,"column":3,"nodeType":"531","messageId":"532","endLine":8,"endColumn":9},{"ruleId":"529","severity":1,"message":"530","line":15,"column":3,"nodeType":"531","messageId":"532","endLine":15,"endColumn":23},{"ruleId":"529","severity":1,"message":"533","line":16,"column":3,"nodeType":"531","messageId":"532","endLine":16,"endColumn":15},{"ruleId":"529","severity":1,"message":"534","line":17,"column":3,"nodeType":"531","messageId":"532","endLine":17,"endColumn":15},{"ruleId":"529","severity":1,"message":"535","line":18,"column":3,"nodeType":"531","messageId":"532","endLine":18,"endColumn":17},{"ruleId":"529","severity":1,"message":"536","line":19,"column":3,"nodeType":"531","messageId":"532","endLine":19,"endColumn":8},{"ruleId":"529","severity":1,"message":"537","line":20,"column":3,"nodeType":"531","messageId":"532","endLine":20,"endColumn":14},{"ruleId":"529","severity":1,"message":"538","line":21,"column":3,"nodeType":"531","messageId":"532","endLine":21,"endColumn":12},{"ruleId":"529","severity":1,"message":"539","line":22,"column":3,"nodeType":"531","messageId":"532","endLine":22,"endColumn":14},{"ruleId":"529","severity":1,"message":"540","line":23,"column":3,"nodeType":"531","messageId":"532","endLine":23,"endColumn":7},{"ruleId":"529","severity":1,"message":"541","line":24,"column":3,"nodeType":"531","messageId":"532","endLine":24,"endColumn":8},{"ruleId":"529","severity":1,"message":"542","line":25,"column":3,"nodeType":"531","messageId":"532","endLine":25,"endColumn":8},{"ruleId":"529","severity":1,"message":"543","line":26,"column":3,"nodeType":"531","messageId":"532","endLine":26,"endColumn":12},{"ruleId":"550","severity":1,"message":"557","line":54,"column":6,"nodeType":"552","endLine":54,"endColumn":25,"suggestions":"558"},{"ruleId":"529","severity":1,"message":"559","line":30,"column":3,"nodeType":"531","messageId":"532","endLine":30,"endColumn":13},{"ruleId":"550","severity":1,"message":"551","line":47,"column":6,"nodeType":"552","endLine":47,"endColumn":25,"suggestions":"560"},{"ruleId":"521","replacedBy":"561"},{"ruleId":"523","replacedBy":"562"},{"ruleId":"521","replacedBy":"563"},{"ruleId":"523","replacedBy":"564"},{"ruleId":"529","severity":1,"message":"530","line":20,"column":3,"nodeType":"531","messageId":"532","endLine":20,"endColumn":23},{"ruleId":"529","severity":1,"message":"533","line":21,"column":3,"nodeType":"531","messageId":"532","endLine":21,"endColumn":15},{"ruleId":"529","severity":1,"message":"534","line":22,"column":3,"nodeType":"531","messageId":"532","endLine":22,"endColumn":15},{"ruleId":"529","severity":1,"message":"535","line":23,"column":3,"nodeType":"531","messageId":"532","endLine":23,"endColumn":17},{"ruleId":"529","severity":1,"message":"544","line":35,"column":3,"nodeType":"531","messageId":"532","endLine":35,"endColumn":8},{"ruleId":"550","severity":1,"message":"551","line":65,"column":6,"nodeType":"552","endLine":65,"endColumn":25,"suggestions":"565"},{"ruleId":"529","severity":1,"message":"566","line":4,"column":3,"nodeType":"531","messageId":"532","endLine":4,"endColumn":16},{"ruleId":"529","severity":1,"message":"567","line":5,"column":3,"nodeType":"531","messageId":"532","endLine":5,"endColumn":12},{"ruleId":"529","severity":1,"message":"568","line":6,"column":3,"nodeType":"531","messageId":"532","endLine":6,"endColumn":15},{"ruleId":"529","severity":1,"message":"569","line":7,"column":3,"nodeType":"531","messageId":"532","endLine":7,"endColumn":9},{"ruleId":"550","severity":1,"message":"570","line":53,"column":6,"nodeType":"552","endLine":53,"endColumn":20,"suggestions":"571"},{"ruleId":"521","replacedBy":"572"},{"ruleId":"523","replacedBy":"573"},{"ruleId":"529","severity":1,"message":"574","line":9,"column":10,"nodeType":"531","messageId":"532","endLine":9,"endColumn":16},{"ruleId":"529","severity":1,"message":"556","line":19,"column":3,"nodeType":"531","messageId":"532","endLine":19,"endColumn":9},{"ruleId":"529","severity":1,"message":"536","line":28,"column":3,"nodeType":"531","messageId":"532","endLine":28,"endColumn":8},{"ruleId":"529","severity":1,"message":"537","line":29,"column":3,"nodeType":"531","messageId":"532","endLine":29,"endColumn":14},{"ruleId":"529","severity":1,"message":"538","line":30,"column":3,"nodeType":"531","messageId":"532","endLine":30,"endColumn":12},{"ruleId":"529","severity":1,"message":"539","line":31,"column":3,"nodeType":"531","messageId":"532","endLine":31,"endColumn":14},{"ruleId":"529","severity":1,"message":"540","line":32,"column":3,"nodeType":"531","messageId":"532","endLine":32,"endColumn":7},{"ruleId":"529","severity":1,"message":"543","line":33,"column":3,"nodeType":"531","messageId":"532","endLine":33,"endColumn":12},{"ruleId":"529","severity":1,"message":"542","line":34,"column":3,"nodeType":"531","messageId":"532","endLine":34,"endColumn":8},{"ruleId":"529","severity":1,"message":"541","line":35,"column":3,"nodeType":"531","messageId":"532","endLine":35,"endColumn":8},{"ruleId":"521","replacedBy":"575"},{"ruleId":"523","replacedBy":"576"},{"ruleId":"529","severity":1,"message":"577","line":2,"column":10,"nodeType":"531","messageId":"532","endLine":2,"endColumn":14},{"ruleId":"578","severity":1,"message":"579","line":79,"column":19,"nodeType":"547","endLine":79,"endColumn":57},{"ruleId":"580","severity":1,"message":"581","line":130,"column":25,"nodeType":"582","endLine":130,"endColumn":38},{"ruleId":"583","severity":1,"message":"584","line":141,"column":19,"nodeType":"547","endLine":141,"endColumn":54},{"ruleId":"583","severity":1,"message":"584","line":146,"column":19,"nodeType":"547","endLine":146,"endColumn":54},{"ruleId":"521","replacedBy":"585"},{"ruleId":"523","replacedBy":"586"},{"ruleId":"529","severity":1,"message":"587","line":1,"column":10,"nodeType":"531","messageId":"532","endLine":1,"endColumn":18},{"ruleId":"521","replacedBy":"588"},{"ruleId":"523","replacedBy":"589"},{"ruleId":"590","severity":1,"message":"591","line":19,"column":1,"nodeType":"592","endLine":54,"endColumn":2},{"ruleId":"590","severity":1,"message":"591","line":5,"column":1,"nodeType":"592","endLine":16,"endColumn":2},{"ruleId":"529","severity":1,"message":"536","line":8,"column":3,"nodeType":"531","messageId":"532","endLine":8,"endColumn":8},{"ruleId":"529","severity":1,"message":"537","line":9,"column":3,"nodeType":"531","messageId":"532","endLine":9,"endColumn":14},{"ruleId":"529","severity":1,"message":"538","line":10,"column":3,"nodeType":"531","messageId":"532","endLine":10,"endColumn":12},{"ruleId":"529","severity":1,"message":"539","line":11,"column":3,"nodeType":"531","messageId":"532","endLine":11,"endColumn":14},{"ruleId":"529","severity":1,"message":"540","line":12,"column":3,"nodeType":"531","messageId":"532","endLine":12,"endColumn":7},{"ruleId":"529","severity":1,"message":"543","line":13,"column":3,"nodeType":"531","messageId":"532","endLine":13,"endColumn":12},{"ruleId":"529","severity":1,"message":"593","line":16,"column":3,"nodeType":"531","messageId":"532","endLine":16,"endColumn":11},{"ruleId":"529","severity":1,"message":"577","line":9,"column":10,"nodeType":"531","messageId":"532","endLine":9,"endColumn":14},{"ruleId":"583","severity":1,"message":"584","line":99,"column":19,"nodeType":"547","endLine":99,"endColumn":66},{"ruleId":"583","severity":1,"message":"584","line":102,"column":19,"nodeType":"547","endLine":102,"endColumn":66},{"ruleId":"521","replacedBy":"594"},{"ruleId":"523","replacedBy":"595"},{"ruleId":"521","replacedBy":"596"},{"ruleId":"523","replacedBy":"597"},{"ruleId":"529","severity":1,"message":"598","line":1,"column":27,"nodeType":"531","messageId":"532","endLine":1,"endColumn":35},{"ruleId":"529","severity":1,"message":"599","line":1,"column":37,"nodeType":"531","messageId":"532","endLine":1,"endColumn":46},{"ruleId":"529","severity":1,"message":"600","line":3,"column":3,"nodeType":"531","messageId":"532","endLine":3,"endColumn":12},{"ruleId":"529","severity":1,"message":"577","line":3,"column":10,"nodeType":"531","messageId":"532","endLine":3,"endColumn":14},{"ruleId":"529","severity":1,"message":"559","line":26,"column":3,"nodeType":"531","messageId":"532","endLine":26,"endColumn":13},{"ruleId":"583","severity":1,"message":"584","line":115,"column":19,"nodeType":"547","endLine":115,"endColumn":66},{"ruleId":"583","severity":1,"message":"584","line":118,"column":19,"nodeType":"547","endLine":118,"endColumn":66},{"ruleId":"521","replacedBy":"601"},{"ruleId":"523","replacedBy":"602"},{"ruleId":"521","replacedBy":"603"},{"ruleId":"523","replacedBy":"604"},{"ruleId":"521","replacedBy":"605"},{"ruleId":"523","replacedBy":"606"},{"ruleId":"529","severity":1,"message":"600","line":9,"column":3,"nodeType":"531","messageId":"532","endLine":9,"endColumn":12},{"ruleId":"529","severity":1,"message":"593","line":18,"column":3,"nodeType":"531","messageId":"532","endLine":18,"endColumn":11},{"ruleId":"529","severity":1,"message":"599","line":20,"column":10,"nodeType":"531","messageId":"532","endLine":20,"endColumn":19},{"ruleId":"607","severity":1,"message":"608","line":74,"column":49,"nodeType":"609","messageId":"610","endLine":74,"endColumn":51},{"ruleId":"607","severity":1,"message":"608","line":89,"column":49,"nodeType":"609","messageId":"610","endLine":89,"endColumn":51},{"ruleId":"607","severity":1,"message":"608","line":101,"column":49,"nodeType":"609","messageId":"610","endLine":101,"endColumn":51},{"ruleId":"607","severity":1,"message":"611","line":311,"column":21,"nodeType":"609","messageId":"610","endLine":311,"endColumn":23},{"ruleId":"607","severity":1,"message":"611","line":311,"column":58,"nodeType":"609","messageId":"610","endLine":311,"endColumn":60},{"ruleId":"521","replacedBy":"612"},{"ruleId":"523","replacedBy":"613"},{"ruleId":"529","severity":1,"message":"614","line":2,"column":8,"nodeType":"531","messageId":"532","endLine":2,"endColumn":16},{"ruleId":"529","severity":1,"message":"556","line":8,"column":3,"nodeType":"531","messageId":"532","endLine":8,"endColumn":9},{"ruleId":"529","severity":1,"message":"615","line":9,"column":3,"nodeType":"531","messageId":"532","endLine":9,"endColumn":6},{"ruleId":"529","severity":1,"message":"616","line":10,"column":3,"nodeType":"531","messageId":"532","endLine":10,"endColumn":6},{"ruleId":"529","severity":1,"message":"536","line":11,"column":3,"nodeType":"531","messageId":"532","endLine":11,"endColumn":8},{"ruleId":"529","severity":1,"message":"537","line":12,"column":3,"nodeType":"531","messageId":"532","endLine":12,"endColumn":14},{"ruleId":"529","severity":1,"message":"538","line":13,"column":3,"nodeType":"531","messageId":"532","endLine":13,"endColumn":12},{"ruleId":"529","severity":1,"message":"539","line":14,"column":3,"nodeType":"531","messageId":"532","endLine":14,"endColumn":14},{"ruleId":"529","severity":1,"message":"617","line":54,"column":7,"nodeType":"531","messageId":"532","endLine":54,"endColumn":11},{"ruleId":"607","severity":1,"message":"608","line":203,"column":52,"nodeType":"609","messageId":"610","endLine":203,"endColumn":54},{"ruleId":"607","severity":1,"message":"608","line":218,"column":52,"nodeType":"609","messageId":"610","endLine":218,"endColumn":54},{"ruleId":"607","severity":1,"message":"608","line":229,"column":52,"nodeType":"609","messageId":"610","endLine":229,"endColumn":54},{"ruleId":"521","replacedBy":"618"},{"ruleId":"523","replacedBy":"619"},{"ruleId":"590","severity":1,"message":"591","line":27,"column":1,"nodeType":"592","endLine":93,"endColumn":2},{"ruleId":"529","severity":1,"message":"620","line":5,"column":19,"nodeType":"531","messageId":"532","endLine":5,"endColumn":26},{"ruleId":"529","severity":1,"message":"621","line":8,"column":10,"nodeType":"531","messageId":"532","endLine":8,"endColumn":16},{"ruleId":"529","severity":1,"message":"567","line":4,"column":3,"nodeType":"531","messageId":"532","endLine":4,"endColumn":12},{"ruleId":"529","severity":1,"message":"622","line":5,"column":3,"nodeType":"531","messageId":"532","endLine":5,"endColumn":13},{"ruleId":"529","severity":1,"message":"569","line":6,"column":3,"nodeType":"531","messageId":"532","endLine":6,"endColumn":9},{"ruleId":"529","severity":1,"message":"623","line":7,"column":3,"nodeType":"531","messageId":"532","endLine":7,"endColumn":13},{"ruleId":"529","severity":1,"message":"624","line":8,"column":3,"nodeType":"531","messageId":"532","endLine":8,"endColumn":21},{"ruleId":"529","severity":1,"message":"625","line":9,"column":3,"nodeType":"531","messageId":"532","endLine":9,"endColumn":20},{"ruleId":"529","severity":1,"message":"626","line":10,"column":3,"nodeType":"531","messageId":"532","endLine":10,"endColumn":11},{"ruleId":"529","severity":1,"message":"627","line":13,"column":8,"nodeType":"531","messageId":"532","endLine":13,"endColumn":29},{"ruleId":"529","severity":1,"message":"628","line":22,"column":8,"nodeType":"531","messageId":"532","endLine":22,"endColumn":14},{"ruleId":"529","severity":1,"message":"629","line":28,"column":8,"nodeType":"531","messageId":"532","endLine":28,"endColumn":22},{"ruleId":"529","severity":1,"message":"630","line":35,"column":8,"nodeType":"531","messageId":"532","endLine":35,"endColumn":18},{"ruleId":"529","severity":1,"message":"631","line":37,"column":5,"nodeType":"531","messageId":"532","endLine":37,"endColumn":8},{"ruleId":"529","severity":1,"message":"632","line":39,"column":7,"nodeType":"531","messageId":"532","endLine":39,"endColumn":17},{"ruleId":"529","severity":1,"message":"633","line":48,"column":7,"nodeType":"531","messageId":"532","endLine":48,"endColumn":21},{"ruleId":"529","severity":1,"message":"634","line":53,"column":7,"nodeType":"531","messageId":"532","endLine":53,"endColumn":16},{"ruleId":"529","severity":1,"message":"635","line":86,"column":10,"nodeType":"531","messageId":"532","endLine":86,"endColumn":13},{"ruleId":"529","severity":1,"message":"636","line":92,"column":10,"nodeType":"531","messageId":"532","endLine":92,"endColumn":18},{"ruleId":"529","severity":1,"message":"637","line":97,"column":9,"nodeType":"531","messageId":"532","endLine":97,"endColumn":22},{"ruleId":"529","severity":1,"message":"638","line":104,"column":9,"nodeType":"531","messageId":"532","endLine":104,"endColumn":26},{"ruleId":"529","severity":1,"message":"639","line":111,"column":9,"nodeType":"531","messageId":"532","endLine":111,"endColumn":15},{"ruleId":"529","severity":1,"message":"640","line":117,"column":9,"nodeType":"531","messageId":"532","endLine":117,"endColumn":18},{"ruleId":"529","severity":1,"message":"641","line":143,"column":10,"nodeType":"531","messageId":"532","endLine":143,"endColumn":21},{"ruleId":"529","severity":1,"message":"642","line":143,"column":23,"nodeType":"531","messageId":"532","endLine":143,"endColumn":37},{"ruleId":"529","severity":1,"message":"643","line":147,"column":9,"nodeType":"531","messageId":"532","endLine":147,"endColumn":19},{"ruleId":"529","severity":1,"message":"644","line":148,"column":9,"nodeType":"531","messageId":"532","endLine":148,"endColumn":15},{"ruleId":"529","severity":1,"message":"645","line":870,"column":9,"nodeType":"531","messageId":"532","endLine":870,"endColumn":15},{"ruleId":"529","severity":1,"message":"556","line":13,"column":3,"nodeType":"531","messageId":"532","endLine":13,"endColumn":9},{"ruleId":"583","severity":1,"message":"584","line":173,"column":19,"nodeType":"547","endLine":173,"endColumn":66},{"ruleId":"583","severity":1,"message":"584","line":176,"column":19,"nodeType":"547","endLine":176,"endColumn":66},{"ruleId":"521","replacedBy":"646"},{"ruleId":"523","replacedBy":"647"},{"ruleId":"529","severity":1,"message":"648","line":63,"column":13,"nodeType":"531","messageId":"532","endLine":63,"endColumn":16},{"ruleId":"521","replacedBy":"649"},{"ruleId":"523","replacedBy":"650"},{"ruleId":"590","severity":1,"message":"591","line":8,"column":1,"nodeType":"592","endLine":20,"endColumn":2},{"ruleId":"529","severity":1,"message":"648","line":12,"column":13,"nodeType":"531","messageId":"532","endLine":12,"endColumn":16},{"ruleId":"529","severity":1,"message":"651","line":21,"column":10,"nodeType":"531","messageId":"532","endLine":21,"endColumn":20},{"ruleId":"529","severity":1,"message":"652","line":30,"column":3,"nodeType":"531","messageId":"532","endLine":30,"endColumn":14},{"ruleId":"529","severity":1,"message":"559","line":35,"column":3,"nodeType":"531","messageId":"532","endLine":35,"endColumn":13},{"ruleId":"529","severity":1,"message":"653","line":45,"column":3,"nodeType":"531","messageId":"532","endLine":45,"endColumn":13},{"ruleId":"529","severity":1,"message":"654","line":46,"column":3,"nodeType":"531","messageId":"532","endLine":46,"endColumn":17},{"ruleId":"529","severity":1,"message":"655","line":47,"column":3,"nodeType":"531","messageId":"532","endLine":47,"endColumn":17},{"ruleId":"529","severity":1,"message":"656","line":50,"column":3,"nodeType":"531","messageId":"532","endLine":50,"endColumn":10},{"ruleId":"529","severity":1,"message":"657","line":54,"column":3,"nodeType":"531","messageId":"532","endLine":54,"endColumn":22},{"ruleId":"529","severity":1,"message":"539","line":61,"column":3,"nodeType":"531","messageId":"532","endLine":61,"endColumn":14},{"ruleId":"529","severity":1,"message":"658","line":74,"column":15,"nodeType":"531","messageId":"532","endLine":74,"endColumn":19},{"ruleId":"529","severity":1,"message":"659","line":81,"column":8,"nodeType":"531","messageId":"532","endLine":81,"endColumn":14},{"ruleId":"529","severity":1,"message":"660","line":91,"column":3,"nodeType":"531","messageId":"532","endLine":91,"endColumn":16},{"ruleId":"529","severity":1,"message":"661","line":94,"column":8,"nodeType":"531","messageId":"532","endLine":94,"endColumn":11},{"ruleId":"529","severity":1,"message":"662","line":95,"column":10,"nodeType":"531","messageId":"532","endLine":95,"endColumn":13},{"ruleId":"529","severity":1,"message":"663","line":96,"column":8,"nodeType":"531","messageId":"532","endLine":96,"endColumn":16},{"ruleId":"529","severity":1,"message":"664","line":119,"column":9,"nodeType":"531","messageId":"532","endLine":119,"endColumn":16},{"ruleId":"550","severity":1,"message":"665","line":126,"column":6,"nodeType":"552","endLine":126,"endColumn":12,"suggestions":"666"},{"ruleId":"529","severity":1,"message":"667","line":160,"column":9,"nodeType":"531","messageId":"532","endLine":160,"endColumn":27},{"ruleId":"529","severity":1,"message":"668","line":162,"column":9,"nodeType":"531","messageId":"532","endLine":162,"endColumn":14},{"ruleId":"550","severity":1,"message":"669","line":329,"column":13,"nodeType":"670","endLine":340,"endColumn":4},{"ruleId":"550","severity":1,"message":"671","line":340,"column":6,"nodeType":"552","endLine":340,"endColumn":16,"suggestions":"672"},{"ruleId":"529","severity":1,"message":"673","line":343,"column":10,"nodeType":"531","messageId":"532","endLine":343,"endColumn":28},{"ruleId":"529","severity":1,"message":"674","line":379,"column":9,"nodeType":"531","messageId":"532","endLine":379,"endColumn":21},{"ruleId":"550","severity":1,"message":"675","line":388,"column":6,"nodeType":"552","endLine":388,"endColumn":17,"suggestions":"676"},{"ruleId":"550","severity":1,"message":"675","line":395,"column":6,"nodeType":"552","endLine":395,"endColumn":20,"suggestions":"677"},{"ruleId":"607","severity":1,"message":"608","line":933,"column":61,"nodeType":"609","messageId":"610","endLine":933,"endColumn":63},{"ruleId":"607","severity":1,"message":"611","line":3954,"column":74,"nodeType":"609","messageId":"610","endLine":3954,"endColumn":76},{"ruleId":"607","severity":1,"message":"611","line":3987,"column":78,"nodeType":"609","messageId":"610","endLine":3987,"endColumn":80},{"ruleId":"583","severity":1,"message":"584","line":4110,"column":29,"nodeType":"547","endLine":4114,"endColumn":30},{"ruleId":"583","severity":1,"message":"584","line":4129,"column":29,"nodeType":"547","endLine":4133,"endColumn":30},{"ruleId":"590","severity":1,"message":"591","line":9,"column":1,"nodeType":"592","endLine":26,"endColumn":2},{"ruleId":"529","severity":1,"message":"600","line":3,"column":20,"nodeType":"531","messageId":"532","endLine":3,"endColumn":29},{"ruleId":"529","severity":1,"message":"556","line":3,"column":31,"nodeType":"531","messageId":"532","endLine":3,"endColumn":37},{"ruleId":"529","severity":1,"message":"678","line":3,"column":39,"nodeType":"531","messageId":"532","endLine":3,"endColumn":42},{"ruleId":"545","severity":1,"message":"546","line":239,"column":17,"nodeType":"547","endLine":242,"endColumn":19},{"ruleId":"545","severity":1,"message":"546","line":300,"column":17,"nodeType":"547","endLine":303,"endColumn":19},{"ruleId":"545","severity":1,"message":"546","line":328,"column":17,"nodeType":"547","endLine":331,"endColumn":19},{"ruleId":"679","severity":1,"message":"680","line":374,"column":21,"nodeType":"582","endLine":374,"endColumn":36},{"ruleId":"679","severity":1,"message":"680","line":430,"column":21,"nodeType":"582","endLine":430,"endColumn":36},{"ruleId":"679","severity":1,"message":"680","line":452,"column":25,"nodeType":"582","endLine":452,"endColumn":40},{"ruleId":"545","severity":1,"message":"546","line":456,"column":25,"nodeType":"547","endLine":459,"endColumn":27},{"ruleId":"545","severity":1,"message":"546","line":469,"column":25,"nodeType":"547","endLine":472,"endColumn":27},{"ruleId":"545","severity":1,"message":"546","line":482,"column":25,"nodeType":"547","endLine":485,"endColumn":27},{"ruleId":"545","severity":1,"message":"546","line":495,"column":25,"nodeType":"547","endLine":498,"endColumn":27},{"ruleId":"545","severity":1,"message":"546","line":508,"column":25,"nodeType":"547","endLine":511,"endColumn":27},{"ruleId":"545","severity":1,"message":"546","line":521,"column":25,"nodeType":"547","endLine":524,"endColumn":27},{"ruleId":"545","severity":1,"message":"546","line":536,"column":25,"nodeType":"547","endLine":539,"endColumn":27},{"ruleId":"545","severity":1,"message":"546","line":549,"column":25,"nodeType":"547","endLine":552,"endColumn":27},{"ruleId":"529","severity":1,"message":"599","line":1,"column":27,"nodeType":"531","messageId":"532","endLine":1,"endColumn":36},{"ruleId":"529","severity":1,"message":"598","line":1,"column":38,"nodeType":"531","messageId":"532","endLine":1,"endColumn":46},{"ruleId":"529","severity":1,"message":"681","line":7,"column":8,"nodeType":"531","messageId":"532","endLine":7,"endColumn":23},{"ruleId":"529","severity":1,"message":"682","line":8,"column":3,"nodeType":"531","messageId":"532","endLine":8,"endColumn":9},{"ruleId":"529","severity":1,"message":"683","line":9,"column":3,"nodeType":"531","messageId":"532","endLine":9,"endColumn":12},{"ruleId":"521","replacedBy":"684"},{"ruleId":"523","replacedBy":"685"},{"ruleId":"521","replacedBy":"686"},{"ruleId":"523","replacedBy":"687"},{"ruleId":"529","severity":1,"message":"556","line":11,"column":20,"nodeType":"531","messageId":"532","endLine":11,"endColumn":26},{"ruleId":"529","severity":1,"message":"688","line":11,"column":28,"nodeType":"531","messageId":"532","endLine":11,"endColumn":36},{"ruleId":"529","severity":1,"message":"689","line":11,"column":38,"nodeType":"531","messageId":"532","endLine":11,"endColumn":42},{"ruleId":"550","severity":1,"message":"690","line":45,"column":6,"nodeType":"552","endLine":45,"endColumn":8,"suggestions":"691"},{"ruleId":"529","severity":1,"message":"598","line":1,"column":27,"nodeType":"531","messageId":"532","endLine":1,"endColumn":35},{"ruleId":"529","severity":1,"message":"599","line":1,"column":37,"nodeType":"531","messageId":"532","endLine":1,"endColumn":46},{"ruleId":"529","severity":1,"message":"692","line":2,"column":10,"nodeType":"531","messageId":"532","endLine":2,"endColumn":17},{"ruleId":"529","severity":1,"message":"693","line":3,"column":8,"nodeType":"531","messageId":"532","endLine":3,"endColumn":17},{"ruleId":"529","severity":1,"message":"556","line":5,"column":3,"nodeType":"531","messageId":"532","endLine":5,"endColumn":9},{"ruleId":"529","severity":1,"message":"544","line":6,"column":3,"nodeType":"531","messageId":"532","endLine":6,"endColumn":8},{"ruleId":"529","severity":1,"message":"616","line":7,"column":3,"nodeType":"531","messageId":"532","endLine":7,"endColumn":6},{"ruleId":"529","severity":1,"message":"615","line":8,"column":3,"nodeType":"531","messageId":"532","endLine":8,"endColumn":6},{"ruleId":"529","severity":1,"message":"542","line":10,"column":3,"nodeType":"531","messageId":"532","endLine":10,"endColumn":8},{"ruleId":"529","severity":1,"message":"540","line":11,"column":3,"nodeType":"531","messageId":"532","endLine":11,"endColumn":7},{"ruleId":"529","severity":1,"message":"541","line":12,"column":3,"nodeType":"531","messageId":"532","endLine":12,"endColumn":8},{"ruleId":"529","severity":1,"message":"543","line":13,"column":3,"nodeType":"531","messageId":"532","endLine":13,"endColumn":12},{"ruleId":"529","severity":1,"message":"694","line":14,"column":3,"nodeType":"531","messageId":"532","endLine":14,"endColumn":16},{"ruleId":"529","severity":1,"message":"695","line":15,"column":3,"nodeType":"531","messageId":"532","endLine":15,"endColumn":12},{"ruleId":"529","severity":1,"message":"628","line":26,"column":8,"nodeType":"531","messageId":"532","endLine":26,"endColumn":14},{"ruleId":"529","severity":1,"message":"624","line":20,"column":3,"nodeType":"531","messageId":"532","endLine":20,"endColumn":21},{"ruleId":"529","severity":1,"message":"625","line":21,"column":3,"nodeType":"531","messageId":"532","endLine":21,"endColumn":20},{"ruleId":"529","severity":1,"message":"626","line":22,"column":3,"nodeType":"531","messageId":"532","endLine":22,"endColumn":11},{"ruleId":"529","severity":1,"message":"635","line":92,"column":10,"nodeType":"531","messageId":"532","endLine":92,"endColumn":13},{"ruleId":"550","severity":1,"message":"696","line":139,"column":6,"nodeType":"552","endLine":139,"endColumn":17,"suggestions":"697"},{"ruleId":"550","severity":1,"message":"698","line":158,"column":6,"nodeType":"552","endLine":158,"endColumn":17,"suggestions":"699"},{"ruleId":"529","severity":1,"message":"700","line":172,"column":11,"nodeType":"531","messageId":"532","endLine":172,"endColumn":17},{"ruleId":"529","severity":1,"message":"701","line":214,"column":10,"nodeType":"531","messageId":"532","endLine":214,"endColumn":19},{"ruleId":"529","severity":1,"message":"530","line":29,"column":3,"nodeType":"531","messageId":"532","endLine":29,"endColumn":23},{"ruleId":"529","severity":1,"message":"533","line":30,"column":3,"nodeType":"531","messageId":"532","endLine":30,"endColumn":15},{"ruleId":"529","severity":1,"message":"534","line":31,"column":3,"nodeType":"531","messageId":"532","endLine":31,"endColumn":15},{"ruleId":"529","severity":1,"message":"535","line":32,"column":3,"nodeType":"531","messageId":"532","endLine":32,"endColumn":17},{"ruleId":"529","severity":1,"message":"536","line":33,"column":3,"nodeType":"531","messageId":"532","endLine":33,"endColumn":8},{"ruleId":"529","severity":1,"message":"537","line":34,"column":3,"nodeType":"531","messageId":"532","endLine":34,"endColumn":14},{"ruleId":"529","severity":1,"message":"538","line":35,"column":3,"nodeType":"531","messageId":"532","endLine":35,"endColumn":12},{"ruleId":"529","severity":1,"message":"539","line":36,"column":3,"nodeType":"531","messageId":"532","endLine":36,"endColumn":14},{"ruleId":"529","severity":1,"message":"544","line":41,"column":3,"nodeType":"531","messageId":"532","endLine":41,"endColumn":8},{"ruleId":"529","severity":1,"message":"702","line":47,"column":3,"nodeType":"531","messageId":"532","endLine":47,"endColumn":11},{"ruleId":"529","severity":1,"message":"703","line":48,"column":3,"nodeType":"531","messageId":"532","endLine":48,"endColumn":12},{"ruleId":"529","severity":1,"message":"704","line":78,"column":9,"nodeType":"531","messageId":"532","endLine":78,"endColumn":26},{"ruleId":"545","severity":1,"message":"546","line":668,"column":41,"nodeType":"547","endLine":668,"endColumn":67},{"ruleId":"529","severity":1,"message":"705","line":173,"column":11,"nodeType":"531","messageId":"532","endLine":173,"endColumn":17},{"ruleId":"590","severity":1,"message":"591","line":10,"column":1,"nodeType":"592","endLine":28,"endColumn":2},"no-native-reassign",["706"],"no-negated-in-lhs",["707"],["706"],["707"],["706"],["707"],"no-unused-vars","'UncontrolledDropdown' is defined but never used.","Identifier","unusedVar","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'DropdownToggle' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'ModalFooter' is defined but never used.","'Form' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'FormGroup' is defined but never used.","'Badge' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["706"],["707"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["708"],["706"],["707"],"'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'getEmployeeCustomers' and 'match.params.id'. Either include them or remove the dependency array. If 'getEmployeeCustomers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["709"],"'CardFooter' is defined but never used.",["710"],["706"],["707"],["706"],["707"],["711"],"'withGoogleMap' is defined but never used.","'GoogleMap' is defined but never used.","'withScriptjs' is defined but never used.","'Marker' is defined but never used.","React Hook useEffect has missing dependencies: 'places' and 'travelMode'. Either include them or remove the dependency array.",["712"],["706"],["707"],"'Formik' is defined but never used.",["706"],["707"],"'Link' is defined but never used.","jsx-a11y/no-redundant-roles","The element form has an implicit role of form. Defining this explicitly is redundant and should be avoided.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["706"],["707"],"'setAlert' is defined but never used.",["706"],["707"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'FormText' is defined but never used.",["706"],["707"],["706"],["707"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Container' is defined but never used.",["706"],["707"],["706"],["707"],["706"],["707"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["706"],["707"],"'ReactDOM' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'grid' is assigned a value but never used.",["706"],["707"],"'BSAlert' is defined but never used.","'notify' is defined but never used.","'LoadScript' is defined but never used.","'InfoWindow' is defined but never used.","'DirectionsRenderer' is defined but never used.","'DirectionsService' is defined but never used.","'Polyline' is defined but never used.","'MapDirectionsRenderer' is defined but never used.","'Footer' is defined but never used.","'RoutingMachine' is defined but never used.","'LeafletMap' is defined but never used.","'key' is assigned a value but never used.","'markerIcon' is assigned a value but never used.","'containerStyle' is assigned a value but never used.","'locations' is assigned a value but never used.","'map' is assigned a value but never used.","'mapState' is assigned a value but never used.","'onMarkerClick' is assigned a value but never used.","'onInfoWindowClose' is assigned a value but never used.","'onLoad' is assigned a value but never used.","'onUnmount' is assigned a value but never used.","'centerPoint' is assigned a value but never used.","'setCenterPoint' is assigned a value but never used.","'ZOOM_LEVEL' is assigned a value but never used.","'mapRef' is assigned a value but never used.","'config' is assigned a value but never used.",["706"],["707"],"'Yup' is defined but never used.",["706"],["707"],"'Scrollbars' is defined but never used.","'ButtonGroup' is defined but never used.","'Pagination' is defined but never used.","'PaginationItem' is defined but never used.","'PaginationLink' is defined but never used.","'Tooltip' is defined but never used.","'UncontrolledTooltip' is defined but never used.","'Line' is defined but never used.","'Moment' is defined but never used.","'chartExample1' is defined but never used.","'map' is defined but never used.","'set' is defined but never used.","'customer' is defined but never used.","'newList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getEmployeeRoute'. Either include it or remove the dependency array. If 'getEmployeeRoute' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["713"],"'dontBookWithinDays' is assigned a value but never used.","'slots' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'getEmployeeRoute' and 'user'. Either include them or remove the dependency array. If 'getEmployeeRoute' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["714"],"'repairPictureState' is assigned a value but never used.","'onDropRepair' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'logModal'. Either include it or remove the dependency array. You can also do a functional update 'setLogModal(l => ...)' if you only need 'logModal' in the 'setLogModal' call.",["715"],["716"],"'Nav' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'ToolkitProvider' is defined but never used.","'Search' is defined but never used.","'CSVExport' is defined but never used.",["706"],["707"],["706"],["707"],"'CardBody' is defined but never used.","'Card' is defined but never used.","React Hook useEffect has a missing dependency: 'active'. Either include it or remove the dependency array.",["717"],"'connect' is defined but never used.","'PropTypes' is defined but never used.","'ListGroupItem' is defined but never used.","'ListGroup' is defined but never used.","React Hook useEffect has missing dependencies: 'dateSelected', 'getEmployeeRoute', 'loading', and 'selectedTech'. Either include them or remove the dependency array. If 'getEmployeeRoute' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["718"],"React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.",["719"],"'bounds' is assigned a value but never used.","'frequency' is assigned a value but never used.","'CardText' is defined but never used.","'CardTitle' is defined but never used.","'handleEmailSubmit' is assigned a value but never used.","'errors' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"720","fix":"721"},{"desc":"722","fix":"723"},{"desc":"724","fix":"725"},{"desc":"726","fix":"727"},{"desc":"728","fix":"729"},{"desc":"730","fix":"731"},{"desc":"732","fix":"733"},{"desc":"734","fix":"735"},{"desc":"736","fix":"737"},{"desc":"738","fix":"739"},{"desc":"740","fix":"741"},{"desc":"742","fix":"743"},"Update the dependencies array to be: [getSingleCustomer, getEmployees, match.params.id]",{"range":"744","text":"745"},"Update the dependencies array to be: [getEmployeeCustomers, getSingleEmployee, match.params.id]",{"range":"746","text":"747"},"Update the dependencies array to be: [getSingleEmployee, match.params.id]",{"range":"748","text":"749"},"Update the dependencies array to be: [getSingleCustomer, match.params.id]",{"range":"750","text":"751"},"Update the dependencies array to be: [getRouteLegs, places, travelMode]",{"range":"752","text":"753"},"Update the dependencies array to be: [getEmployeeRoute, user]",{"range":"754","text":"755"},"Update the dependencies array to be: [getEmployeeRoute, routeDay, user]",{"range":"756","text":"757"},"Update the dependencies array to be: [checklist, logModal]",{"range":"758","text":"759"},"Update the dependencies array to be: [logModal, serviceNotes]",{"range":"760","text":"761"},"Update the dependencies array to be: [active]",{"range":"762","text":"763"},"Update the dependencies array to be: [customers, dateSelected, getEmployeeRoute, loading, selectedTech]",{"range":"764","text":"765"},"Update the dependencies array to be: [loading, routeList]",{"range":"766","text":"767"},[980,1013],"[getSingleCustomer, getEmployees, match.params.id]",[1069,1088],"[getEmployeeCustomers, getSingleEmployee, match.params.id]",[959,978],"[getSingleEmployee, match.params.id]",[1541,1560],"[getSingleCustomer, match.params.id]",[1424,1438],"[getRouteLegs, places, travelMode]",[2884,2890],"[getEmployeeRoute, user]",[8561,8571],"[getEmployeeRoute, routeDay, user]",[9667,9678],"[checklist, logModal]",[9793,9807],"[logModal, serviceNotes]",[1208,1210],"[active]",[3553,3564],"[customers, dateSelected, getEmployeeRoute, loading, selectedTech]",[4107,4118],"[loading, routeList]"]