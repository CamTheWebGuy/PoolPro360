[{"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Users.js":"1","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\CustomManager.js":"2","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\stripe\\StripeCallback.js":"3","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\stripe.js":"4","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Settings.js":"5","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\types.js":"6","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\user.js":"7","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Payments.js":"8","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\auth.js":"9","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewCustomer.js":"10","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\AddCustomers.js":"11","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\customer.js":"12","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\index.js":"13","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\AddUser.js":"14","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\landing\\Landing.js":"15","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ChangeEmail.js":"16","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Navbar.js":"17","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\utils\\RoutingMachine.js":"18","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\map.js":"19","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\App.js":"20","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\landing\\LandingContent.js":"21","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\PumpManager.js":"22","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\RouteBuilder.js":"23","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\RouteViewer.js":"24","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Pricing.js":"25","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\dashboard\\Sidebar.js":"26","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\dashboard\\Dashboard.js":"27","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\dashboard\\DashCards.js":"28","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Routing.js":"29","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\alert.js":"30","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\BookingForms.js":"31","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Alert.js":"32","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\HeaterManager.js":"33","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\CleanerManager..js":"34","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\EditCustomerInformation.js":"35","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\WorkOrderModal.js":"36","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\WorkOrders.js":"37","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewWorkOrdersModal.js":"38","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewMyRoute.js":"39","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ManageChecklist.js":"40","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\EditUser.js":"41","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\customer.js":"42","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ConfirmModal.js":"43","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\FormCreator.js":"44","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Customers.js":"45","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Login.js":"46","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ManageEquipment.js":"47","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\user.js":"48","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\alert.js":"49","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\auth.js":"50","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\variables\\chart.js":"51","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\LeafletMap.js":"52","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\employee.js":"53"},{"size":8679,"mtime":1625374068029,"results":"54","hashOfConfig":"55"},{"size":310321,"mtime":1615948087393,"results":"56","hashOfConfig":"55"},{"size":1342,"mtime":1617818577000,"results":"57","hashOfConfig":"55"},{"size":5566,"mtime":1625458476748,"results":"58","hashOfConfig":"55"},{"size":114821,"mtime":1625602196830,"results":"59","hashOfConfig":"55"},{"size":1464,"mtime":1617833539961,"results":"60","hashOfConfig":"55"},{"size":613,"mtime":1617835378091,"results":"61","hashOfConfig":"55"},{"size":42197,"mtime":1626212191650,"results":"62","hashOfConfig":"55"},{"size":1293,"mtime":1617835365092,"results":"63","hashOfConfig":"55"},{"size":140211,"mtime":1625537130196,"results":"64","hashOfConfig":"55"},{"size":29682,"mtime":1625537322353,"results":"65","hashOfConfig":"55"},{"size":28797,"mtime":1625853786192,"results":"66","hashOfConfig":"55"},{"size":193,"mtime":1608277914563,"results":"67","hashOfConfig":"55"},{"size":14775,"mtime":1611792910356,"results":"68","hashOfConfig":"55"},{"size":477,"mtime":1606952444302,"results":"69","hashOfConfig":"55"},{"size":7220,"mtime":1616714405826,"results":"70","hashOfConfig":"55"},{"size":6858,"mtime":1616698478365,"results":"71","hashOfConfig":"55"},{"size":618,"mtime":1612040618363,"results":"72","hashOfConfig":"55"},{"size":229,"mtime":1609440617664,"results":"73","hashOfConfig":"55"},{"size":5072,"mtime":1617834556221,"results":"74","hashOfConfig":"55"},{"size":26123,"mtime":1606952337934,"results":"75","hashOfConfig":"55"},{"size":31692,"mtime":1615948057639,"results":"76","hashOfConfig":"55"},{"size":38223,"mtime":1625372132976,"results":"77","hashOfConfig":"55"},{"size":171503,"mtime":1625372816314,"results":"78","hashOfConfig":"55"},{"size":12447,"mtime":1606954658913,"results":"79","hashOfConfig":"55"},{"size":12271,"mtime":1626212399635,"results":"80","hashOfConfig":"55"},{"size":48304,"mtime":1625359942763,"results":"81","hashOfConfig":"55"},{"size":4951,"mtime":1625360169394,"results":"82","hashOfConfig":"55"},{"size":5657,"mtime":1612341693260,"results":"83","hashOfConfig":"55"},{"size":354,"mtime":1607892087131,"results":"84","hashOfConfig":"55"},{"size":6614,"mtime":1607224832048,"results":"85","hashOfConfig":"55"},{"size":837,"mtime":1607915838635,"results":"86","hashOfConfig":"55"},{"size":45254,"mtime":1615948027499,"results":"87","hashOfConfig":"55"},{"size":16258,"mtime":1615948016574,"results":"88","hashOfConfig":"55"},{"size":21028,"mtime":1625776887462,"results":"89","hashOfConfig":"55"},{"size":12488,"mtime":1625423504036,"results":"90","hashOfConfig":"55"},{"size":37760,"mtime":1625422398166,"results":"91","hashOfConfig":"55"},{"size":1866,"mtime":1625437590334,"results":"92","hashOfConfig":"55"},{"size":4623,"mtime":1617651442297,"results":"93","hashOfConfig":"55"},{"size":18247,"mtime":1625540049725,"results":"94","hashOfConfig":"55"},{"size":15595,"mtime":1611864494003,"results":"95","hashOfConfig":"55"},{"size":2366,"mtime":1617261941285,"results":"96","hashOfConfig":"55"},{"size":946,"mtime":1625533149803,"results":"97","hashOfConfig":"55"},{"size":12996,"mtime":1612039225983,"results":"98","hashOfConfig":"55"},{"size":14961,"mtime":1625853910225,"results":"99","hashOfConfig":"55"},{"size":6051,"mtime":1607980867195,"results":"100","hashOfConfig":"55"},{"size":20464,"mtime":1612642905643,"results":"101","hashOfConfig":"55"},{"size":3029,"mtime":1616776438354,"results":"102","hashOfConfig":"55"},{"size":388,"mtime":1603849544318,"results":"103","hashOfConfig":"55"},{"size":4176,"mtime":1625857346647,"results":"104","hashOfConfig":"55"},{"size":16282,"mtime":1606983872075,"results":"105","hashOfConfig":"55"},{"size":883,"mtime":1612040727773,"results":"106","hashOfConfig":"55"},{"size":550,"mtime":1611801911168,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},"1ixd2dz",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"111"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"133"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"140"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"147"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"140"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"179"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"111"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"179"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"156"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"133"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Users.js",["250","251","252","253","254","255","256","257","258","259"],"import React, { Fragment, useEffect } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Formik } from 'formik';\r\n\r\nimport { getEmployees, markEmployeeInactive } from '../../actions/employee';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\nimport Alert from '../Layout/Alert';\r\n\r\nimport {\r\n  Button,\r\n  Badge,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label\r\n} from 'reactstrap';\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport\r\n} from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nconst { SearchBar } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst pagination = paginationFactory({\r\n  page: 1,\r\n  alwaysShowAllBtns: true,\r\n  showTotal: true,\r\n  withFirstAndLast: false,\r\n  sizePerPageRenderer: ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <div className='dataTables_length' id='datatable-basic_length'>\r\n      <select\r\n        name='datatable-basic_length'\r\n        aria-controls='datatable-basic'\r\n        className='form-control form-control-sm'\r\n        style={{ width: '30%' }}\r\n        onChange={e => onSizePerPageChange(e.target.value)}\r\n      >\r\n        <option value='10'>10</option>\r\n        <option value='25'>25</option>\r\n        <option value='50'>50</option>\r\n        <option value='100'>100</option>\r\n      </select>\r\n    </div>\r\n  )\r\n});\r\n\r\nconst statusFormatter = cell => {\r\n  if (cell === true) {\r\n    return <Badge color='success'>Active</Badge>;\r\n  } else if (cell === false) {\r\n    return <Badge color='secondary'>Inactive</Badge>;\r\n  } else {\r\n    return <Badge color='dark'>N/A</Badge>;\r\n  }\r\n};\r\n\r\nconst Users = ({\r\n  getEmployees,\r\n  markEmployeeInactive,\r\n  employees: { employees, loading }\r\n}) => {\r\n  useEffect(() => {\r\n    getEmployees();\r\n  }, [getEmployees]);\r\n\r\n  const actionFormatter = cell => {\r\n    return (\r\n      <UncontrolledDropdown>\r\n        <DropdownToggle\r\n          className='btn-icon-only text-light'\r\n          color=''\r\n          role='button'\r\n          size='sm'\r\n        >\r\n          <i className='fas fa-ellipsis-v' />\r\n        </DropdownToggle>\r\n        <DropdownMenu className='dropdown-menu-arrow' right>\r\n          <DropdownItem tag={Link} to={`/users/${cell}/view`}>\r\n            View User\r\n          </DropdownItem>\r\n          <DropdownItem tag={Link} to={`/users/${cell}/edit`}>\r\n            Edit User\r\n          </DropdownItem>\r\n          <DropdownItem\r\n            onClick={async () => {\r\n              await markEmployeeInactive(cell);\r\n              getEmployees();\r\n            }}\r\n          >\r\n            Toggle User Active\r\n          </DropdownItem>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n    );\r\n  };\r\n\r\n  const nameFormatter = cell => {\r\n    if (cell === undefined) {\r\n      return <span></span>;\r\n    } else {\r\n      return (\r\n        <span>\r\n          {cell.first} {cell.last}\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      dataField: 'name',\r\n      text: 'Name',\r\n      formatter: nameFormatter\r\n    },\r\n    {\r\n      dataField: 'email',\r\n      text: 'Email/Username'\r\n    },\r\n    {\r\n      dataField: 'role',\r\n      text: 'Role'\r\n    },\r\n    {\r\n      dataField: 'isActive',\r\n      text: 'Status',\r\n      formatter: statusFormatter\r\n    },\r\n    {\r\n      dataField: '_id',\r\n      text: 'Actions',\r\n      formatter: actionFormatter\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='users' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/'>\r\n                          <i className='fas fa-home' />\r\n                        </a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/dashboard'>Dashboard</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <a href='/users'>Users</a>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container className='mgn-ng-top-60'>\r\n          <div className='card'>\r\n            <div className='card-header'>\r\n              <div className='row align-items-center'>\r\n                <div className='col-8'>\r\n                  <h3 className='mb-0'>Users </h3>\r\n                </div>\r\n                <div className='col-4 text-right'>\r\n                  <Link className='float-right btn btn-primary' to='/users/add'>\r\n                    <span className='btn-inner--icon'>\r\n                      <i className='fas fa-user-plus'></i>\r\n                    </span>{' '}\r\n                    <span className='btn-inner--text'>Add User</span>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='card-body'>\r\n              {loading ? (\r\n                <Fragment>\r\n                  <div className='text-center'>\r\n                    <h4>Locating Users...</h4>\r\n                    <SpinnerCircular\r\n                      size={54}\r\n                      thickness={180}\r\n                      speed={100}\r\n                      color='rgba(57, 125, 172, 1)'\r\n                      secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                    />\r\n                  </div>\r\n                </Fragment>\r\n              ) : (\r\n                <ToolkitProvider\r\n                  data={employees}\r\n                  keyField='_id'\r\n                  columns={columns}\r\n                  search\r\n                  exportCSV\r\n                >\r\n                  {props => (\r\n                    <div\r\n                      className='py-4 table-responsive'\r\n                      style={{ padding: '25px' }}\r\n                    >\r\n                      <div id='datatable-basic_filter' className='px-4 pb-1'>\r\n                        <Row>\r\n                          <Col md='6'>\r\n                            <ExportCSVButton\r\n                              className='buttons-copy buttons-html5 btn-sm'\r\n                              {...props.csvProps}\r\n                            >\r\n                              <i className='ni ni-align-left-2'></i> Export CSV\r\n                            </ExportCSVButton>\r\n                          </Col>\r\n                          <Col md={{ size: 'auto', offset: 3 }}>\r\n                            <SearchBar\r\n                              className='form-control-sm'\r\n                              placeholder='Search Users'\r\n                              {...props.searchProps}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n\r\n                      <BootstrapTable\r\n                        {...props.baseProps}\r\n                        bootstrap4={true}\r\n                        pagination={pagination}\r\n                        bordered={false}\r\n                        wrapperClasses='table-responsive mh-330'\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </ToolkitProvider>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nUsers.propTypes = {\r\n  getEmployees: PropTypes.func.isRequired,\r\n  markEmployeeInactive: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  employees: state.employee\r\n});\r\n\r\nexport default connect(mapStateToProps, { getEmployees, markEmployeeInactive })(\r\n  Users\r\n);\r\n",["260","261"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\CustomManager.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\stripe\\StripeCallback.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\stripe.js",["262","263","264","265","266","267"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Settings.js",["268","269","270","271","272","273","274","275","276","277"],"import React, { Fragment, useState, useEffect, useRef } from 'react';\r\n\r\nimport stripepic from '../../img/stripe/stripe-pic.png';\r\n\r\nimport classnames from 'classnames';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Alert from '../Layout/Alert';\r\n\r\nimport emailExample from '../../img/emails/Example.JPG';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport {\r\n  updateAccountEmailSettings,\r\n  updateAccountEmailReadings,\r\n  getEmailSettings,\r\n  getGlobalChecklist,\r\n  updateGlobalChecklist,\r\n  addItemGlobalChecklist\r\n} from '../../actions/customer';\r\n\r\nimport {\r\n  createConnectAccount,\r\n  getAccountBalance,\r\n  createProduct\r\n} from '../../actions/stripe';\r\n\r\nimport {\r\n  updateBusinessInfo,\r\n  getBusinessInfo,\r\n  updateMyInfo,\r\n  updateMyPassword\r\n} from '../../actions/user';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  Badge,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  CardText,\r\n  CardTitle,\r\n  ListGroup,\r\n  ListGroupItem\r\n} from 'reactstrap';\r\n\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { SpinnerCircular } from 'spinners-react';\r\nimport ImageUploader from 'react-images-upload';\r\n\r\nimport axios from 'axios';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\n\r\nconst Settings = ({\r\n  updateAccountEmailSettings,\r\n  updateAccountEmailReadings,\r\n  updateBusinessInfo,\r\n  getBusinessInfo,\r\n  getEmailSettings,\r\n  updateMyInfo,\r\n  updateMyPassword,\r\n  createConnectAccount,\r\n  getAccountBalance,\r\n  createProduct,\r\n  match,\r\n  getGlobalChecklist,\r\n  updateGlobalChecklist,\r\n  addItemGlobalChecklist,\r\n  checklist,\r\n  businessInfo: { businessInfo, emailSettings, loading, emailLoading },\r\n  auth: { user, isAuthenticated }\r\n}) => {\r\n  useEffect(() => {\r\n    if (\r\n      user &&\r\n      isAuthenticated &&\r\n      user.stripe_seller &&\r\n      user.stripe_seller.charges_enabled\r\n    ) {\r\n      getAccountBalance();\r\n    }\r\n  }, [user, isAuthenticated, getAccountBalance]);\r\n\r\n  const [itemList, updateItemList] = useState(null);\r\n  const [itemListLoading, setItemListLoading] = useState(false);\r\n\r\n  const [addItemModal, setAddItemModal] = useState({\r\n    isOpen: false,\r\n    isLoading: false\r\n  });\r\n\r\n  const toggleAddModal = () => {\r\n    setAddItemModal({ ...addItemModal, isOpen: !addItemModal.isOpen });\r\n  };\r\n\r\n  const [deleteModal, setDeleteModal] = useState({\r\n    isOpen: false,\r\n    active: null,\r\n    isLoading: false\r\n  });\r\n\r\n  const deleteModalToggle = itemId => {\r\n    setDeleteModal({\r\n      ...deleteModal,\r\n      isOpen: !deleteModal.isOpen,\r\n      active: itemId\r\n    });\r\n  };\r\n\r\n  const deleteItemHandler = async () => {\r\n    setDeleteModal({ ...deleteModal, isLoading: true });\r\n    let newList = [...itemList];\r\n\r\n    newList.splice(\r\n      itemList.findIndex(item => item._id === deleteModal.active),\r\n      1\r\n    );\r\n\r\n    await updateItemList(newList);\r\n    await updateGlobalChecklist(newList);\r\n\r\n    setDeleteModal({ ...deleteModal, isLoading: false, isOpen: false });\r\n  };\r\n\r\n  const [editModal, setEditModal] = useState({\r\n    active: null,\r\n    activeContent: null,\r\n    isOpen: false,\r\n    isLoading: false\r\n  });\r\n\r\n  const toggleEditModal = (itemId, itemContent) => {\r\n    setEditModal({\r\n      ...editModal,\r\n      active: itemId,\r\n      activeContent: itemContent,\r\n      isOpen: !editModal.isOpen\r\n    });\r\n  };\r\n\r\n  const formRef = useRef();\r\n\r\n  const handleSubmit = () => {\r\n    if (formRef.current) {\r\n      formRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const addRef = useRef();\r\n\r\n  const handleAddItem = () => {\r\n    if (addRef.current) {\r\n      addRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const handleOnDragEnd = result => {\r\n    if (!result.destination) return;\r\n    const items = Array.from(itemList);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    updateItemList(items);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // if (itemListLoading === true) return;\r\n    updateItemList(checklist);\r\n    // console.log('updated');\r\n  }, [checklist]);\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      await getGlobalChecklist();\r\n    }\r\n    getData();\r\n  }, [getGlobalChecklist]);\r\n\r\n  const onSaveHandler = async () => {\r\n    setItemListLoading(true);\r\n    await updateGlobalChecklist(itemList);\r\n    await getGlobalChecklist();\r\n    setItemListLoading(false);\r\n  };\r\n\r\n  const [activeTab, setActiveTab] = useState('1');\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const toggle = tab => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n\r\n  const emailRef = useRef();\r\n\r\n  const handleEmailSubmit = () => {\r\n    if (emailRef.current) {\r\n      emailRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const [logoState, setLogoState] = useState({ pictures: [] });\r\n\r\n  const onDrop = picture => {\r\n    setLogoState({\r\n      pictures: picture\r\n    });\r\n  };\r\n\r\n  const uploadLogo = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      };\r\n\r\n      let uploadPromises = logoState.pictures.map(image => {\r\n        let data = new FormData();\r\n        data.append('image', image, image.name);\r\n        return axios.post('/api/users/updateLogo', data, config);\r\n      });\r\n\r\n      await axios.all(uploadPromises);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const [infoProcessing, setInfoProcessing] = useState(null);\r\n\r\n  const lowercaseRegex = /(?=.*[a-z])/;\r\n  const uppercaseRegex = /(?=.*[A-X])/;\r\n  const numericRegex = /(?=.*[0-9])/;\r\n\r\n  const passSchema = Yup.object().shape({\r\n    currentPassword: Yup.string().required(\r\n      'Please enter your current password'\r\n    ),\r\n    newPassword: Yup.string()\r\n      .required('Please enter a new password')\r\n      .matches(lowercaseRegex, 'Password must contain lowercase letter')\r\n      .matches(uppercaseRegex, 'Password must contain uppercase letter')\r\n      .matches(numericRegex, 'Password must contain a number')\r\n      .min(8, 'Password must be at least 8 characters long'),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('newPassword')], 'Passwords do not match')\r\n      .required('Please confirm your password')\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (user && user.role !== 'Technician') {\r\n      getBusinessInfo();\r\n      getEmailSettings();\r\n    }\r\n  }, [getBusinessInfo, getEmailSettings, user]);\r\n\r\n  const [loadingStripe, setLoadingStripe] = useState(false);\r\n\r\n  const stripeSetupHandler = async () => {\r\n    setLoadingStripe(true);\r\n    const res = await createConnectAccount();\r\n    await createProduct();\r\n    setLoadingStripe(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Alert />\r\n      <Sidebar active='settings' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-12 col-12'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to='/account-settings'>Settings</Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              <div className='row align-items-center'>\r\n                <Col lg={{ size: 'auto' }}>\r\n                  <h3 className='mb-0'>Account Settings</h3>\r\n                </Col>\r\n              </div>\r\n            </CardHeader>\r\n            {user && isAuthenticated && (\r\n              <Fragment>\r\n                {user.role === 'Technician' ? (\r\n                  <CardBody>\r\n                    <Row>\r\n                      <Col>\r\n                        <Formik\r\n                          initialValues={{\r\n                            firstName: user.firstName ? user.firstName : '',\r\n                            lastName: user.lastName ? user.lastName : '',\r\n                            email: user.email ? user.email : ''\r\n                          }}\r\n                          onSubmit={async data => {\r\n                            updateMyInfo(data);\r\n                          }}\r\n                          render={({\r\n                            handleSubmit,\r\n                            handleChange,\r\n                            handleBlur,\r\n                            values\r\n                          }) => (\r\n                            <Fragment>\r\n                              <Form>\r\n                                <Row>\r\n                                  <Col>\r\n                                    <Row>\r\n                                      <Col>\r\n                                        <FormGroup>\r\n                                          <Label className='form-control-label'>\r\n                                            First Name:\r\n                                          </Label>\r\n                                          <Input\r\n                                            type='text'\r\n                                            name='firstName'\r\n                                            placeholder='John'\r\n                                            value={values.firstName}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                          />\r\n                                        </FormGroup>\r\n                                      </Col>\r\n                                      <Col>\r\n                                        <FormGroup>\r\n                                          <Label className='form-control-label'>\r\n                                            Last Name:\r\n                                          </Label>\r\n                                          <Input\r\n                                            type='text'\r\n                                            placeholder='Doe'\r\n                                            name='lastName'\r\n                                            value={values.lastName}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                          />\r\n                                        </FormGroup>\r\n                                      </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                      <Col>\r\n                                        <FormGroup>\r\n                                          <Label className='form-control-label'>\r\n                                            Email:\r\n                                          </Label>\r\n                                          <Input\r\n                                            type='text'\r\n                                            name='email'\r\n                                            placeholder='john.doe@example.com'\r\n                                            value={values.email}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                          />\r\n                                          <small>\r\n                                            If email is changed, the email\r\n                                            linked to your account won't be\r\n                                            updated until you confirm it. We\r\n                                            will send a confirmation email to\r\n                                            your currently linked email account.\r\n                                          </small>\r\n                                        </FormGroup>\r\n                                      </Col>\r\n                                    </Row>\r\n                                  </Col>\r\n                                </Row>\r\n                                <Button\r\n                                  className='btn-icon'\r\n                                  color='success'\r\n                                  type='submit'\r\n                                  onClick={handleSubmit}\r\n                                  block\r\n                                >\r\n                                  <span className='btn-inner--icon'>\r\n                                    <i className='fas fa-save'></i>\r\n                                  </span>\r\n                                  {infoProcessing ? (\r\n                                    <span className='btn-inner--text'>\r\n                                      <SpinnerCircular\r\n                                        size={24}\r\n                                        thickness={180}\r\n                                        speed={100}\r\n                                        color='rgba(57, 125, 172, 1)'\r\n                                        secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                      />{' '}\r\n                                      Processing...\r\n                                    </span>\r\n                                  ) : (\r\n                                    <span className='btn-inner--text'>\r\n                                      Save Changes\r\n                                    </span>\r\n                                  )}\r\n                                </Button>\r\n                              </Form>\r\n                            </Fragment>\r\n                          )}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                      <Col>\r\n                        <h3>Change Password:</h3>\r\n                        <Formik\r\n                          initialValues={{\r\n                            currentPassword: '',\r\n                            newPassword: '',\r\n                            confirmPassword: ''\r\n                          }}\r\n                          onSubmit={data => {\r\n                            updateMyPassword(data);\r\n                          }}\r\n                          validationSchema={passSchema}\r\n                          render={({\r\n                            handleSubmit,\r\n                            handleChange,\r\n                            handleBlur,\r\n                            values,\r\n                            errors,\r\n                            touched\r\n                          }) => (\r\n                            <Form onSubmit={handleSubmit}>\r\n                              <Row>\r\n                                <Col>\r\n                                  <FormGroup>\r\n                                    <Input\r\n                                      type='password'\r\n                                      name='currentPassword'\r\n                                      value={values.currentPassword}\r\n                                      onChange={handleChange}\r\n                                      onBlur={handleBlur}\r\n                                      placeholder='Current Password'\r\n                                    />\r\n                                    {errors.currentPassword &&\r\n                                      touched.currentPassword && (\r\n                                        <p className='color-red'>\r\n                                          {errors.currentPassword}\r\n                                        </p>\r\n                                      )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                                <Col>\r\n                                  <FormGroup>\r\n                                    <Input\r\n                                      type='password'\r\n                                      name='newPassword'\r\n                                      value={values.newPassword}\r\n                                      onChange={handleChange}\r\n                                      onBlur={handleBlur}\r\n                                      placeholder='New Password'\r\n                                    />\r\n                                    {errors.newPassword &&\r\n                                      touched.newPassword && (\r\n                                        <p className='color-red'>\r\n                                          {errors.newPassword}\r\n                                        </p>\r\n                                      )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                                <Col>\r\n                                  <FormGroup>\r\n                                    <Input\r\n                                      type='password'\r\n                                      name='confirmPassword'\r\n                                      value={values.confirmPassword}\r\n                                      onChange={handleChange}\r\n                                      onBlur={handleBlur}\r\n                                      placeholder='Confirm Password'\r\n                                    />\r\n                                    {errors.confirmPassword &&\r\n                                      touched.confirmPassword && (\r\n                                        <p className='color-red'>\r\n                                          {errors.confirmPassword}\r\n                                        </p>\r\n                                      )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </Row>\r\n                              <Button\r\n                                className='btn-icon'\r\n                                color='primary'\r\n                                type='submit'\r\n                                onClick={handleSubmit}\r\n                                block\r\n                              >\r\n                                <span className='btn-inner--icon'>\r\n                                  <i className='fas fa-save'></i>\r\n                                </span>\r\n                                {infoProcessing ? (\r\n                                  <span className='btn-inner--text'>\r\n                                    <SpinnerCircular\r\n                                      size={24}\r\n                                      thickness={180}\r\n                                      speed={100}\r\n                                      color='rgba(57, 125, 172, 1)'\r\n                                      secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                    />{' '}\r\n                                    Processing...\r\n                                  </span>\r\n                                ) : (\r\n                                  <span className='btn-inner--text'>\r\n                                    Change Password\r\n                                  </span>\r\n                                )}\r\n                              </Button>\r\n                            </Form>\r\n                          )}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                  </CardBody>\r\n                ) : (\r\n                  <Fragment>\r\n                    <CardBody>\r\n                      <div>\r\n                        <Nav tabs>\r\n                          <NavItem>\r\n                            <NavLink\r\n                              className={classnames({\r\n                                active: activeTab === '1'\r\n                              })}\r\n                              onClick={() => {\r\n                                toggle('1');\r\n                              }}\r\n                            >\r\n                              Business Information\r\n                            </NavLink>\r\n                          </NavItem>\r\n                          <NavItem>\r\n                            <NavLink\r\n                              className={classnames({\r\n                                active: activeTab === '5'\r\n                              })}\r\n                              onClick={() => {\r\n                                toggle('5');\r\n                              }}\r\n                            >\r\n                              My Information\r\n                            </NavLink>\r\n                          </NavItem>\r\n\r\n                          <NavItem>\r\n                            <NavLink\r\n                              className={classnames({\r\n                                active: activeTab === '4'\r\n                              })}\r\n                              onClick={() => {\r\n                                toggle('4');\r\n                              }}\r\n                            >\r\n                              Payment Information\r\n                            </NavLink>\r\n                          </NavItem>\r\n\r\n                          <NavItem>\r\n                            <NavLink\r\n                              className={classnames({\r\n                                active: activeTab === '2'\r\n                              })}\r\n                              onClick={() => {\r\n                                toggle('2');\r\n                              }}\r\n                            >\r\n                              Email Settings\r\n                            </NavLink>\r\n                          </NavItem>\r\n\r\n                          <NavItem>\r\n                            <NavLink\r\n                              className={classnames({\r\n                                active: activeTab === '3'\r\n                              })}\r\n                              onClick={() => {\r\n                                toggle('3');\r\n                              }}\r\n                            >\r\n                              Email Chemical Fields\r\n                            </NavLink>\r\n                          </NavItem>\r\n\r\n                          <NavItem>\r\n                            <NavLink\r\n                              className={classnames({\r\n                                active: activeTab === '6'\r\n                              })}\r\n                              onClick={() => {\r\n                                toggle('6');\r\n                              }}\r\n                            >\r\n                              Default Service Checklist\r\n                            </NavLink>\r\n                          </NavItem>\r\n                        </Nav>\r\n                      </div>\r\n\r\n                      <TabContent activeTab={activeTab}>\r\n                        <TabPane tabId='1'>\r\n                          <Row>\r\n                            <Col sm='12'>\r\n                              {!loading && businessInfo ? (\r\n                                <Formik\r\n                                  initialValues={{\r\n                                    businessName: businessInfo\r\n                                      ? businessInfo.businessName\r\n                                      : '',\r\n                                    businessPhone: businessInfo\r\n                                      ? businessInfo.businessPhone\r\n                                      : '',\r\n                                    businessEmail: businessInfo\r\n                                      ? businessInfo.businessEmail\r\n                                      : '',\r\n                                    businessAddress:\r\n                                      businessInfo.businessAddress\r\n                                  }}\r\n                                  onSubmit={async data => {\r\n                                    setInfoProcessing(true);\r\n                                    await uploadLogo();\r\n                                    await updateBusinessInfo(data);\r\n                                    // await getBusinessInfo();\r\n                                    setInfoProcessing(false);\r\n                                  }}\r\n                                  render={({\r\n                                    handleSubmit,\r\n                                    handleChange,\r\n                                    handleBlur,\r\n                                    values\r\n                                  }) => (\r\n                                    <Container>\r\n                                      <Form>\r\n                                        <br />\r\n                                        <h6 className='heading-small text-muted mb-4'>\r\n                                          Business Settings:\r\n                                        </h6>\r\n\r\n                                        <div className='pl-lg-4'>\r\n                                          <Row>\r\n                                            <Col>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Business Logo:\r\n                                                </Label>{' '}\r\n                                                <br />\r\n                                                {businessInfo.businessLogo && (\r\n                                                  <img\r\n                                                    width='50%'\r\n                                                    src={\r\n                                                      businessInfo.businessLogo\r\n                                                    }\r\n                                                    alt={\r\n                                                      businessInfo.businessName\r\n                                                    }\r\n                                                  />\r\n                                                )}\r\n                                                <ImageUploader\r\n                                                  withIcon={true}\r\n                                                  buttonText='Choose Image'\r\n                                                  onChange={onDrop}\r\n                                                  imgExtension={[\r\n                                                    '.jpg',\r\n                                                    '.gif',\r\n                                                    '.png',\r\n                                                    '.gif'\r\n                                                  ]}\r\n                                                  maxFileSize={5242880}\r\n                                                  withPreview={true}\r\n                                                  singleImage={true}\r\n                                                />\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                            <Col>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Business Name:\r\n                                                </Label>\r\n                                                <Input\r\n                                                  type='text'\r\n                                                  name='businessName'\r\n                                                  value={values.businessName}\r\n                                                  onChange={handleChange}\r\n                                                  onBlur={handleBlur}\r\n                                                />\r\n                                              </FormGroup>\r\n\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Business Phone:\r\n                                                </Label>\r\n                                                <Input\r\n                                                  type='tel'\r\n                                                  name='businessPhone'\r\n                                                  value={values.businessPhone}\r\n                                                  onChange={handleChange}\r\n                                                  onBlur={handleBlur}\r\n                                                />\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                          </Row>\r\n                                          <Row>\r\n                                            <Col>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Business Email:\r\n                                                </Label>\r\n                                                <Input\r\n                                                  type='tel'\r\n                                                  name='businessEmail'\r\n                                                  value={values.businessEmail}\r\n                                                  onChange={handleChange}\r\n                                                  onBlur={handleBlur}\r\n                                                />\r\n                                              </FormGroup>\r\n\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Business Address:\r\n                                                </Label>\r\n                                                <Input\r\n                                                  type='tel'\r\n                                                  name='businessAddress'\r\n                                                  value={values.businessAddress}\r\n                                                  onChange={handleChange}\r\n                                                  onBlur={handleBlur}\r\n                                                />\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                          </Row>\r\n                                        </div>\r\n                                      </Form>\r\n                                      <Button\r\n                                        className='btn-icon'\r\n                                        color='success'\r\n                                        type='submit'\r\n                                        onClick={handleSubmit}\r\n                                        block\r\n                                      >\r\n                                        <span className='btn-inner--icon'>\r\n                                          <i className='fas fa-save'></i>\r\n                                        </span>\r\n                                        {infoProcessing ? (\r\n                                          <span className='btn-inner--text'>\r\n                                            <SpinnerCircular\r\n                                              size={24}\r\n                                              thickness={180}\r\n                                              speed={100}\r\n                                              color='rgba(57, 125, 172, 1)'\r\n                                              secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                            />{' '}\r\n                                            Processing...\r\n                                          </span>\r\n                                        ) : (\r\n                                          <span className='btn-inner--text'>\r\n                                            Save Changes\r\n                                          </span>\r\n                                        )}\r\n                                      </Button>\r\n                                    </Container>\r\n                                  )}\r\n                                />\r\n                              ) : (\r\n                                <Container>\r\n                                  <div className='text-center mgn-top-50'>\r\n                                    <Row>\r\n                                      <Col sm='12'>\r\n                                        <SpinnerCircular\r\n                                          size={40}\r\n                                          thickness={180}\r\n                                          speed={100}\r\n                                          color='rgba(57, 125, 172, 1)'\r\n                                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                        />{' '}\r\n                                      </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                      <Col sm='12'>\r\n                                        <h4>Loading Data...</h4>\r\n                                      </Col>\r\n                                    </Row>\r\n                                  </div>\r\n                                </Container>\r\n                              )}\r\n                            </Col>\r\n                          </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId='2'>\r\n                          <Row>\r\n                            {!emailLoading && emailSettings ? (\r\n                              <Formik\r\n                                initialValues={{\r\n                                  emailSendWorkOrder:\r\n                                    emailSettings.emailSendWorkOrder,\r\n                                  emailSendUnable:\r\n                                    emailSettings.emailSendUnable,\r\n                                  emailSendSummary:\r\n                                    emailSettings.emailSendSummary,\r\n                                  emailSendChecklist:\r\n                                    emailSettings.emailSendChecklist,\r\n                                  emailSendReadings:\r\n                                    emailSettings.emailSendReadings,\r\n                                  emailShowReadingNumbers:\r\n                                    emailSettings.emailShowReadingNumbers,\r\n                                  emailShowChemicalsUsed:\r\n                                    emailSettings.emailShowChemicalsUsed,\r\n                                  emailSendTechnician:\r\n                                    emailSettings.emailShowTechnician\r\n                                }}\r\n                                onSubmit={async data => {\r\n                                  setIsProcessing(true);\r\n\r\n                                  await updateAccountEmailSettings(data);\r\n                                  setIsProcessing(false);\r\n                                }}\r\n                                innerRef={emailRef}\r\n                                render={({\r\n                                  handleSubmit,\r\n                                  handleChange,\r\n                                  handleBlur,\r\n                                  values\r\n                                }) => (\r\n                                  <Container>\r\n                                    <Form onSubmit={handleSubmit}>\r\n                                      <br />\r\n                                      <h6 className='heading-small text-muted mb-4'>\r\n                                        Service Emails:\r\n                                      </h6>\r\n\r\n                                      <div className='pl-lg-4'>\r\n                                        <Row>\r\n                                          <Col>\r\n                                            {' '}\r\n                                            <FormGroup>\r\n                                              <Label className='form-control-label'>\r\n                                                Send Email When Work Order\r\n                                                Completed? <br />\r\n                                                <small>\r\n                                                  <em>\r\n                                                    Default: Enabled - If\r\n                                                    enabled, a email is sent to\r\n                                                    the customer any time a work\r\n                                                    order is marked \"Completed\".\r\n                                                    An email will NOT be sent if\r\n                                                    a work order is marked as\r\n                                                    \"Closed\"\r\n                                                  </em>\r\n                                                </small>\r\n                                              </Label>\r\n\r\n                                              <br />\r\n                                              <Label className='custom-toggle'>\r\n                                                <Input\r\n                                                  type='checkbox'\r\n                                                  name='emailSendWorkOrder'\r\n                                                  onChange={handleChange}\r\n                                                  checked={\r\n                                                    values.emailSendWorkOrder\r\n                                                  }\r\n                                                />\r\n                                                <span\r\n                                                  className='custom-toggle-slider rounded-circle'\r\n                                                  data-label-off='No'\r\n                                                  data-label-on='Yes'\r\n                                                ></span>\r\n                                              </Label>\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                              <Label className='form-control-label'>\r\n                                                Send Email If Unable To Service?{' '}\r\n                                                <br />\r\n                                                <small>\r\n                                                  <em>\r\n                                                    Default: Enabled - If\r\n                                                    enabled, a email is sent to\r\n                                                    the customer any time a\r\n                                                    technician marks a customer\r\n                                                    as \"Unable To Service\"\r\n                                                    during their route. This\r\n                                                    will also send the customer\r\n                                                    the reason for being unable\r\n                                                    to service the pool that the\r\n                                                    technician enters when they\r\n                                                    mark it as such.\r\n                                                  </em>\r\n                                                </small>\r\n                                              </Label>\r\n\r\n                                              <br />\r\n                                              <Label className='custom-toggle'>\r\n                                                <Input\r\n                                                  type='checkbox'\r\n                                                  name='emailSendUnable'\r\n                                                  onChange={handleChange}\r\n                                                  checked={\r\n                                                    values.emailSendUnable\r\n                                                  }\r\n                                                />\r\n                                                <span\r\n                                                  className='custom-toggle-slider rounded-circle'\r\n                                                  data-label-off='No'\r\n                                                  data-label-on='Yes'\r\n                                                ></span>\r\n                                              </Label>\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                              <Label className='form-control-label'>\r\n                                                Send Service Summary to\r\n                                                Customer? <br />\r\n                                                <small>\r\n                                                  <em>\r\n                                                    Default: Enabled - If\r\n                                                    enabled, a email summary\r\n                                                    will be emailed to the\r\n                                                    customer each time a\r\n                                                    technician logs a service\r\n                                                    visit for that customer.\r\n                                                  </em>\r\n                                                </small>\r\n                                              </Label>\r\n\r\n                                              <br />\r\n                                              <Label className='custom-toggle'>\r\n                                                <Input\r\n                                                  type='checkbox'\r\n                                                  name='emailSendSummary'\r\n                                                  onChange={handleChange}\r\n                                                  checked={\r\n                                                    values.emailSendSummary\r\n                                                  }\r\n                                                />\r\n                                                <span\r\n                                                  className='custom-toggle-slider rounded-circle'\r\n                                                  data-label-off='No'\r\n                                                  data-label-on='Yes'\r\n                                                ></span>\r\n                                              </Label>\r\n                                              <div\r\n                                                style={{\r\n                                                  width: 10,\r\n                                                  height: 10,\r\n                                                  backgroundColor: 'red'\r\n                                                }}\r\n                                              ></div>\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                              <Label className='form-control-label'>\r\n                                                Send Technician Name? <br />\r\n                                                <small>\r\n                                                  <em>\r\n                                                    Default: Enabled - If\r\n                                                    enabled, will attach\r\n                                                    technicians name to email\r\n                                                    sent to customer.\r\n                                                  </em>\r\n                                                </small>\r\n                                              </Label>\r\n\r\n                                              <br />\r\n                                              <Label className='custom-toggle'>\r\n                                                <Input\r\n                                                  type='checkbox'\r\n                                                  name='emailSendTechnician'\r\n                                                  onChange={handleChange}\r\n                                                  checked={\r\n                                                    values.emailSendTechnician\r\n                                                  }\r\n                                                />\r\n                                                <span\r\n                                                  className='custom-toggle-slider rounded-circle'\r\n                                                  data-label-off='No'\r\n                                                  data-label-on='Yes'\r\n                                                ></span>\r\n                                              </Label>\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                              <Label className='form-control-label'>\r\n                                                Send Service Checklist?\r\n                                                <br />\r\n                                                <small>\r\n                                                  <em>\r\n                                                    Default: Enabled - This will\r\n                                                    attach a list of all\r\n                                                    completed services.\r\n                                                  </em>\r\n                                                </small>\r\n                                              </Label>\r\n                                              <br />\r\n                                              <Label className='custom-toggle'>\r\n                                                <Input\r\n                                                  type='checkbox'\r\n                                                  name='emailSendChecklist'\r\n                                                  onChange={handleChange}\r\n                                                  checked={\r\n                                                    values.emailSendChecklist\r\n                                                  }\r\n                                                />\r\n                                                <span\r\n                                                  className='custom-toggle-slider rounded-circle'\r\n                                                  data-label-off='No'\r\n                                                  data-label-on='Yes'\r\n                                                ></span>\r\n                                              </Label>\r\n                                              <div\r\n                                                style={{\r\n                                                  width: 10,\r\n                                                  height: 10,\r\n                                                  backgroundColor: 'orange'\r\n                                                }}\r\n                                              ></div>\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                              <Label className='form-control-label'>\r\n                                                Send Chemical Readings?\r\n                                                <br />\r\n                                                <small>\r\n                                                  <em>\r\n                                                    Default: Enabled - This will\r\n                                                    attach a list of chemical\r\n                                                    readings.\r\n                                                  </em>\r\n                                                </small>\r\n                                              </Label>\r\n                                              <br />\r\n                                              <Label className='custom-toggle'>\r\n                                                <Input\r\n                                                  type='checkbox'\r\n                                                  name='emailSendReadings'\r\n                                                  onChange={handleChange}\r\n                                                  checked={\r\n                                                    values.emailSendReadings\r\n                                                  }\r\n                                                />\r\n                                                <span\r\n                                                  className='custom-toggle-slider rounded-circle'\r\n                                                  data-label-off='No'\r\n                                                  data-label-on='Yes'\r\n                                                ></span>\r\n                                              </Label>\r\n                                              <div\r\n                                                style={{\r\n                                                  width: 10,\r\n                                                  height: 10,\r\n                                                  backgroundColor: 'dodgerblue'\r\n                                                }}\r\n                                              ></div>\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                              <Label className='form-control-label'>\r\n                                                Show Chemical Reading Numbers?\r\n                                                <br />\r\n                                                <small>\r\n                                                  <em>\r\n                                                    Default: Disabled - By\r\n                                                    default the chemical\r\n                                                    readings will be sent to the\r\n                                                    customer as \"Average\",\r\n                                                    \"Below Average\" or \"Above\r\n                                                    Average\". With this option\r\n                                                    enabled the exact reading\r\n                                                    numbers will be sent to the\r\n                                                    customer.\r\n                                                  </em>\r\n                                                </small>\r\n                                              </Label>\r\n                                              <br />\r\n                                              <Label className='custom-toggle'>\r\n                                                <Input\r\n                                                  type='checkbox'\r\n                                                  name='emailShowReadingNumbers'\r\n                                                  onChange={handleChange}\r\n                                                  checked={\r\n                                                    values.emailShowReadingNumbers\r\n                                                  }\r\n                                                />\r\n                                                <span\r\n                                                  className='custom-toggle-slider rounded-circle'\r\n                                                  data-label-off='No'\r\n                                                  data-label-on='Yes'\r\n                                                ></span>\r\n                                              </Label>\r\n                                              <div\r\n                                                style={{\r\n                                                  width: 10,\r\n                                                  height: 10,\r\n                                                  backgroundColor: 'dodgerblue'\r\n                                                }}\r\n                                              ></div>\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                              <Label className='form-control-label'>\r\n                                                Send Chemicals Used?\r\n                                                <br />\r\n                                                <small>\r\n                                                  <em>\r\n                                                    Default: Enabled - Sends a\r\n                                                    list of the chemicals added\r\n                                                    to the pool during service\r\n                                                    visit.\r\n                                                  </em>\r\n                                                </small>\r\n                                              </Label>\r\n                                              <br />\r\n                                              <Label className='custom-toggle'>\r\n                                                <Input\r\n                                                  type='checkbox'\r\n                                                  name='emailShowChemicalsUsed'\r\n                                                  onChange={handleChange}\r\n                                                  checked={\r\n                                                    values.emailShowChemicalsUsed\r\n                                                  }\r\n                                                />\r\n                                                <span\r\n                                                  className='custom-toggle-slider rounded-circle'\r\n                                                  data-label-off='No'\r\n                                                  data-label-on='Yes'\r\n                                                ></span>\r\n                                              </Label>\r\n                                              <div\r\n                                                style={{\r\n                                                  width: 10,\r\n                                                  height: 10,\r\n                                                  backgroundColor: 'purple'\r\n                                                }}\r\n                                              ></div>\r\n                                            </FormGroup>\r\n                                            <Button\r\n                                              className='btn-icon'\r\n                                              type='submit'\r\n                                              color='success'\r\n                                              onClick={handleSubmit}\r\n                                              block\r\n                                            >\r\n                                              <span className='btn-inner--icon'>\r\n                                                <i className='fas fa-save'></i>\r\n                                              </span>\r\n                                              {isProcessing ? (\r\n                                                <span className='btn-inner--text'>\r\n                                                  <SpinnerCircular\r\n                                                    size={24}\r\n                                                    thickness={180}\r\n                                                    speed={100}\r\n                                                    color='rgba(57, 125, 172, 1)'\r\n                                                    secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                                  />{' '}\r\n                                                  Processing...\r\n                                                </span>\r\n                                              ) : (\r\n                                                <span className='btn-inner--text'>\r\n                                                  Save Changes\r\n                                                </span>\r\n                                              )}\r\n                                            </Button>\r\n                                          </Col>\r\n                                          <Col>\r\n                                            <Card>\r\n                                              <CardBody className='text-center'>\r\n                                                <img src={emailExample} />\r\n                                              </CardBody>\r\n                                            </Card>\r\n                                          </Col>\r\n                                        </Row>\r\n                                      </div>\r\n                                    </Form>\r\n                                  </Container>\r\n                                )}\r\n                              />\r\n                            ) : (\r\n                              <Container>\r\n                                <div className='text-center mgn-top-50'>\r\n                                  <Row>\r\n                                    <Col sm='12'>\r\n                                      <SpinnerCircular\r\n                                        size={40}\r\n                                        thickness={180}\r\n                                        speed={100}\r\n                                        color='rgba(57, 125, 172, 1)'\r\n                                        secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                      />{' '}\r\n                                    </Col>\r\n                                  </Row>\r\n                                  <Row>\r\n                                    <Col sm='12'>\r\n                                      <h4>Loading Data...</h4>\r\n                                    </Col>\r\n                                  </Row>\r\n                                </div>\r\n                              </Container>\r\n                            )}\r\n                          </Row>\r\n                        </TabPane>\r\n\r\n                        <TabPane tabId='3'>\r\n                          <Row>\r\n                            <Col sm='12'>\r\n                              {!emailLoading && emailSettings ? (\r\n                                <Formik\r\n                                  initialValues={{\r\n                                    freeChlorine:\r\n                                      emailSettings.emailSendFreeChlorine,\r\n                                    pHlevel: emailSettings.emailSendpHlevel,\r\n                                    alkalinity:\r\n                                      emailSettings.emailSendAlkalinity,\r\n                                    conditionerLevel:\r\n                                      emailSettings.emailSendConditioner,\r\n                                    hardness: emailSettings.emailSendHardness,\r\n                                    phosphateLevel:\r\n                                      emailSettings.emailSendPhosphateLevel,\r\n                                    saltLevel: emailSettings.emailSendSaltLevel\r\n                                  }}\r\n                                  onSubmit={async data => {\r\n                                    setIsProcessing(true);\r\n                                    await updateAccountEmailReadings(data);\r\n\r\n                                    setIsProcessing(false);\r\n                                  }}\r\n                                  render={({\r\n                                    handleSubmit,\r\n                                    handleChange,\r\n                                    handleBlur,\r\n                                    values\r\n                                  }) => (\r\n                                    <Container>\r\n                                      <Form>\r\n                                        <br />\r\n                                        <h6 className='heading-small text-muted mb-4'>\r\n                                          Email Chemical Field Settings: <br />\r\n                                          <small>\r\n                                            If the \"Send Chemical Readings?\"\r\n                                            option is enabled you can choose\r\n                                            what readings to send the customer\r\n                                            here.\r\n                                          </small>\r\n                                        </h6>\r\n\r\n                                        <div className='pl-lg-4'>\r\n                                          <Row>\r\n                                            <Col sm='6'>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Send Free Chlorine Level?\r\n                                                </Label>\r\n                                                <br />\r\n                                                <Label className='custom-toggle'>\r\n                                                  <Input\r\n                                                    type='checkbox'\r\n                                                    name='freeChlorine'\r\n                                                    onChange={handleChange}\r\n                                                    checked={\r\n                                                      values.freeChlorine\r\n                                                    }\r\n                                                  />\r\n                                                  <span\r\n                                                    className='custom-toggle-slider rounded-circle'\r\n                                                    data-label-off='No'\r\n                                                    data-label-on='Yes'\r\n                                                  ></span>\r\n                                                </Label>\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                            <Col sm='6'>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Send pH Level?\r\n                                                </Label>\r\n                                                <br />\r\n                                                <Label className='custom-toggle'>\r\n                                                  <Input\r\n                                                    type='checkbox'\r\n                                                    name='pHlevel'\r\n                                                    onChange={handleChange}\r\n                                                    checked={values.pHlevel}\r\n                                                  />\r\n                                                  <span\r\n                                                    className='custom-toggle-slider rounded-circle'\r\n                                                    data-label-off='No'\r\n                                                    data-label-on='Yes'\r\n                                                  ></span>\r\n                                                </Label>\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                          </Row>\r\n\r\n                                          <Row>\r\n                                            <Col sm='6'>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Send Alkalinity Level?\r\n                                                </Label>\r\n                                                <br />\r\n                                                <Label className='custom-toggle'>\r\n                                                  <Input\r\n                                                    type='checkbox'\r\n                                                    name='alkalinity'\r\n                                                    onChange={handleChange}\r\n                                                    checked={values.alkalinity}\r\n                                                  />\r\n                                                  <span\r\n                                                    className='custom-toggle-slider rounded-circle'\r\n                                                    data-label-off='No'\r\n                                                    data-label-on='Yes'\r\n                                                  ></span>\r\n                                                </Label>\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                            <Col sm='6'>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Send Conditioner Level?\r\n                                                </Label>\r\n                                                <br />\r\n                                                <Label className='custom-toggle'>\r\n                                                  <Input\r\n                                                    type='checkbox'\r\n                                                    name='conditionerLevel'\r\n                                                    onChange={handleChange}\r\n                                                    checked={\r\n                                                      values.conditionerLevel\r\n                                                    }\r\n                                                  />\r\n                                                  <span\r\n                                                    className='custom-toggle-slider rounded-circle'\r\n                                                    data-label-off='No'\r\n                                                    data-label-on='Yes'\r\n                                                  ></span>\r\n                                                </Label>\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                          </Row>\r\n\r\n                                          <Row>\r\n                                            <Col sm='6'>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Send Hardness Level?\r\n                                                </Label>\r\n                                                <br />\r\n                                                <Label className='custom-toggle'>\r\n                                                  <Input\r\n                                                    type='checkbox'\r\n                                                    name='hardness'\r\n                                                    onChange={handleChange}\r\n                                                    checked={values.hardness}\r\n                                                  />\r\n                                                  <span\r\n                                                    className='custom-toggle-slider rounded-circle'\r\n                                                    data-label-off='No'\r\n                                                    data-label-on='Yes'\r\n                                                  ></span>\r\n                                                </Label>\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                            <Col sm='6'>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Send Phosphate Level?\r\n                                                </Label>\r\n                                                <br />\r\n                                                <Label className='custom-toggle'>\r\n                                                  <Input\r\n                                                    type='checkbox'\r\n                                                    name='phosphateLevel'\r\n                                                    onChange={handleChange}\r\n                                                    checked={\r\n                                                      values.phosphateLevel\r\n                                                    }\r\n                                                  />\r\n                                                  <span\r\n                                                    className='custom-toggle-slider rounded-circle'\r\n                                                    data-label-off='No'\r\n                                                    data-label-on='Yes'\r\n                                                  ></span>\r\n                                                </Label>\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                          </Row>\r\n\r\n                                          <Row>\r\n                                            <Col sm='6'>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Send Salt Level?\r\n                                                </Label>\r\n                                                <br />\r\n                                                <Label className='custom-toggle'>\r\n                                                  <Input\r\n                                                    type='checkbox'\r\n                                                    name='saltLevel'\r\n                                                    onChange={handleChange}\r\n                                                    checked={values.saltLevel}\r\n                                                  />\r\n                                                  <span\r\n                                                    className='custom-toggle-slider rounded-circle'\r\n                                                    data-label-off='No'\r\n                                                    data-label-on='Yes'\r\n                                                  ></span>\r\n                                                </Label>\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                          </Row>\r\n                                          <Button\r\n                                            className='btn-icon'\r\n                                            type='submit'\r\n                                            color='success'\r\n                                            onClick={handleSubmit}\r\n                                            block\r\n                                          >\r\n                                            <span className='btn-inner--icon'>\r\n                                              <i className='fas fa-save'></i>\r\n                                            </span>\r\n                                            {isProcessing ? (\r\n                                              <span className='btn-inner--text'>\r\n                                                <SpinnerCircular\r\n                                                  size={24}\r\n                                                  thickness={180}\r\n                                                  speed={100}\r\n                                                  color='rgba(57, 125, 172, 1)'\r\n                                                  secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                                />{' '}\r\n                                                Processing...\r\n                                              </span>\r\n                                            ) : (\r\n                                              <span className='btn-inner--text'>\r\n                                                Save Changes\r\n                                              </span>\r\n                                            )}\r\n                                          </Button>\r\n                                        </div>\r\n                                      </Form>\r\n                                    </Container>\r\n                                  )}\r\n                                />\r\n                              ) : (\r\n                                <Container>\r\n                                  <div className='text-center mgn-top-50'>\r\n                                    <Row>\r\n                                      <Col sm='12'>\r\n                                        <SpinnerCircular\r\n                                          size={40}\r\n                                          thickness={180}\r\n                                          speed={100}\r\n                                          color='rgba(57, 125, 172, 1)'\r\n                                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                        />{' '}\r\n                                      </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                      <Col sm='12'>\r\n                                        <h4>Loading Data...</h4>\r\n                                      </Col>\r\n                                    </Row>\r\n                                  </div>\r\n                                </Container>\r\n                              )}\r\n                            </Col>\r\n                          </Row>\r\n                        </TabPane>\r\n\r\n                        <TabPane tabId='4'>\r\n                          <Container>\r\n                            <Row>\r\n                              {user &&\r\n                              isAuthenticated &&\r\n                              user.stripe_seller &&\r\n                              user.stripe_seller.charges_enabled ? (\r\n                                <Fragment>\r\n                                  <Col sm='12'>\r\n                                    <div className='text-center mgn-top-50'>\r\n                                      <i className='fas fa-check-circle fa-2x color-green'></i>\r\n                                      <h1>\r\n                                        <i className='fab fa-stripe fa-3x'></i>\r\n                                        <br />\r\n                                        Is Connected\r\n                                      </h1>\r\n                                      <p className='text-muted'>\r\n                                        You can now accept payments through\r\n                                        PoolPro360. To view account balance and\r\n                                        payout information, goto the\r\n                                        \"Payments/Billing\" page.\r\n                                      </p>\r\n                                    </div>\r\n                                  </Col>\r\n                                </Fragment>\r\n                              ) : (\r\n                                <Fragment>\r\n                                  <Col sm='7'>\r\n                                    <div className='text-center mgn-top-50'>\r\n                                      <h4>\r\n                                        Connect With Stripe to Accept Automatic\r\n                                        Payments\r\n                                      </h4>\r\n                                      <p>\r\n                                        PoolPro360 partners with stripe to\r\n                                        transfer payments directly to your bank\r\n                                        account.\r\n                                      </p>\r\n                                      <Button\r\n                                        disabled={loadingStripe}\r\n                                        onClick={stripeSetupHandler}\r\n                                        color='primary'\r\n                                      >\r\n                                        {loadingStripe ? (\r\n                                          <span>Processing...</span>\r\n                                        ) : (\r\n                                          <span>Setup Payouts</span>\r\n                                        )}\r\n                                      </Button>\r\n                                      <p className='text-muted mgn-top-10'>\r\n                                        <small>\r\n                                          You'll be redirected to Stripe to\r\n                                          complete the setup process.\r\n                                        </small>\r\n                                      </p>\r\n                                    </div>\r\n                                  </Col>\r\n                                  <Col sm='5'>\r\n                                    <img src={stripepic} alt='' />\r\n                                  </Col>\r\n                                </Fragment>\r\n                              )}\r\n                            </Row>\r\n                          </Container>\r\n                        </TabPane>\r\n\r\n                        <TabPane tabId='5'>\r\n                          <br />\r\n                          <Row>\r\n                            <Col>\r\n                              <Formik\r\n                                initialValues={{\r\n                                  firstName: user.firstName\r\n                                    ? user.firstName\r\n                                    : '',\r\n                                  lastName: user.lastName ? user.lastName : '',\r\n                                  email: user.email ? user.email : ''\r\n                                }}\r\n                                onSubmit={async data => {\r\n                                  updateMyInfo(data);\r\n                                }}\r\n                                render={({\r\n                                  handleSubmit,\r\n                                  handleChange,\r\n                                  handleBlur,\r\n                                  values\r\n                                }) => (\r\n                                  <Fragment>\r\n                                    <Form>\r\n                                      <Row>\r\n                                        <Col>\r\n                                          <Row>\r\n                                            <Col>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  First Name:\r\n                                                </Label>\r\n                                                <Input\r\n                                                  type='text'\r\n                                                  name='firstName'\r\n                                                  placeholder='John'\r\n                                                  value={values.firstName}\r\n                                                  onChange={handleChange}\r\n                                                  onBlur={handleBlur}\r\n                                                />\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                            <Col>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Last Name:\r\n                                                </Label>\r\n                                                <Input\r\n                                                  type='text'\r\n                                                  placeholder='Doe'\r\n                                                  name='lastName'\r\n                                                  value={values.lastName}\r\n                                                  onChange={handleChange}\r\n                                                  onBlur={handleBlur}\r\n                                                />\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                          </Row>\r\n                                          <Row>\r\n                                            <Col>\r\n                                              <FormGroup>\r\n                                                <Label className='form-control-label'>\r\n                                                  Email:\r\n                                                </Label>\r\n                                                <Input\r\n                                                  type='text'\r\n                                                  name='email'\r\n                                                  placeholder='john.doe@example.com'\r\n                                                  value={values.email}\r\n                                                  onChange={handleChange}\r\n                                                  onBlur={handleBlur}\r\n                                                />\r\n                                                <small>\r\n                                                  If email is changed, the email\r\n                                                  linked to your account won't\r\n                                                  be updated until you confirm\r\n                                                  it. We will send a\r\n                                                  confirmation email to your\r\n                                                  currently linked email\r\n                                                  account.\r\n                                                </small>\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                          </Row>\r\n                                        </Col>\r\n                                      </Row>\r\n                                      <Button\r\n                                        className='btn-icon'\r\n                                        color='success'\r\n                                        type='submit'\r\n                                        onClick={handleSubmit}\r\n                                        block\r\n                                      >\r\n                                        <span className='btn-inner--icon'>\r\n                                          <i className='fas fa-save'></i>\r\n                                        </span>\r\n                                        {infoProcessing ? (\r\n                                          <span className='btn-inner--text'>\r\n                                            <SpinnerCircular\r\n                                              size={24}\r\n                                              thickness={180}\r\n                                              speed={100}\r\n                                              color='rgba(57, 125, 172, 1)'\r\n                                              secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                            />{' '}\r\n                                            Processing...\r\n                                          </span>\r\n                                        ) : (\r\n                                          <span className='btn-inner--text'>\r\n                                            Save Changes\r\n                                          </span>\r\n                                        )}\r\n                                      </Button>\r\n                                    </Form>\r\n                                  </Fragment>\r\n                                )}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <hr />\r\n                          <Row>\r\n                            <Col>\r\n                              <h3>Change Password:</h3>\r\n                              <Formik\r\n                                initialValues={{\r\n                                  currentPassword: '',\r\n                                  newPassword: '',\r\n                                  confirmPassword: ''\r\n                                }}\r\n                                onSubmit={data => {\r\n                                  updateMyPassword(data);\r\n                                }}\r\n                                validationSchema={passSchema}\r\n                                render={({\r\n                                  handleSubmit,\r\n                                  handleChange,\r\n                                  handleBlur,\r\n                                  values,\r\n                                  errors,\r\n                                  touched\r\n                                }) => (\r\n                                  <Form onSubmit={handleSubmit}>\r\n                                    <Row>\r\n                                      <Col>\r\n                                        <FormGroup>\r\n                                          <Input\r\n                                            type='password'\r\n                                            name='currentPassword'\r\n                                            value={values.currentPassword}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            placeholder='Current Password'\r\n                                          />\r\n                                          {errors.currentPassword &&\r\n                                            touched.currentPassword && (\r\n                                              <p className='color-red'>\r\n                                                {errors.currentPassword}\r\n                                              </p>\r\n                                            )}\r\n                                        </FormGroup>\r\n                                      </Col>\r\n                                      <Col>\r\n                                        <FormGroup>\r\n                                          <Input\r\n                                            type='password'\r\n                                            name='newPassword'\r\n                                            value={values.newPassword}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            placeholder='New Password'\r\n                                          />\r\n                                          {errors.newPassword &&\r\n                                            touched.newPassword && (\r\n                                              <p className='color-red'>\r\n                                                {errors.newPassword}\r\n                                              </p>\r\n                                            )}\r\n                                        </FormGroup>\r\n                                      </Col>\r\n                                      <Col>\r\n                                        <FormGroup>\r\n                                          <Input\r\n                                            type='password'\r\n                                            name='confirmPassword'\r\n                                            value={values.confirmPassword}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            placeholder='Confirm Password'\r\n                                          />\r\n                                          {errors.confirmPassword &&\r\n                                            touched.confirmPassword && (\r\n                                              <p className='color-red'>\r\n                                                {errors.confirmPassword}\r\n                                              </p>\r\n                                            )}\r\n                                        </FormGroup>\r\n                                      </Col>\r\n                                    </Row>\r\n                                    <Button\r\n                                      className='btn-icon'\r\n                                      color='primary'\r\n                                      type='submit'\r\n                                      onClick={handleSubmit}\r\n                                      block\r\n                                    >\r\n                                      <span className='btn-inner--icon'>\r\n                                        <i className='fas fa-save'></i>\r\n                                      </span>\r\n                                      {infoProcessing ? (\r\n                                        <span className='btn-inner--text'>\r\n                                          <SpinnerCircular\r\n                                            size={24}\r\n                                            thickness={180}\r\n                                            speed={100}\r\n                                            color='rgba(57, 125, 172, 1)'\r\n                                            secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                          />{' '}\r\n                                          Processing...\r\n                                        </span>\r\n                                      ) : (\r\n                                        <span className='btn-inner--text'>\r\n                                          Change Password\r\n                                        </span>\r\n                                      )}\r\n                                    </Button>\r\n                                  </Form>\r\n                                )}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                        </TabPane>\r\n\r\n                        <TabPane tabId='6'>\r\n                          <Row>\r\n                            <Col sm='12'>\r\n                              <Container className='mgn-top-30'>\r\n                                {' '}\r\n                                <div className='row align-items-center'>\r\n                                  <Col lg={{ size: 'auto' }}>\r\n                                    <h3 className='mb-0'>\r\n                                      Manage Default Checklist\r\n                                    </h3>\r\n                                    <small>\r\n                                      Drag and Drop Items to Rearrange Their\r\n                                      Order.\r\n                                    </small>\r\n                                  </Col>\r\n                                  <Col lg={{ size: 'auto', offset: 5 }}>\r\n                                    <Button\r\n                                      className='btn-icon'\r\n                                      color='success'\r\n                                      onClick={onSaveHandler}\r\n                                    >\r\n                                      <span className='btn-inner--icon'>\r\n                                        <i className='fas fa-save'></i>\r\n                                      </span>\r\n                                      <span className='btn-inner--text'>\r\n                                        Save Changes\r\n                                      </span>\r\n                                    </Button>\r\n                                  </Col>\r\n                                </div>\r\n                                <br />\r\n                                {!checklist ||\r\n                                itemList === null ||\r\n                                checklist.length < 1 ? (\r\n                                  <Fragment>\r\n                                    <div className='text-center'>\r\n                                      <h3>No Items Found...</h3>\r\n\r\n                                      <p>Try adding one!</p>\r\n                                      <br />\r\n                                      <Button\r\n                                        className='btn-icon'\r\n                                        color='primary'\r\n                                        onClick={() => toggleAddModal()}\r\n                                      >\r\n                                        <span className='btn-inner--icon'>\r\n                                          <i className='fas fa-plus'></i>\r\n                                        </span>\r\n                                        <span className='btn-inner--text'>\r\n                                          Add Item\r\n                                        </span>\r\n                                      </Button>\r\n                                    </div>\r\n                                  </Fragment>\r\n                                ) : (\r\n                                  <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                                    <Droppable droppableId='items'>\r\n                                      {provided => (\r\n                                        <div\r\n                                          {...provided.droppableProps}\r\n                                          ref={provided.innerRef}\r\n                                        >\r\n                                          {itemListLoading ? (\r\n                                            <div className='text-center'>\r\n                                              <SpinnerCircular\r\n                                                size={24}\r\n                                                thickness={180}\r\n                                                speed={100}\r\n                                                color='rgba(57, 125, 172, 1)'\r\n                                                secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                              />{' '}\r\n                                              <h3>Processing Changes...</h3>\r\n                                            </div>\r\n                                          ) : (\r\n                                            <Fragment>\r\n                                              <ListGroup>\r\n                                                {itemList.map((item, index) => (\r\n                                                  <Draggable\r\n                                                    key={item._id}\r\n                                                    draggableId={item._id}\r\n                                                    index={index}\r\n                                                  >\r\n                                                    {provided => (\r\n                                                      <div\r\n                                                        {...provided.draggableProps}\r\n                                                        {...provided.dragHandleProps}\r\n                                                        ref={provided.innerRef}\r\n                                                      >\r\n                                                        <Fragment>\r\n                                                          <ListGroupItem className='mgn-btm-10'>\r\n                                                            <i className='fas fa-bars'></i>{' '}\r\n                                                            {item.item}{' '}\r\n                                                            <Button\r\n                                                              size='sm'\r\n                                                              color='primary'\r\n                                                              onClick={() =>\r\n                                                                toggleEditModal(\r\n                                                                  item._id,\r\n                                                                  item.item\r\n                                                                )\r\n                                                              }\r\n                                                            >\r\n                                                              Edit\r\n                                                            </Button>\r\n                                                            <Button\r\n                                                              size='sm'\r\n                                                              color='danger'\r\n                                                              onClick={() =>\r\n                                                                deleteModalToggle(\r\n                                                                  item._id\r\n                                                                )\r\n                                                              }\r\n                                                            >\r\n                                                              Delete\r\n                                                            </Button>\r\n                                                          </ListGroupItem>\r\n                                                        </Fragment>\r\n                                                      </div>\r\n                                                    )}\r\n                                                  </Draggable>\r\n                                                ))}\r\n                                                {provided.placeholder}\r\n                                              </ListGroup>\r\n                                              <Modal\r\n                                                isOpen={editModal.isOpen}\r\n                                                toggle={toggleEditModal}\r\n                                              >\r\n                                                <ModalHeader\r\n                                                  toggle={toggleEditModal}\r\n                                                >\r\n                                                  Edit Item:{' '}\r\n                                                  {editModal.activeContent}\r\n                                                </ModalHeader>\r\n\r\n                                                <Formik\r\n                                                  initialValues={{\r\n                                                    item:\r\n                                                      editModal.activeContent\r\n                                                  }}\r\n                                                  innerRef={formRef}\r\n                                                  onSubmit={async data => {\r\n                                                    const index = itemList.findIndex(\r\n                                                      item =>\r\n                                                        item._id ===\r\n                                                        editModal.active\r\n                                                    );\r\n                                                    const original = [\r\n                                                      ...itemList\r\n                                                    ];\r\n                                                    original[index].item =\r\n                                                      data.item;\r\n                                                    await updateItemList(\r\n                                                      original\r\n                                                    );\r\n                                                    onSaveHandler();\r\n                                                    setEditModal({\r\n                                                      ...editModal,\r\n                                                      isOpen: false\r\n                                                    });\r\n                                                  }}\r\n                                                  render={({\r\n                                                    handleSubmit,\r\n                                                    handleChange,\r\n                                                    handleBlur,\r\n                                                    values,\r\n                                                    errors,\r\n                                                    touched\r\n                                                  }) => (\r\n                                                    <Fragment>\r\n                                                      <ModalBody>\r\n                                                        <Form\r\n                                                          onSubmit={\r\n                                                            handleSubmit\r\n                                                          }\r\n                                                        >\r\n                                                          <Row>\r\n                                                            <Col lg='12'>\r\n                                                              <FormGroup>\r\n                                                                <Label>\r\n                                                                  Item:\r\n                                                                </Label>\r\n                                                                <Input\r\n                                                                  type='text'\r\n                                                                  name='item'\r\n                                                                  value={\r\n                                                                    values.item\r\n                                                                  }\r\n                                                                  onChange={\r\n                                                                    handleChange\r\n                                                                  }\r\n                                                                  onBlur={\r\n                                                                    handleBlur\r\n                                                                  }\r\n                                                                />\r\n                                                              </FormGroup>\r\n                                                            </Col>\r\n                                                          </Row>\r\n                                                        </Form>\r\n                                                      </ModalBody>\r\n                                                    </Fragment>\r\n                                                  )}\r\n                                                />\r\n\r\n                                                <ModalFooter>\r\n                                                  <Button\r\n                                                    onClick={toggleEditModal}\r\n                                                  >\r\n                                                    Cancel\r\n                                                  </Button>\r\n                                                  <Button\r\n                                                    color='success'\r\n                                                    onClick={handleSubmit}\r\n                                                  >\r\n                                                    Save Changes\r\n                                                  </Button>\r\n                                                </ModalFooter>\r\n                                              </Modal>\r\n                                              <div className='text-center mgn-top-50'>\r\n                                                <Button\r\n                                                  className='btn-icon'\r\n                                                  color='primary'\r\n                                                  onClick={toggleAddModal}\r\n                                                >\r\n                                                  <span className='btn-inner--icon'>\r\n                                                    <i className='fas fa-plus'></i>\r\n                                                  </span>\r\n                                                  <span className='btn-inner--text'>\r\n                                                    Add Item\r\n                                                  </span>\r\n                                                </Button>\r\n                                              </div>\r\n                                            </Fragment>\r\n                                          )}\r\n                                        </div>\r\n                                      )}\r\n                                    </Droppable>\r\n                                  </DragDropContext>\r\n                                )}\r\n                                <Modal\r\n                                  isOpen={addItemModal.isOpen}\r\n                                  toggle={toggleAddModal}\r\n                                >\r\n                                  <ModalHeader toggle={toggleAddModal}>\r\n                                    Add New Item:\r\n                                  </ModalHeader>\r\n                                  <ModalBody>\r\n                                    <Formik\r\n                                      initialValues={{\r\n                                        item: ''\r\n                                      }}\r\n                                      innerRef={addRef}\r\n                                      onSubmit={async data => {\r\n                                        await addItemGlobalChecklist(data);\r\n                                        await getGlobalChecklist();\r\n                                        toggleAddModal();\r\n                                      }}\r\n                                      render={({\r\n                                        handleSubmit,\r\n                                        handleChange,\r\n                                        handleBlur,\r\n                                        values,\r\n                                        errors,\r\n                                        touched\r\n                                      }) => (\r\n                                        <Fragment>\r\n                                          <Form onSubmit={handleSubmit}>\r\n                                            <FormGroup>\r\n                                              <Label>Item Content:</Label>\r\n                                              <Input\r\n                                                type='text'\r\n                                                name='item'\r\n                                                placeholder='Item Content...'\r\n                                                value={values.item}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                              />\r\n                                            </FormGroup>\r\n                                          </Form>\r\n                                        </Fragment>\r\n                                      )}\r\n                                    />\r\n                                  </ModalBody>\r\n                                  <ModalFooter>\r\n                                    <Button onClick={toggleAddModal}>\r\n                                      Cancel\r\n                                    </Button>\r\n                                    <Button\r\n                                      color='success'\r\n                                      onClick={handleAddItem}\r\n                                    >\r\n                                      Save Item\r\n                                    </Button>\r\n                                  </ModalFooter>\r\n                                </Modal>\r\n                                <Modal\r\n                                  isOpen={deleteModal.isOpen}\r\n                                  toggle={deleteModalToggle}\r\n                                >\r\n                                  <ModalHeader toggle={deleteModalToggle}>\r\n                                    Are You Sure?\r\n                                  </ModalHeader>\r\n                                  <ModalBody>\r\n                                    This will delete this item. This action is\r\n                                    permanent and cannot be undone.\r\n                                  </ModalBody>\r\n                                  <ModalFooter>\r\n                                    <Button onClick={deleteModalToggle}>\r\n                                      Cancel\r\n                                    </Button>\r\n                                    <Button\r\n                                      color='danger'\r\n                                      onClick={deleteItemHandler}\r\n                                    >\r\n                                      {deleteModal.isLoading ? (\r\n                                        <span>\r\n                                          <SpinnerCircular\r\n                                            size={24}\r\n                                            thickness={180}\r\n                                            speed={100}\r\n                                            color='rgba(57, 125, 172, 1)'\r\n                                            secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                          />\r\n                                          Processing...\r\n                                        </span>\r\n                                      ) : (\r\n                                        <span>Delete Item</span>\r\n                                      )}\r\n                                    </Button>\r\n                                  </ModalFooter>\r\n                                </Modal>\r\n                                <Footer />\r\n                              </Container>\r\n                            </Col>\r\n                          </Row>\r\n                        </TabPane>\r\n                      </TabContent>\r\n                    </CardBody>\r\n                  </Fragment>\r\n                )}\r\n              </Fragment>\r\n            )}\r\n          </Card>\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nSettings.propTypes = {\r\n  updateAccountEmailSettings: PropTypes.func.isRequired,\r\n  updateBusinessInfo: PropTypes.func.isRequired,\r\n  getBusinessInfo: PropTypes.func.isRequired,\r\n  updateAccountEmailReadings: PropTypes.func.isRequired,\r\n  getEmailSettings: PropTypes.func.isRequired,\r\n  updateMyInfo: PropTypes.func.isRequired,\r\n  updateMyPassword: PropTypes.func.isRequired,\r\n  createConnectAccount: PropTypes.func.isRequired,\r\n  getAccountBalance: PropTypes.func.isRequired,\r\n  createProduct: PropTypes.func.isRequired,\r\n  getGlobalChecklist: PropTypes.func.isRequired,\r\n  updateGlobalChecklist: PropTypes.func.isRequired,\r\n  addItemGlobalChecklist: PropTypes.func.isRequired,\r\n  checklist: PropTypes.array.isRequired,\r\n  businessInfo: PropTypes.object.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n  // emailSettings: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  businessInfo: state.user,\r\n  auth: state.auth,\r\n  checklist: state.customer.checklist\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateAccountEmailSettings,\r\n  updateBusinessInfo,\r\n  getBusinessInfo,\r\n  updateAccountEmailReadings,\r\n  getEmailSettings,\r\n  updateMyInfo,\r\n  updateMyPassword,\r\n  createConnectAccount,\r\n  getAccountBalance,\r\n  createProduct,\r\n  getGlobalChecklist,\r\n  updateGlobalChecklist,\r\n  addItemGlobalChecklist\r\n})(Settings);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\types.js",[],["278","279"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\user.js",["280"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Payments.js",["281","282","283","284","285","286","287","288"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\auth.js",["289"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewCustomer.js",["290","291"],"import React, { Fragment, useState, useEffect, useRef } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Alert from '../Layout/Alert';\r\n\r\n// import Carousel from 'react-multi-carousel';\r\nimport Carousel from 'react-elastic-carousel';\r\nimport ModalImage from 'react-modal-image';\r\n\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CreditCardInput from 'react-credit-card-input';\r\n\r\nimport {\r\n  getSingleCustomer,\r\n  addServiceNote,\r\n  getCustomerServiceNotes,\r\n  deleteServiceNote,\r\n  updateServiceNote,\r\n  addRecentActivity,\r\n  getRecentActivity,\r\n  deleteRecentActivity,\r\n  getChecklist,\r\n  updateBilling,\r\n  updateActivityComment,\r\n  getWorkOrders,\r\n  createWorkOrder\r\n} from '../../actions/customer';\r\n\r\nimport { getEmployees } from '../../actions/employee';\r\n\r\nimport {\r\n  addPaymentMethod,\r\n  addSubscription,\r\n  cancelSubscription,\r\n  updateBillingRate\r\n} from '../../actions/stripe';\r\n\r\nimport { SpinnerCircular } from 'spinners-react';\r\nimport ImageUploader from 'react-images-upload';\r\nimport Cards from 'react-credit-cards';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport WorkOrderModal from './WorkOrderModal';\r\nimport ViewWorkOrdersModal from './ViewWorkOrdersModal';\r\n\r\nimport 'react-credit-cards/es/styles-compiled.css';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  FormGroup,\r\n  Badge,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  ListGroupItemHeading,\r\n  ListGroupItemText,\r\n  Collapse\r\n} from 'reactstrap';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\n\r\nimport EditServiceNoteModal from '../Layout/EditServiceNoteModal';\r\n\r\nimport axios from 'axios';\r\nimport ConfirmModal from './ConfirmModal';\r\n\r\nconst ViewCustomer = ({\r\n  getSingleCustomer,\r\n  addServiceNote,\r\n  getCustomerServiceNotes,\r\n  deleteServiceNote,\r\n  updateServiceNote,\r\n  addRecentActivity,\r\n  getRecentActivity,\r\n  deleteRecentActivity,\r\n  getChecklist,\r\n  updateBilling,\r\n  customer: { customer, singleLoading },\r\n  customers: { workOrders },\r\n  employees: { employees },\r\n  getWorkOrders,\r\n  serviceNotes,\r\n  recentActivity,\r\n  serviceChecklist,\r\n  updateActivityComment,\r\n  addPaymentMethod,\r\n  createWorkOrder,\r\n  getEmployees,\r\n  addSubscription,\r\n  cancelSubscription,\r\n  updateBillingRate,\r\n  match\r\n}) => {\r\n  useEffect(() => {\r\n    getSingleCustomer(match.params.id);\r\n    getWorkOrders();\r\n    getCustomerServiceNotes(match.params.id);\r\n    getRecentActivity(match.params.id);\r\n    getChecklist(match.params.id);\r\n  }, [\r\n    getSingleCustomer,\r\n    getWorkOrders,\r\n    getCustomerServiceNotes,\r\n    getRecentActivity,\r\n    getChecklist,\r\n    match.params.id\r\n  ]);\r\n\r\n  const formSchema = Yup.object().shape({\r\n    customer: Yup.string()\r\n      .required('Must Select a Customer')\r\n      .notOneOf(['Select Customer'], 'Must Select a Customer'),\r\n    technician: Yup.string()\r\n      .required('Must Select a Technician')\r\n      .notOneOf(['Select Technician'], 'Must Select a Technician')\r\n  });\r\n\r\n  let [customers, setCustomers] = useState([\r\n    {\r\n      firstName: 'John',\r\n      lastName: 'Doe',\r\n      name: { first: 'John', last: 'Doe' },\r\n      _id: 123456\r\n    }\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (customer) {\r\n      setCustomers([\r\n        {\r\n          firstName: customer[0].firstName,\r\n          lastName: customer[0].lastName,\r\n          name: customer[0].name,\r\n          _id: customer[0]._id\r\n        }\r\n      ]);\r\n    }\r\n  }, [getSingleCustomer, customer]);\r\n\r\n  const history = useHistory();\r\n  const billingRef = useRef();\r\n\r\n  const saveBilling = () => {\r\n    if (billingRef.current) {\r\n      billingRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const [confirmAutobilling, setConfirmAutobilling] = useState(false);\r\n  const [confirmDisableBilling, setConfirmDisableBilling] = useState(false);\r\n\r\n  const [addModal, setAddModal] = useState({\r\n    isOpen: false,\r\n    isLoading: false\r\n  });\r\n\r\n  const [workOrdersModal, setWorkOrdersModal] = useState({\r\n    isOpen: false,\r\n    isLoading: false\r\n  });\r\n\r\n  const [changeCard, setChangeCard] = useState(false);\r\n\r\n  const [serviceNoteModal, setServiceNoteModal] = useState(false);\r\n  const toggleServiceNoteModal = () => setServiceNoteModal(!serviceNoteModal);\r\n\r\n  const [activityModal, setActivityModal] = useState(false);\r\n  const toggleActivityModal = () => setActivityModal(!activityModal);\r\n\r\n  const [pictureState, setPictureState] = useState({ pictures: [] });\r\n\r\n  const [addImageModal, setAddImageModal] = useState(false);\r\n  const [loadingNewImages, setLoadingNewImages] = useState(false);\r\n\r\n  const toggleAddImageModal = () => setAddImageModal(!addImageModal);\r\n\r\n  const [loadingAddServiceNote, setLoadingAddServiceNote] = useState(false);\r\n\r\n  const [addActivityLoading, setAddActivityLoading] = useState(false);\r\n\r\n  const [editNoteModal, setEditNoteModal] = useState({\r\n    activeNote: '',\r\n    isOpen: false\r\n  });\r\n\r\n  const [recentModal, setRecentModal] = useState({\r\n    isViewOpen: false,\r\n    isEditOpen: false,\r\n    isDeleteOpen: false,\r\n    active: null,\r\n    index: null,\r\n    isChemsOpen: false,\r\n    isReadingsOpen: false,\r\n    isViewAllOpen: false\r\n  });\r\n\r\n  const [editBillingModal, setEditBillingModal] = useState(false);\r\n  const [editBillingLoading, setEditBillingLoading] = useState(false);\r\n  const toggleBillingModal = () => {\r\n    setEditBillingModal(!editBillingModal);\r\n  };\r\n\r\n  const onDrop = picture => {\r\n    setPictureState({\r\n      pictures: picture\r\n    });\r\n  };\r\n\r\n  const uploadImages = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      };\r\n\r\n      let uploadPromises = pictureState.pictures.map(image => {\r\n        let data = new FormData();\r\n        data.append('image', image, image.name);\r\n        return axios.post(\r\n          `/api/customers/${match.params.id}/uploadImage`,\r\n          data,\r\n          config\r\n        );\r\n      });\r\n\r\n      await axios.all(uploadPromises);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const [deleteSure, setDeleteSure] = useState({\r\n    activeNote: null,\r\n    isOpen: false\r\n  });\r\n\r\n  const [deleteNoteLoading, setDeleteNoteLoading] = useState(false);\r\n\r\n  const deleteNoteModalToggle = noteId => {\r\n    setDeleteSure({\r\n      activeNote: noteId,\r\n      isOpen: true\r\n    });\r\n  };\r\n\r\n  const deleteNoteHandler = async noteId => {\r\n    setDeleteNoteLoading(true);\r\n    await deleteServiceNote(match.params.id, noteId);\r\n    setDeleteSure({\r\n      activeNote: noteId,\r\n      isOpen: false\r\n    });\r\n    getCustomerServiceNotes(match.params.id);\r\n    setDeleteNoteLoading(false);\r\n  };\r\n\r\n  const toggleNoteEditModal = noteId => {\r\n    setEditNoteModal({\r\n      activeNote: noteId,\r\n      isOpen: !editNoteModal.isOpen\r\n    });\r\n  };\r\n\r\n  const editNoteHandler = async (noteId, data) => {\r\n    await updateServiceNote(match.params.id, noteId, data);\r\n    getCustomerServiceNotes(match.params.id);\r\n  };\r\n\r\n  const [deleteActivity, setDeleteActivity] = useState({\r\n    active: null,\r\n    isOpen: false,\r\n    isLoading: false\r\n  });\r\n\r\n  const toggleActivityDeleteModal = noteId => {\r\n    setDeleteActivity({\r\n      active: noteId,\r\n      isOpen: !deleteActivity.isOpen,\r\n      isLoading: false\r\n    });\r\n  };\r\n\r\n  const recentActivityDeleteHandler = async noteId => {\r\n    setDeleteActivity({ ...deleteActivity, isLoading: true });\r\n    await deleteRecentActivity(match.params.id, noteId);\r\n    await getRecentActivity(match.params.id);\r\n    setDeleteActivity({ active: null, isLoading: false, isOpen: false });\r\n  };\r\n\r\n  const [cardState, setCardState] = useState({\r\n    cvc: '',\r\n    expiry: '',\r\n    focus: '',\r\n    name: '',\r\n    number: ''\r\n  });\r\n\r\n  const handleCardFocus = e => {\r\n    setCardState({ ...cardState, focus: e.target.name });\r\n  };\r\n\r\n  const handleCardInput = e => {\r\n    const { name, value } = e.target;\r\n\r\n    setCardState({ ...cardState, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='customers' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div\r\n          className='header pb-6 d-flex align-items-center'\r\n          style={{\r\n            minHeight: '500px',\r\n            backgroundImage:\r\n              'url(https://www.lathampool.com/wp-content/uploads/2020/01/bh-header.jpg)',\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center top'\r\n          }}\r\n        >\r\n          {/* Mask */}\r\n          <span className='mask bg-gradient-default opacity-8' />\r\n          {/* Header container */}\r\n          <div className='container-fluid d-flex align-items-center'>\r\n            <div className='row'>\r\n              <div className='col-md-12'>\r\n                {!customer || singleLoading ? (\r\n                  <Fragment>\r\n                    <div className='text-center'>\r\n                      <h4>Loading Data...</h4>\r\n                      <SpinnerCircular\r\n                        size={54}\r\n                        thickness={180}\r\n                        speed={100}\r\n                        color='rgba(57, 125, 172, 1)'\r\n                        secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                      />\r\n                    </div>\r\n                  </Fragment>\r\n                ) : (\r\n                  <Fragment>\r\n                    {!customer[0].serviceRate && !customer[0].servicePackage && (\r\n                      <Fragment>\r\n                        <Badge color='danger'>No Service Plan Assigned</Badge>{' '}\r\n                      </Fragment>\r\n                    )}\r\n                    {!customer[0].technician && (\r\n                      <Fragment>\r\n                        <Badge color='danger'>No Tech Assigned</Badge>{' '}\r\n                      </Fragment>\r\n                    )}\r\n                    {workOrders.filter(e => e.customer._id === match.params.id)\r\n                      .length >= 1 ? (\r\n                      <Badge color='warning'>\r\n                        {\r\n                          workOrders.filter(\r\n                            e => e.customer._id === match.params.id\r\n                          ).length\r\n                        }{' '}\r\n                        Open Work Order(s)\r\n                      </Badge>\r\n                    ) : (\r\n                      <Badge color='success'>No Open Work Orders</Badge>\r\n                    )}\r\n\r\n                    {/* <Badge color='secondary'>No Pending Expenses</Badge>{' '} */}\r\n                    <h1 className='display-2 text-white'>\r\n                      {customer[0].serviceAddress}\r\n                    </h1>\r\n                    <p className='text-white mt-0 mb-5'>\r\n                      <strong>\r\n                        {customer[0].poolType} Pool - Gate/Lock Code:{' '}\r\n                        {customer[0].gateCode}\r\n                      </strong>{' '}\r\n                      <br />\r\n                      <em>\r\n                        Last Serviced:{' '}\r\n                        {moment(customer[0].lastServiced).format(\r\n                          'MMM Do, YYYY'\r\n                        )}{' '}\r\n                        {/* <br /> Next Service:{' '}\r\n                        {customer[0].frequency === 'Weekly' ? (\r\n                          <span>\r\n                            {moment(customer[0].lastServiced)\r\n                              .add(7, 'days')\r\n                              .format('MMM Do, YYYY')}\r\n                          </span>\r\n                        ) : customer[0].frequency ===\r\n                          'Bi-Weekly (Every 2 Weeks)' ? (\r\n                          <span>\r\n                            {moment(customer[0].lastServiced)\r\n                              .add(14, 'days')\r\n                              .format('MMM Do, YYYY')}\r\n                          </span>\r\n                        ) : customer[0].frequency ===\r\n                          'Tri-Weekly (Every 3 Weeks)' ? (\r\n                          <span>\r\n                            {moment(customer[0].lastServiced)\r\n                              .add(3, 'weeks')\r\n                              .format('MMM Do, YYYY')}\r\n                          </span>\r\n                        ) : customer[0].frequency ===\r\n                          'Monthly (Every 4 Weeks)' ? (\r\n                          <span>\r\n                            {moment(customer[0].lastServiced)\r\n                              .add(1, 'month')\r\n                              .format('MMM Do, YYYY')}\r\n                          </span>\r\n                        ) : (\r\n                          <span></span>\r\n                        )} */}\r\n                      </em>\r\n                    </p>\r\n                  </Fragment>\r\n                )}\r\n\r\n                <Link\r\n                  to={`/customers/${match.params.id}/manage/info`}\r\n                  className='btn btn-neutral mb-4'\r\n                >\r\n                  Edit Customer Information\r\n                </Link>\r\n\r\n                {customer && customer[0] && (\r\n                  <a\r\n                    href={`mailto:${customer[0].email}`}\r\n                    className='btn btn-primary mb-4'\r\n                  >\r\n                    Email Customer\r\n                  </a>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Modal\r\n          isOpen={recentModal.isViewAllOpen}\r\n          toggle={() => {\r\n            setRecentModal({ ...recentModal, isViewAllOpen: false });\r\n          }}\r\n        >\r\n          <ModalHeader\r\n            toggle={() => {\r\n              setRecentModal({ ...recentModal, isViewAllOpen: false });\r\n            }}\r\n          >\r\n            View All Activity:\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            {recentActivity.map(item => (\r\n              <Fragment key={item._id}>\r\n                <Row className='mb-4'>\r\n                  <Col xs={{ size: 'auto' }}>\r\n                    <i\r\n                      className={`fas fa-${item.icon} fa-2x color-${\r\n                        item.log === 'Phone Call'\r\n                          ? 'green'\r\n                          : item.log === 'Email'\r\n                          ? 'yellow'\r\n                          : item.log === 'Service'\r\n                          ? 'purple'\r\n                          : 'primary'\r\n                      }`}\r\n                    ></i>\r\n                  </Col>\r\n                  <Col xs={{ size: 'auto' }}>\r\n                    <h3>\r\n                      {item.type} {item.log}{' '}\r\n                      {item.type === 'Incoming' ? (\r\n                        <span>from</span>\r\n                      ) : (\r\n                        <span>to</span>\r\n                      )}{' '}\r\n                      {customer[0].firstName} {customer[0].lastName}\r\n                    </h3>\r\n                    <p>{item.comments}</p>\r\n                    <small>\r\n                      <Moment format='ddd, MMM DD, YYYY | LT'>\r\n                        {item.dateAdded}\r\n                      </Moment>\r\n                    </small>{' '}\r\n                    <Button\r\n                      size='sm'\r\n                      color='primary'\r\n                      onClick={() => {\r\n                        setRecentModal({\r\n                          isViewOpen: true,\r\n                          active: item._id,\r\n                          index: recentActivity.findIndex(\r\n                            x => x._id === item._id\r\n                          )\r\n                        });\r\n                      }}\r\n                    >\r\n                      View\r\n                    </Button>\r\n                    <Button\r\n                      size='sm'\r\n                      color='success'\r\n                      onClick={() => {\r\n                        setRecentModal({\r\n                          ...recentModal,\r\n                          isEditOpen: true,\r\n                          isViewOpen: false,\r\n                          active: item._id,\r\n                          index: recentActivity.findIndex(\r\n                            x => x._id === item._id\r\n                          )\r\n                        });\r\n                      }}\r\n                    >\r\n                      Edit\r\n                    </Button>\r\n                    <Button\r\n                      size='sm'\r\n                      color='warning'\r\n                      onClick={() => toggleActivityDeleteModal(item._id)}\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Modal\r\n                  isOpen={deleteActivity.isOpen}\r\n                  toggle={() => setDeleteActivity({ isOpen: false })}\r\n                >\r\n                  <ModalHeader\r\n                    toggle={() => setDeleteActivity({ isOpen: false })}\r\n                  >\r\n                    Delete Service Note?\r\n                  </ModalHeader>\r\n                  <ModalBody>\r\n                    Are you sure you want to delete this activity? This action\r\n                    cannot be undone.\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button\r\n                      onClick={() => setDeleteActivity({ isOpen: false })}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      color='danger'\r\n                      onClick={() =>\r\n                        recentActivityDeleteHandler(deleteActivity.active)\r\n                      }\r\n                    >\r\n                      {deleteActivity.isLoading ? (\r\n                        <span>\r\n                          <SpinnerCircular\r\n                            size={24}\r\n                            thickness={180}\r\n                            speed={100}\r\n                            color='rgba(57, 125, 172, 1)'\r\n                            secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                          />{' '}\r\n                          Processing...\r\n                        </span>\r\n                      ) : (\r\n                        <span>Delete Activity</span>\r\n                      )}\r\n                    </Button>\r\n                  </ModalFooter>\r\n                </Modal>\r\n              </Fragment>\r\n            ))}\r\n          </ModalBody>\r\n        </Modal>\r\n\r\n        <ViewWorkOrdersModal\r\n          workOrdersModal={workOrdersModal}\r\n          setWorkOrdersModal={setWorkOrdersModal}\r\n          customers={customers}\r\n          workOrders={workOrders}\r\n        />\r\n\r\n        <WorkOrderModal\r\n          addModal={addModal}\r\n          setAddModal={setAddModal}\r\n          createWorkOrder={createWorkOrder}\r\n          getWorkOrders={getWorkOrders}\r\n          formSchema={formSchema}\r\n          customers={customers}\r\n          employees={employees}\r\n        />\r\n\r\n        <Container className='mgn-ng-top-60' fluid>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-4 d-none d-lg-inline'>\r\n                      <h3 className='mb-0'>Customer Information </h3>\r\n                    </div>\r\n                    <div className='col-8 d-lg-none'>\r\n                      <h3 className='mb-0'>Customer Information </h3>\r\n                    </div>\r\n                    <div className='col-8 text-right d-none d-lg-inline'>\r\n                      {/* <a href='#!' className='btn btn-success'>\r\n                        Start Service\r\n                      </a> */}\r\n                      {/* <a href='#!' className='btn btn-primary'>\r\n                        Add Expense\r\n                      </a> */}\r\n                      {workOrders.filter(\r\n                        e => e.customer._id === match.params.id\r\n                      ).length >= 1 && (\r\n                        <Button\r\n                          color='primary'\r\n                          onClick={() =>\r\n                            setWorkOrdersModal({\r\n                              ...workOrdersModal,\r\n                              isOpen: true\r\n                            })\r\n                          }\r\n                        >\r\n                          View Work Order(s)\r\n                        </Button>\r\n                      )}\r\n                      <Button\r\n                        color='success'\r\n                        onClick={() =>\r\n                          setAddModal({ ...addModal, isOpen: true })\r\n                        }\r\n                      >\r\n                        Add Work Order\r\n                      </Button>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <UncontrolledDropdown>\r\n                        <DropdownToggle\r\n                          className='btn btn-primary d-lg-none'\r\n                          color=''\r\n                          role='button'\r\n                          size='sm'\r\n                        >\r\n                          <i className='fas fa-ellipsis-v' /> Actions\r\n                        </DropdownToggle>\r\n                        <DropdownMenu className='dropdown-menu-arrow' right>\r\n                          {/* <DropdownItem tag={Link} to='/'>\r\n                            Start Service\r\n                          </DropdownItem> */}\r\n                          <DropdownItem tag={Link} to='/'>\r\n                            Add Expense\r\n                          </DropdownItem>\r\n                          <DropdownItem tag={Link} to='/'>\r\n                            Add Work Order\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        Contact Information\r\n                      </h6>\r\n                      <Row>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>First name</div>\r\n                          <p>{customer[0].firstName}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Last name</div>\r\n                          <p>{customer[0].lastName}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Email</div>\r\n                          <p>{customer[0].email}</p>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Mobile phone</div>\r\n                          <p>{customer[0].mobilePhone}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Can text?</div>\r\n                          <p>{customer[0].canText}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Alt Phone</div>\r\n                          <p>N/A</p>\r\n                        </Col>\r\n                      </Row>\r\n                      <hr className='my-4' />\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        Service Information\r\n                      </h6>\r\n                      <Row>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>\r\n                            Service Address\r\n                          </div>\r\n                          <p>\r\n                            {customer[0].serviceAddress},{' '}\r\n                            {customer[0].serviceCity},{' '}\r\n                            {customer[0].serviceState} {customer[0].serviceZip}\r\n                          </p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>\r\n                            Service Frequency\r\n                          </div>\r\n                          <p>{customer[0].frequency}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Service Day</div>\r\n                          <p>{customer[0].scheduledDay}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Route Status</div>\r\n                          <p>\r\n                            {customer[0].isScheduled ? (\r\n                              <span>Routed</span>\r\n                            ) : (\r\n                              <span>Not Routed</span>\r\n                            )}\r\n                          </p>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>\r\n                            Service Type:\r\n                          </div>\r\n                          <p>{customer[0].poolType}</p>\r\n                        </Col>\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>Technician:</div>\r\n                          <Link to={`/users/${customer[0].technician}/view`}>\r\n                            {customer[0].technicianName}\r\n                          </Link>\r\n                        </Col>\r\n                        {/* <Col sm='3'>\r\n                          <div className='form-control-label'>Rate/Package</div>\r\n                          {customer[0].serviceRate ? (\r\n                            <p>{customer[0].servicePackageAndRate}</p>\r\n                          ) : (\r\n                            <p className='color-red'>\r\n                              <strong>\r\n                                <em>None Assigned</em>\r\n                              </strong>\r\n                            </p>\r\n                          )}\r\n                        </Col> */}\r\n                        <Col sm='3'>\r\n                          <div className='form-control-label'>\r\n                            Gate/Lock Code:\r\n                          </div>\r\n                          <p>{customer[0].gateCode}</p>\r\n                        </Col>\r\n                      </Row>\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-8'>\r\n                      <h3 className='mb-0'>Pool & Equipment Information </h3>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <Link\r\n                        to={`/customers/${match.params.id}/manage/equipment`}\r\n                        className='btn btn-primary btn-sm'\r\n                      >\r\n                        Edit Equipment\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      {Object.entries(customer[0].poolEquipment).length !==\r\n                        1 && (\r\n                        <Row>\r\n                          <Col sm='3'>\r\n                            <div className='form-control-label'>Pool Type</div>\r\n                            <p>{customer[0].poolEquipment.poolType}</p>\r\n                          </Col>\r\n                          <Col sm='3'>\r\n                            <div className='form-control-label'>\r\n                              Bodies of Water\r\n                            </div>\r\n                            <p>{customer[0].poolEquipment.bodiesOfWater}</p>\r\n                          </Col>\r\n                          <Col sm='3'>\r\n                            <div className='form-control-label'>Pump</div>\r\n                            <p>\r\n                              {customer[0].poolEquipment.pumpMake}{' '}\r\n                              {customer[0].poolEquipment.pumpModel}\r\n                            </p>\r\n                          </Col>\r\n                          <Col sm='3'>\r\n                            <div className='form-control-label'>Filter</div>\r\n                            <p>\r\n                              {' '}\r\n                              {customer[0].poolEquipment.filterMake}{' '}\r\n                              {customer[0].poolEquipment.filterModel}\r\n                            </p>\r\n                          </Col>\r\n                        </Row>\r\n                      )}\r\n                      <Row>\r\n                        {Object.entries(customer[0].poolEquipment).length !==\r\n                          1 && (\r\n                          <Fragment>\r\n                            <Col sm='3'>\r\n                              <div className='form-control-label'>\r\n                                Pool Cleaner\r\n                              </div>\r\n                              <p>\r\n                                {' '}\r\n                                {customer[0].poolEquipment.cleanerMake}{' '}\r\n                                {customer[0].poolEquipment.cleanerModel}\r\n                              </p>\r\n                            </Col>\r\n                            <Col sm='3'>\r\n                              <div className='form-control-label'>\r\n                                Pool Heater\r\n                              </div>\r\n                              <p>\r\n                                {' '}\r\n                                {customer[0].poolEquipment.heaterMake}{' '}\r\n                                {customer[0].poolEquipment.heaterModel}\r\n                              </p>\r\n                            </Col>\r\n                          </Fragment>\r\n                        )}\r\n\r\n                        {customer[0].poolEquipment.other && (\r\n                          <Fragment>\r\n                            {customer[0].poolEquipment.other.map(item => (\r\n                              <Col sm='3' key={item.category}>\r\n                                <div className='form-control-label'>\r\n                                  {item.category.replace('s', '')}\r\n                                </div>\r\n                                <p>\r\n                                  {item.make} {item.model}\r\n                                </p>\r\n                              </Col>\r\n                            ))}\r\n                          </Fragment>\r\n                        )}\r\n                      </Row>\r\n\r\n                      {Object.entries(customer[0].poolEquipment).length <=\r\n                        1 && (\r\n                        <div className='text-center'>\r\n                          <i className='fas fa-exclamation-circle'></i>\r\n                          <h4>No Equipment Information Found</h4>\r\n                        </div>\r\n                      )}\r\n\r\n                      <hr className='my-4' />\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        Equipment Images\r\n                      </h6>\r\n                      {customer[0].images.length >= 1 ? (\r\n                        <Fragment>\r\n                          <Row>\r\n                            <Carousel\r\n                              itemsToShow={4}\r\n                              itemPadding={[10, 10]}\r\n                              pagination={false}\r\n                              enableMouseSwipe={false}\r\n                            >\r\n                              {customer[0].images.map(image => (\r\n                                <ModalImage\r\n                                  key={image._id}\r\n                                  small={image.url}\r\n                                  large={image.url}\r\n                                  showRotate={true}\r\n                                  hideZoom={true}\r\n                                  className='modal-image-thumb'\r\n                                />\r\n                              ))}\r\n                            </Carousel>\r\n                          </Row>\r\n\r\n                          <Modal\r\n                            isOpen={addImageModal}\r\n                            toggle={toggleAddImageModal}\r\n                          >\r\n                            <ModalHeader toggle={toggleAddImageModal}>\r\n                              Upload Images\r\n                            </ModalHeader>\r\n                            <ModalBody>\r\n                              <ImageUploader\r\n                                withIcon={true}\r\n                                buttonText='Choose images'\r\n                                onChange={onDrop}\r\n                                imgExtension={['.jpg', '.gif', '.png', '.gif']}\r\n                                maxFileSize={5242880}\r\n                                withPreview={true}\r\n                              />\r\n                              <ModalFooter>\r\n                                <Button onClick={toggleAddImageModal}>\r\n                                  Cancel\r\n                                </Button>\r\n                                <Button\r\n                                  onClick={async () => {\r\n                                    setLoadingNewImages(true);\r\n                                    await uploadImages();\r\n                                    await getSingleCustomer(match.params.id);\r\n                                    setLoadingNewImages(false);\r\n                                    toggleAddImageModal();\r\n                                    setPictureState({ pictures: [] });\r\n                                  }}\r\n                                  color='success'\r\n                                >\r\n                                  {loadingNewImages ? (\r\n                                    <span>Loading...</span>\r\n                                  ) : (\r\n                                    <span>Upload Image(s)</span>\r\n                                  )}\r\n                                </Button>\r\n                              </ModalFooter>\r\n                            </ModalBody>\r\n                          </Modal>\r\n\r\n                          <div className='text-center'>\r\n                            <Button\r\n                              size='sm'\r\n                              color='primary'\r\n                              onClick={toggleAddImageModal}\r\n                            >\r\n                              Add Image(s)\r\n                            </Button>\r\n                            <Button\r\n                              size='sm'\r\n                              color='danger'\r\n                              onClick={() => {\r\n                                history.push(\r\n                                  `/customers/${match.params.id}/deleteImage`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Delete Image(s)\r\n                            </Button>\r\n                          </div>\r\n                        </Fragment>\r\n                      ) : (\r\n                        <Fragment>\r\n                          <Modal\r\n                            isOpen={addImageModal}\r\n                            toggle={toggleAddImageModal}\r\n                          >\r\n                            <ModalHeader toggle={toggleAddImageModal}>\r\n                              Upload Images\r\n                            </ModalHeader>\r\n                            <ModalBody>\r\n                              <ImageUploader\r\n                                withIcon={true}\r\n                                buttonText='Choose images'\r\n                                onChange={onDrop}\r\n                                imgExtension={['.jpg', '.gif', '.png', '.gif']}\r\n                                maxFileSize={5242880}\r\n                                withPreview={true}\r\n                              />\r\n                              <ModalFooter>\r\n                                <Button onClick={toggleAddImageModal}>\r\n                                  Cancel\r\n                                </Button>\r\n                                <Button\r\n                                  onClick={async () => {\r\n                                    setLoadingNewImages(true);\r\n                                    await uploadImages();\r\n                                    await getSingleCustomer(match.params.id);\r\n                                    setLoadingNewImages(false);\r\n                                    toggleAddImageModal();\r\n                                    setPictureState({ pictures: [] });\r\n                                  }}\r\n                                  color='success'\r\n                                >\r\n                                  {loadingNewImages ? (\r\n                                    <span>Loading...</span>\r\n                                  ) : (\r\n                                    <span>Upload Image(s)</span>\r\n                                  )}\r\n                                </Button>\r\n                              </ModalFooter>\r\n                            </ModalBody>\r\n                          </Modal>\r\n\r\n                          <div className='text-center'>\r\n                            <h3>No Images Found</h3>\r\n                            <Button\r\n                              size='sm'\r\n                              color='primary'\r\n                              onClick={toggleAddImageModal}\r\n                            >\r\n                              Upload Image(s)\r\n                            </Button>\r\n                          </div>\r\n                        </Fragment>\r\n                      )}\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Modal isOpen={activityModal} toggle={toggleActivityModal}>\r\n            <ModalHeader toggle={toggleActivityModal}>\r\n              Log Recent Activity\r\n            </ModalHeader>\r\n\r\n            <Formik\r\n              initialValues={{\r\n                log: 'Phone Call',\r\n                type: '',\r\n                comments: ''\r\n              }}\r\n              onSubmit={async data => {\r\n                setAddActivityLoading(true);\r\n                await addRecentActivity(match.params.id, data);\r\n                await getRecentActivity(match.params.id);\r\n                setAddActivityLoading(false);\r\n                toggleActivityModal();\r\n              }}\r\n              render={({\r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                errors,\r\n                touched\r\n              }) => (\r\n                <Fragment>\r\n                  <ModalBody>\r\n                    <Form onSubmit={handleSubmit}>\r\n                      <FormGroup>\r\n                        <Label for='log'>What do you want to log?</Label>\r\n                        <Input\r\n                          type='select'\r\n                          name='log'\r\n                          onChange={handleChange}\r\n                          value={values.log}\r\n                        >\r\n                          <option>Phone Call</option>\r\n                          <option>Email</option>\r\n                          <option>Other</option>\r\n                        </Input>\r\n                      </FormGroup>\r\n                      {(values.log === 'Phone Call' ||\r\n                        values.log === 'Email') && (\r\n                        <Fragment>\r\n                          <FormGroup>\r\n                            {values.log === 'Phone Call' ? (\r\n                              <Label>Type Of Call?</Label>\r\n                            ) : (\r\n                              <Label>Type Of Email?</Label>\r\n                            )}\r\n                            <Input\r\n                              type='select'\r\n                              name='type'\r\n                              onChange={handleChange}\r\n                              value={values.type}\r\n                            >\r\n                              <option value='' disabled>\r\n                                Choose One\r\n                              </option>\r\n                              <option value='Outgoing'>Outgoing</option>\r\n                              <option value='Incoming'>Incoming</option>\r\n                            </Input>\r\n                          </FormGroup>\r\n                        </Fragment>\r\n                      )}\r\n                      <FormGroup>\r\n                        <Label for='comments'>Comments:</Label>\r\n                        <Input\r\n                          type='textarea'\r\n                          name='comments'\r\n                          onChange={handleChange}\r\n                          value={values.comments}\r\n                          placeholder='Message...'\r\n                        />\r\n                      </FormGroup>\r\n                    </Form>\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button\r\n                      color='success'\r\n                      type='submit'\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      {addActivityLoading ? (\r\n                        <span>\r\n                          <SpinnerCircular\r\n                            size={24}\r\n                            thickness={180}\r\n                            speed={100}\r\n                            color='rgba(57, 125, 172, 1)'\r\n                            secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                          />{' '}\r\n                          Processing...\r\n                        </span>\r\n                      ) : (\r\n                        <span>Log Activity</span>\r\n                      )}\r\n                    </Button>{' '}\r\n                    <Button color='secondary'>Cancel</Button>\r\n                  </ModalFooter>\r\n                </Fragment>\r\n              )}\r\n            />\r\n          </Modal>\r\n\r\n          {recentModal.isEditOpen && recentModal.active && (\r\n            <Modal\r\n              isOpen={recentModal.isEditOpen}\r\n              toggle={() => {\r\n                setRecentModal({ ...recentModal, isEditOpen: false });\r\n              }}\r\n            >\r\n              <ModalHeader\r\n                toggle={() => {\r\n                  setRecentModal({ ...recentModal, isEditOpen: false });\r\n                }}\r\n              >\r\n                Edit Activity Log:\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <Formik\r\n                  initialValues={{\r\n                    comments: recentActivity[recentModal.index].comments\r\n                      ? recentActivity[recentModal.index].comments\r\n                      : ''\r\n                  }}\r\n                  onSubmit={async data => {\r\n                    setRecentModal({ ...recentModal, isLoading: true });\r\n                    await updateActivityComment(data, recentModal.active);\r\n                    await getRecentActivity(match.params.id);\r\n                    setRecentModal({\r\n                      ...recentModal,\r\n                      isLoading: false,\r\n                      isEditOpen: false\r\n                    });\r\n                  }}\r\n                  render={({\r\n                    handleSubmit,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    values,\r\n                    errors,\r\n                    touched\r\n                  }) => (\r\n                    <Form onSubmit={handleSubmit}>\r\n                      <Row>\r\n                        <Col>\r\n                          <FormGroup>\r\n                            <Label className='form-control-label'>\r\n                              Comments:\r\n                            </Label>\r\n                            <Input\r\n                              type='textarea'\r\n                              placeholder='Comments'\r\n                              value={values.comments}\r\n                              name='comments'\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n                      <Button color='success' block type='submit'>\r\n                        {recentModal.isLoading ? (\r\n                          <span>\r\n                            <SpinnerCircular\r\n                              size={24}\r\n                              thickness={180}\r\n                              speed={100}\r\n                              color='rgba(57, 125, 172, 1)'\r\n                              secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                            />{' '}\r\n                            Processing...\r\n                          </span>\r\n                        ) : (\r\n                          <span>Save Changes</span>\r\n                        )}\r\n                      </Button>\r\n                    </Form>\r\n                  )}\r\n                />\r\n              </ModalBody>\r\n            </Modal>\r\n          )}\r\n\r\n          {recentModal.isViewOpen && recentModal.active && (\r\n            <Modal\r\n              isOpen={recentModal.isViewOpen}\r\n              toggle={() => {\r\n                setRecentModal({ ...recentModal, isViewOpen: false });\r\n              }}\r\n            >\r\n              <ModalHeader\r\n                toggle={() => {\r\n                  setRecentModal({ ...recentModal, isViewOpen: false });\r\n                }}\r\n              >\r\n                View Activity Report:\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <Row>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Customer Name:</Label>\r\n                    <p>\r\n                      {recentActivity[recentModal.index].customer.name.first}{' '}\r\n                      {recentActivity[recentModal.index].customer.name.last}\r\n                    </p>\r\n                  </Col>\r\n                  <Col>\r\n                    <Label className='form-control-label'>\r\n                      Customer Address:\r\n                    </Label>\r\n                    <p>\r\n                      {\r\n                        recentActivity[recentModal.index].customer\r\n                          .serviceAddress\r\n                      }\r\n                      , {recentActivity[recentModal.index].customer.serviceCity}{' '}\r\n                      {recentActivity[recentModal.index].customer.serviceState},{' '}\r\n                      {recentActivity[recentModal.index].customer.serviceZip}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Logged on:</Label>\r\n                    <p>\r\n                      {moment(\r\n                        recentActivity[recentModal.index].dateAdded\r\n                      ).format('MMMM Do YYYY h:mm a')}\r\n                    </p>\r\n                  </Col>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Status:</Label>\r\n                    <br />\r\n                    {recentActivity[recentModal.index].comments ===\r\n                      'Service Stop Completed' && (\r\n                      <Badge color='success'>Serviced</Badge>\r\n                    )}\r\n                    {recentActivity[recentModal.index].comments.includes(\r\n                      'Unable to Service '\r\n                    ) && <Badge color='danger'>Unable To Service</Badge>}\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Comments:</Label>\r\n                    {recentActivity[recentModal.index].comments ? (\r\n                      <p>{recentActivity[recentModal.index].comments}</p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                  <Col>\r\n                    <Label className='form-control-label'>\r\n                      Note To Customer:\r\n                    </Label>\r\n\r\n                    {recentActivity[recentModal.index].noteToCustomer ? (\r\n                      <p>{recentActivity[recentModal.index].noteToCustomer}</p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n                {recentActivity[recentModal.index].serviceLog.checkList\r\n                  .length >= 1 && (\r\n                  <Row>\r\n                    <Col>\r\n                      <Label className='form-control-label'>\r\n                        Service Checklist:\r\n                      </Label>\r\n                      <ListGroup>\r\n                        {recentActivity[\r\n                          recentModal.index\r\n                        ].serviceLog.checkList.map(item => (\r\n                          <ListGroupItem key={item}>\r\n                            <i className='fas fa-check-circle'></i> {item}\r\n                          </ListGroupItem>\r\n                        ))}\r\n                      </ListGroup>\r\n                    </Col>\r\n                  </Row>\r\n                )}\r\n                <br />\r\n                <Row>\r\n                  <hr />\r\n                  <Col>\r\n                    <Button\r\n                      color='success'\r\n                      block\r\n                      onClick={() => {\r\n                        setRecentModal({\r\n                          ...recentModal,\r\n                          isReadingsOpen: !recentModal.isReadingsOpen\r\n                        });\r\n                      }}\r\n                    >\r\n                      View Chemical Readings\r\n                    </Button>\r\n                    <br />\r\n                    <Collapse isOpen={recentModal.isReadingsOpen}>\r\n                      <Card>\r\n                        <CardBody>\r\n                          <Row>\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .totalChlorine && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Total Chlorine:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  {\r\n                                    recentActivity[recentModal.index].serviceLog\r\n                                      .totalChlorine\r\n                                  }\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .freeChlorine && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Free Chlorine:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.freeChlorine\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .pHlevel && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  PH Level:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  {\r\n                                    recentActivity[recentModal.index].serviceLog\r\n                                      .pHlevel\r\n                                  }\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .alkalinity && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Alkalinity Level:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  {\r\n                                    recentActivity[recentModal.index].serviceLog\r\n                                      .alkalinity\r\n                                  }\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .conditionerLevel && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Conditioner Level:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  {\r\n                                    recentActivity[recentModal.index].serviceLog\r\n                                      .conditionerLevel\r\n                                  }\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .hardness && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Hardness:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  {\r\n                                    recentActivity[recentModal.index].serviceLog\r\n                                      .hardness\r\n                                  }\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .phosphateLevel && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Phosphate Level:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  {\r\n                                    recentActivity[recentModal.index].serviceLog\r\n                                      .phosphateLevel\r\n                                  }\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .saltLevel && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Salt Level:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  {\r\n                                    recentActivity[recentModal.index].serviceLog\r\n                                      .saltLevel\r\n                                  }\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n                    </Collapse>\r\n                    <Button\r\n                      color='primary'\r\n                      block\r\n                      onClick={() => {\r\n                        setRecentModal({\r\n                          ...recentModal,\r\n                          isChemsOpen: !recentModal.isChemsOpen\r\n                        });\r\n                      }}\r\n                    >\r\n                      View Chemicals Added\r\n                    </Button>\r\n                    <br />\r\n                    <Collapse isOpen={recentModal.isChemsOpen}>\r\n                      <Card>\r\n                        <CardBody>\r\n                          <Row>\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .chlorineTablets && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Chlorine Tablets:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.chlorineTablets\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .liquidChlorine && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Liquid Chlorine:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.liquidChlorine\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .liquidAcid && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Liquid Acid:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.liquidAcid\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .triChlor && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  TriChlor Shock:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.triChlor\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .diChlor && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  DiChlor Shock:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.diChlor\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .calHypo && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  CalHypo Shock:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.calHypo\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .potassiumMono && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Potassium Monopersulfate:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.potassiumMono\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .ammonia && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Ammonia Based Liquid Algacide:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.ammonia\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .copperBased && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Copper Based Liquid Algacide:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.copperBased\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .polyQuat && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  PolyQuat Based Liquid Algacide:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.polyQuat\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .copperBlend && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Copper/PolyQuat Blend Algacide:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.copperBlend\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .sodaAsh && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Soda Ash (Sodium Carbonate):\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.sodaAsh\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .CalciumChloride && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Calcium Chloride (Hardness+):\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.CalciumChloride\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .conditioner && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Conditioner (Cyanuric Acid):\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.conditioner\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .sodiumBicar && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Sodium Bicarbonate (baking soda):\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.sodiumBicar\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .diatomaceous && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Diatomaceous Earth:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.diatomaceous\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .diatomaceousAlt && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Diatomaceous Earth Alternative:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.diatomaceousAlt\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .sodiumBro && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Sodium Bromide:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.sodiumBro\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .dryAcid && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Dry Acid:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.dryAcid\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .Clarifier && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Clarifier:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.Clarifier\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .phosphateRemover && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Phosphate Remover:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.phosphateRemover\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .salt && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Salt:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.salt\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .enzymes && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Pool Enzymes:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.enzymes\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .metalSequester && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Metal Sequestering Agent:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.metalSequester\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .bromineGran && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Bromine Granular:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.bromineGran\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .bromineTab && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Bromine Tablets:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.bromineTab\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .poolFlocc && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Pool Flocculant:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.poolFlocc\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n\r\n                            {recentActivity[recentModal.index].serviceLog\r\n                              .borate && (\r\n                              <Col>\r\n                                <Label className='form-control-label'>\r\n                                  Pool Flocculant:\r\n                                </Label>\r\n                                <br />\r\n                                <p>\r\n                                  <strong>\r\n                                    {\r\n                                      recentActivity[recentModal.index]\r\n                                        .serviceLog.Borate\r\n                                    }\r\n                                  </strong>\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n                    </Collapse>\r\n                  </Col>\r\n                </Row>\r\n              </ModalBody>\r\n            </Modal>\r\n          )}\r\n          <Row>\r\n            <Col lg='6'>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-8'>\r\n                      <h3 className='mb-0 float-left'>Recent Activity </h3>\r\n                      <Badge className='float-left mgn-left-8' color='primary'>\r\n                        {recentActivity.length} Item(s)\r\n                      </Badge>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <Button\r\n                        size='sm'\r\n                        color='primary'\r\n                        onClick={toggleActivityModal}\r\n                      >\r\n                        Add Activity\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      {recentActivity.length < 1 ? (\r\n                        <div className='text-center'>No Activity Found...</div>\r\n                      ) : (\r\n                        <Fragment>\r\n                          {recentActivity.slice(0, 4).map(item => (\r\n                            <Fragment key={item._id}>\r\n                              <Row className='mb-4'>\r\n                                <Col xs={{ size: 'auto' }}>\r\n                                  <i\r\n                                    className={`fas fa-${\r\n                                      item.icon\r\n                                    } fa-2x color-${\r\n                                      item.log === 'Phone Call'\r\n                                        ? 'green'\r\n                                        : item.log === 'Email'\r\n                                        ? 'yellow'\r\n                                        : item.log === 'Service'\r\n                                        ? 'purple'\r\n                                        : 'primary'\r\n                                    }`}\r\n                                  ></i>\r\n                                </Col>\r\n                                <Col xs={{ size: 'auto' }}>\r\n                                  <h3>\r\n                                    {item.type} {item.log}{' '}\r\n                                    {item.type === 'Incoming' ? (\r\n                                      <span>from</span>\r\n                                    ) : (\r\n                                      <span>to</span>\r\n                                    )}{' '}\r\n                                    {customer[0].firstName}{' '}\r\n                                    {customer[0].lastName}\r\n                                  </h3>\r\n                                  <p>{item.comments}</p>\r\n                                  <small>\r\n                                    <Moment format='ddd, MMM DD, YYYY | LT'>\r\n                                      {item.dateAdded}\r\n                                    </Moment>\r\n                                  </small>{' '}\r\n                                  <Button\r\n                                    size='sm'\r\n                                    color='primary'\r\n                                    onClick={() => {\r\n                                      setRecentModal({\r\n                                        isViewOpen: true,\r\n                                        active: item._id,\r\n                                        index: recentActivity.findIndex(\r\n                                          x => x._id === item._id\r\n                                        )\r\n                                      });\r\n                                    }}\r\n                                  >\r\n                                    View\r\n                                  </Button>\r\n                                  <Button\r\n                                    size='sm'\r\n                                    color='success'\r\n                                    onClick={() => {\r\n                                      setRecentModal({\r\n                                        ...recentModal,\r\n                                        isEditOpen: true,\r\n                                        isViewOpen: false,\r\n                                        active: item._id,\r\n                                        index: recentActivity.findIndex(\r\n                                          x => x._id === item._id\r\n                                        )\r\n                                      });\r\n                                    }}\r\n                                  >\r\n                                    Edit\r\n                                  </Button>\r\n                                  <Button\r\n                                    size='sm'\r\n                                    color='warning'\r\n                                    onClick={() =>\r\n                                      toggleActivityDeleteModal(item._id)\r\n                                    }\r\n                                  >\r\n                                    Delete\r\n                                  </Button>\r\n                                </Col>\r\n                              </Row>\r\n\r\n                              <Modal\r\n                                isOpen={deleteActivity.isOpen}\r\n                                toggle={() =>\r\n                                  setDeleteActivity({ isOpen: false })\r\n                                }\r\n                              >\r\n                                <ModalHeader\r\n                                  toggle={() =>\r\n                                    setDeleteActivity({ isOpen: false })\r\n                                  }\r\n                                >\r\n                                  Delete Service Note?\r\n                                </ModalHeader>\r\n                                <ModalBody>\r\n                                  Are you sure you want to delete this activity?\r\n                                  This action cannot be undone.\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                  <Button\r\n                                    onClick={() =>\r\n                                      setDeleteActivity({ isOpen: false })\r\n                                    }\r\n                                  >\r\n                                    Cancel\r\n                                  </Button>\r\n                                  <Button\r\n                                    color='danger'\r\n                                    onClick={() =>\r\n                                      recentActivityDeleteHandler(\r\n                                        deleteActivity.active\r\n                                      )\r\n                                    }\r\n                                  >\r\n                                    {deleteActivity.isLoading ? (\r\n                                      <span>\r\n                                        <SpinnerCircular\r\n                                          size={24}\r\n                                          thickness={180}\r\n                                          speed={100}\r\n                                          color='rgba(57, 125, 172, 1)'\r\n                                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                        />{' '}\r\n                                        Processing...\r\n                                      </span>\r\n                                    ) : (\r\n                                      <span>Delete Activity</span>\r\n                                    )}\r\n                                  </Button>\r\n                                </ModalFooter>\r\n                              </Modal>\r\n                            </Fragment>\r\n                          ))}\r\n                        </Fragment>\r\n                      )}\r\n                    </Fragment>\r\n                  )}\r\n                  <Button\r\n                    color='primary'\r\n                    block\r\n                    onClick={() => {\r\n                      setRecentModal({ ...recentModal, isViewAllOpen: true });\r\n                    }}\r\n                  >\r\n                    View All\r\n                  </Button>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Modal isOpen={serviceNoteModal} toggle={toggleServiceNoteModal}>\r\n              <ModalHeader toggle={toggleServiceNoteModal}>\r\n                Add a Service Note\r\n              </ModalHeader>\r\n\r\n              <Formik\r\n                initialValues={{\r\n                  customerId: match.params.id,\r\n                  content: '',\r\n                  showDuringVisit: false\r\n                }}\r\n                onSubmit={async data => {\r\n                  setLoadingAddServiceNote(true);\r\n                  await addServiceNote(data);\r\n                  await getCustomerServiceNotes(match.params.id);\r\n                  toggleServiceNoteModal();\r\n                  setLoadingAddServiceNote(false);\r\n                }}\r\n                render={({\r\n                  handleSubmit,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  values,\r\n                  errors,\r\n                  touched\r\n                }) => (\r\n                  <Fragment>\r\n                    <ModalBody>\r\n                      <Form>\r\n                        <Row>\r\n                          <Col lg='12'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='content'\r\n                                className='form-control-label'\r\n                              >\r\n                                Note Content\r\n                              </Label>\r\n                              <Input\r\n                                type='textarea'\r\n                                name='content'\r\n                                placeholder='Some note here...'\r\n                                value={values.content}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.content && touched.content && (\r\n                                <p className='color-red'>{errors.content}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col lg='12'>\r\n                            <FormGroup>\r\n                              <span>Show to Technician During Visit?</span>\r\n                              <br />\r\n                              <small>\r\n                                This will make note display to technician during\r\n                                each service visit.\r\n                              </small>\r\n                              <br />\r\n                              <br />\r\n                              <Label className='custom-toggle'>\r\n                                <Input\r\n                                  type='checkbox'\r\n                                  name='showDuringVisit'\r\n                                  onChange={handleChange}\r\n                                  value={values.showDuringVisit}\r\n                                />\r\n                                <span\r\n                                  className='custom-toggle-slider rounded-circle'\r\n                                  data-label-off='No'\r\n                                  data-label-on='Yes'\r\n                                ></span>\r\n                              </Label>\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                      </Form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                      <Button\r\n                        color='secondary'\r\n                        onClick={toggleServiceNoteModal}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                      <Button\r\n                        color='success'\r\n                        type='submit'\r\n                        onClick={handleSubmit}\r\n                      >\r\n                        {loadingAddServiceNote ? (\r\n                          <span>\r\n                            <span>\r\n                              <SpinnerCircular\r\n                                size={24}\r\n                                thickness={180}\r\n                                speed={100}\r\n                                color='rgba(57, 125, 172, 1)'\r\n                                secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                              />{' '}\r\n                              Processing...\r\n                            </span>\r\n                          </span>\r\n                        ) : (\r\n                          <span>Save Note</span>\r\n                        )}\r\n                      </Button>{' '}\r\n                    </ModalFooter>\r\n                  </Fragment>\r\n                )}\r\n              />\r\n            </Modal>\r\n            <Col lg='6'>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-8'>\r\n                      <h3 className='mb-0 float-left'>Service Notes </h3>\r\n                      <Badge className='float-left mgn-left-8' color='primary'>\r\n                        {serviceNotes.length} Item(s)\r\n                      </Badge>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <Button\r\n                        color='primary'\r\n                        size='sm'\r\n                        onClick={toggleServiceNoteModal}\r\n                      >\r\n                        Add Service Note\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      {!serviceNotes || serviceNotes.length < 1 ? (\r\n                        <div className='text-center'>\r\n                          <span>No Notes Found...</span>\r\n                        </div>\r\n                      ) : (\r\n                        <Fragment>\r\n                          {serviceNotes.map(note => (\r\n                            <Row key={note._id} className='mb-4'>\r\n                              <Col xs={{ size: '1' }}>\r\n                                <i className='fas fa-clipboard fa-2x color-orange'></i>\r\n                              </Col>\r\n                              <Col xs={{ size: '11' }}>\r\n                                <h3>You created a Service Note</h3>{' '}\r\n                                {note.showDuringVisit === true && (\r\n                                  <Badge color='success'>\r\n                                    Show Note During Visits\r\n                                  </Badge>\r\n                                )}\r\n                                <p>{note.content}</p>\r\n                                <small>\r\n                                  {note.lastUpdated ? (\r\n                                    <Fragment>\r\n                                      <span>Updated: </span>\r\n                                      <Moment format='ddd, MMM DD, YYYY | LT'>\r\n                                        {note.lastUpdated}\r\n                                      </Moment>\r\n                                    </Fragment>\r\n                                  ) : (\r\n                                    <Moment format='ddd, MMM DD, YYYY | LT'>\r\n                                      {note.dateAdded}\r\n                                    </Moment>\r\n                                  )}\r\n                                </small>{' '}\r\n                                <Button\r\n                                  size='sm'\r\n                                  color='primary'\r\n                                  onClick={() => toggleNoteEditModal(note._id)}\r\n                                >\r\n                                  Edit\r\n                                </Button>\r\n                                <Button\r\n                                  size='sm'\r\n                                  color='warning'\r\n                                  onClick={() =>\r\n                                    deleteNoteModalToggle(note._id)\r\n                                  }\r\n                                >\r\n                                  Delete\r\n                                </Button>\r\n                              </Col>\r\n                              <Modal\r\n                                isOpen={deleteSure.isOpen}\r\n                                toggle={() => setDeleteSure({ isOpen: false })}\r\n                              >\r\n                                <ModalHeader\r\n                                  toggle={() =>\r\n                                    setDeleteSure({ isOpen: false })\r\n                                  }\r\n                                >\r\n                                  Delete Service Note?\r\n                                </ModalHeader>\r\n                                <ModalBody>\r\n                                  Are you sure you want to delete this service\r\n                                  note? This action cannot be undone.\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                  <Button\r\n                                    onClick={() =>\r\n                                      setDeleteSure({ isOpen: false })\r\n                                    }\r\n                                  >\r\n                                    Cancel\r\n                                  </Button>\r\n                                  <Button\r\n                                    color='danger'\r\n                                    onClick={() =>\r\n                                      deleteNoteHandler(deleteSure.activeNote)\r\n                                    }\r\n                                  >\r\n                                    {deleteNoteLoading ? (\r\n                                      <span>\r\n                                        <SpinnerCircular\r\n                                          size={24}\r\n                                          thickness={180}\r\n                                          speed={100}\r\n                                          color='rgba(57, 125, 172, 1)'\r\n                                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                        />{' '}\r\n                                        Processing...\r\n                                      </span>\r\n                                    ) : (\r\n                                      <span>Delete Note</span>\r\n                                    )}\r\n                                  </Button>\r\n                                </ModalFooter>\r\n                              </Modal>\r\n                              <EditServiceNoteModal\r\n                                isOpen={editNoteModal.isOpen}\r\n                                toggle={toggleNoteEditModal}\r\n                                activeNote={editNoteModal.activeNote}\r\n                                noteId={note._id}\r\n                                noteContent={note.content}\r\n                                showDuringVisit={note.showDuringVisit}\r\n                                editFunction={editNoteHandler}\r\n                              />\r\n                            </Row>\r\n                          ))}\r\n                        </Fragment>\r\n                      )}\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md='7'>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-8'>\r\n                      <h3 className='mb-0'>Billing Details </h3>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <Button\r\n                        onClick={toggleBillingModal}\r\n                        color='primary'\r\n                        size='sm'\r\n                      >\r\n                        Edit Billing Details\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      <Row className='mb-4'>\r\n                        <Col sm='4'>\r\n                          <div className='form-control-label'>Billing Type</div>\r\n                          <p>{customer[0].billingType}</p>\r\n                        </Col>\r\n                        <Col sm='4'>\r\n                          <div className='form-control-label'>\r\n                            Billing Address\r\n                          </div>\r\n                          <p>\r\n                            {customer[0].billingSame ? (\r\n                              <span>Same as Service Address</span>\r\n                            ) : (\r\n                              <span>\r\n                                {customer[0].billingAddress},{' '}\r\n                                {customer[0].billingCity}{' '}\r\n                                {customer[0].billingState},{' '}\r\n                                {customer[0].billingZip}\r\n                              </span>\r\n                            )}\r\n                          </p>\r\n                        </Col>\r\n                        <Col sm='4'>\r\n                          <div className='form-control-label'>\r\n                            Card On File?\r\n                          </div>\r\n                          <p>\r\n                            {customer[0].paymentMethod !== 'N/A' ? 'Yes' : 'No'}\r\n                          </p>\r\n                        </Col>\r\n                      </Row>\r\n                      {customer[0].billingType === 'Autobilling' && (\r\n                        <Row>\r\n                          <Col sm='4'>\r\n                            <div className='form-control-label'>\r\n                              Billing Status\r\n                            </div>\r\n\r\n                            {customer[0].stripeSubscription ? (\r\n                              <Badge\r\n                                color={\r\n                                  customer[0].stripeSubscription.status ===\r\n                                  'active'\r\n                                    ? 'success'\r\n                                    : 'danger'\r\n                                }\r\n                              >\r\n                                {customer[0].stripeSubscription.status}\r\n                              </Badge>\r\n                            ) : (\r\n                              <Badge color='danger'>N/A</Badge>\r\n                            )}\r\n                          </Col>\r\n\r\n                          <Col sm='4'>\r\n                            <div className='form-control-label'>\r\n                              Billing Rate\r\n                            </div>\r\n                            {customer[0].stripeSubscription ? (\r\n                              <p>\r\n                                ${customer[0].stripeSubscription.quantity}.00\r\n                              </p>\r\n                            ) : (\r\n                              <p>N/A</p>\r\n                            )}\r\n                          </Col>\r\n\r\n                          <Col sm='4'>\r\n                            <div className='form-control-label'>\r\n                              Billing Frequency\r\n                            </div>\r\n                            <p>{customer[0].billingFrequency}</p>\r\n                          </Col>\r\n                        </Row>\r\n                      )}\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n              <Modal isOpen={editBillingModal} toggle={toggleBillingModal}>\r\n                <ModalHeader toggle={toggleBillingModal}>\r\n                  Edit Billing Details:\r\n                </ModalHeader>\r\n                {customer && !singleLoading && (\r\n                  <ModalBody>\r\n                    <Formik\r\n                      initialValues={{\r\n                        billingSame: customer[0].billingSame,\r\n                        billingType: 'Autobilling',\r\n                        // paymentMethod: customer[0].paymentMethod,\r\n                        billingAddress: customer[0].billingAddress,\r\n                        billingCity: customer[0].billingCity,\r\n                        billingState: customer[0].billingState,\r\n                        billingZip: customer[0].billingZip,\r\n                        rate: customer[0].serviceRate,\r\n                        billingFrequency: customer[0].billingFrequency\r\n                      }}\r\n                      onSubmit={async data => {\r\n                        setEditBillingLoading(true);\r\n                        await updateBilling(match.params.id, data);\r\n                        await getSingleCustomer(match.params.id);\r\n                        await addPaymentMethod(\r\n                          cardState,\r\n                          match.params.id,\r\n                          data.billingFrequency\r\n                        );\r\n\r\n                        await getSingleCustomer(match.params.id);\r\n\r\n                        // if (\r\n                        //   customer[0].billingType === 'Manual Billing' &&\r\n                        //   customer[0].stripeSubscriptionId\r\n                        // ) {\r\n                        //   await cancelSubscription(match.params.id);\r\n                        //   await getSingleCustomer(match.params.id);\r\n                        // }\r\n\r\n                        // if (\r\n                        //   customer[0].billingType === 'Autobilling' &&\r\n                        //   customer[0].stripeSubscriptionId === undefined\r\n                        // ) {\r\n                        //   await addSubscription(undefined, match.params.id);\r\n                        //   await getSingleCustomer(match.params.id);\r\n                        // }\r\n\r\n                        setEditBillingLoading(false);\r\n                        toggleBillingModal();\r\n                      }}\r\n                      innerRef={billingRef}\r\n                      render={({\r\n                        handleSubmit,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        values,\r\n                        errors,\r\n                        touched\r\n                      }) => (\r\n                        <Container>\r\n                          <Form onSubmit={handleSubmit}>\r\n                            <FormGroup>\r\n                              <Input\r\n                                name='billingSame'\r\n                                type='checkbox'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.billingSame}\r\n                                checked={values.billingSame}\r\n                              />\r\n\r\n                              <Label\r\n                                for='billingSame'\r\n                                className='form-control-label'\r\n                              >\r\n                                Billing Address Same As Service Address?\r\n                              </Label>\r\n                            </FormGroup>\r\n                            {!values.billingSame && (\r\n                              <Fragment>\r\n                                <Row>\r\n                                  <Col lg='12'>\r\n                                    <FormGroup>\r\n                                      <Label\r\n                                        for='billingAddress'\r\n                                        className='form-control-label'\r\n                                      >\r\n                                        Billing Address\r\n                                      </Label>\r\n                                      <Input\r\n                                        name='billingAddress'\r\n                                        value={values.billingAddress}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        type='text'\r\n                                        placeholder='2070 Mercer Avenue'\r\n                                      />\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                  <Col lg='4'>\r\n                                    <FormGroup>\r\n                                      <Label\r\n                                        for='billingCity'\r\n                                        className='form-control-label'\r\n                                      >\r\n                                        Billing City\r\n                                      </Label>\r\n                                      <Input\r\n                                        name='billingCity'\r\n                                        value={values.billingCity}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        type='text'\r\n                                        placeholder='Beverly Hills'\r\n                                      />\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                  <Col lg='4'>\r\n                                    <FormGroup>\r\n                                      <Label\r\n                                        for='billingState'\r\n                                        className='form-control-label'\r\n                                      >\r\n                                        Billing State\r\n                                      </Label>\r\n                                      <Input\r\n                                        name='billingState'\r\n                                        value={values.billingState}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        type='text'\r\n                                        placeholder='CA'\r\n                                      />\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                  <Col lg='4'>\r\n                                    <FormGroup>\r\n                                      <Label\r\n                                        for='billingZip'\r\n                                        className='form-control-label'\r\n                                      >\r\n                                        Billing Zip\r\n                                      </Label>\r\n                                      <Input\r\n                                        name='billingZip'\r\n                                        value={values.billingZip}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        type='text'\r\n                                        placeholder='90210'\r\n                                      />\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </Row>\r\n                              </Fragment>\r\n                            )}\r\n                            {/* <FormGroup>\r\n                              <Label\r\n                                for='billingType'\r\n                                className='form-control-label'\r\n                              >\r\n                                Billing Type:\r\n                              </Label>\r\n                              <Input\r\n                                type='select'\r\n                                name='billingType'\r\n                                value={values.billingType}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              >\r\n                                <option>N/A</option>\r\n                                <option>Autobilling</option>\r\n                                <option>Manual Billing</option>\r\n                              </Input>\r\n                            </FormGroup> */}\r\n\r\n                            {values.billingType === 'Autobilling' && (\r\n                              <Fragment>\r\n                                {customer[0].paymentMethod ? (\r\n                                  <Row>\r\n                                    <Col>\r\n                                      <FormGroup>\r\n                                        <Label className='form-control-label'>\r\n                                          Card On File:\r\n                                        </Label>\r\n\r\n                                        <p>\r\n                                          {customer[0].paymentMethod !==\r\n                                          'N/A' ? (\r\n                                            <span>Yes</span>\r\n                                          ) : (\r\n                                            <span>No</span>\r\n                                          )}\r\n                                        </p>\r\n                                      </FormGroup>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n                                      <FormGroup>\r\n                                        <Label className='form-control-label'>\r\n                                          Last 4 Digits:\r\n                                        </Label>\r\n\r\n                                        <p>{customer[0].paymentLast4}</p>\r\n                                      </FormGroup>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n                                      <FormGroup>\r\n                                        <Label className='form-control-label'>\r\n                                          Exp Date:\r\n                                        </Label>\r\n\r\n                                        <p>{customer[0].paymentExpDate}</p>\r\n                                      </FormGroup>\r\n                                    </Col>\r\n                                  </Row>\r\n                                ) : (\r\n                                  <Row>\r\n                                    <Col>\r\n                                      <FormGroup>\r\n                                        <Label className='form-control-label'>\r\n                                          Card On File:\r\n                                        </Label>\r\n\r\n                                        <p>No</p>\r\n                                      </FormGroup>\r\n                                    </Col>\r\n                                  </Row>\r\n                                )}\r\n\r\n                                <Button\r\n                                  color='info'\r\n                                  block\r\n                                  className='btn-icon'\r\n                                  onClick={() => {\r\n                                    setChangeCard(!changeCard);\r\n                                  }}\r\n                                >\r\n                                  {customer[0].paymentMethod ? (\r\n                                    <Fragment>\r\n                                      <span class='btn-inner--icon'>\r\n                                        <i class='ni ni-credit-card'></i>\r\n                                      </span>\r\n                                      <span class='btn-inner--text'>\r\n                                        Change Card On File\r\n                                      </span>\r\n                                    </Fragment>\r\n                                  ) : (\r\n                                    <Fragment>\r\n                                      <span class='btn-inner--icon'>\r\n                                        <i class='ni ni-fat-plus'></i>\r\n                                      </span>\r\n                                      <span class='btn-inner--text'>\r\n                                        Add Card On File\r\n                                      </span>\r\n                                    </Fragment>\r\n                                  )}\r\n                                </Button>\r\n\r\n                                <br />\r\n\r\n                                <Collapse isOpen={changeCard}>\r\n                                  <Card>\r\n                                    <CardBody>\r\n                                      <Row>\r\n                                        <Col lg='12'>\r\n                                          <FormGroup>\r\n                                            <Cards\r\n                                              cvc={cardState.cvc}\r\n                                              expiry={cardState.expiry.replace(\r\n                                                ' / ',\r\n                                                ''\r\n                                              )}\r\n                                              focused={cardState.focus}\r\n                                              name={cardState.name}\r\n                                              number={cardState.number}\r\n                                            />\r\n                                          </FormGroup>\r\n                                        </Col>\r\n                                      </Row>\r\n\r\n                                      <Row>\r\n                                        <Col lg='12'>\r\n                                          <FormGroup>\r\n                                            <Label className='form-control-label'>\r\n                                              Card Number\r\n                                            </Label>\r\n\r\n                                            <CreditCardInput\r\n                                              cardNumberInputProps={{\r\n                                                value: cardState.number,\r\n                                                onChange: handleCardInput,\r\n                                                onFocus: handleCardFocus,\r\n                                                name: 'number'\r\n                                              }}\r\n                                              cardExpiryInputProps={{\r\n                                                value: cardState.expiry,\r\n                                                onChange: handleCardInput,\r\n                                                onFocus: handleCardFocus,\r\n                                                name: 'expiry'\r\n                                              }}\r\n                                              cardCVCInputProps={{\r\n                                                value: cardState.cvc,\r\n                                                onChange: handleCardInput,\r\n                                                onFocus: handleCardFocus,\r\n                                                name: 'cvc'\r\n                                              }}\r\n                                            />\r\n                                          </FormGroup>\r\n                                        </Col>\r\n                                      </Row>\r\n\r\n                                      <Row>\r\n                                        <Col lg='12'>\r\n                                          <FormGroup>\r\n                                            <Label className='form-control-label'>\r\n                                              Name On Card\r\n                                            </Label>\r\n                                            <Input\r\n                                              type='text'\r\n                                              name='name'\r\n                                              placeholder='Name On Card'\r\n                                              onChange={handleCardInput}\r\n                                              onFocus={handleCardFocus}\r\n                                            />\r\n                                          </FormGroup>\r\n                                        </Col>\r\n                                      </Row>\r\n                                    </CardBody>\r\n                                  </Card>\r\n                                </Collapse>\r\n\r\n                                <Button\r\n                                  color='success'\r\n                                  block\r\n                                  onClick={saveBilling}\r\n                                >\r\n                                  Save Billing Information\r\n                                </Button>\r\n\r\n                                <br />\r\n\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='rate'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Service Rate:\r\n                                  </Label>\r\n                                  <InputGroup>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                      <InputGroupText>$</InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input\r\n                                      type='number'\r\n                                      name='rate'\r\n                                      value={values.rate}\r\n                                      onChange={handleChange}\r\n                                      onBlur={handleBlur}\r\n                                    />\r\n                                  </InputGroup>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='billingFrequency'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Billing Frequency:\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='select'\r\n                                    name='billingFrequency'\r\n                                    value={values.billingFrequency}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                  >\r\n                                    <option>Weekly</option>\r\n                                    <option>Monthly</option>\r\n                                  </Input>\r\n                                </FormGroup>\r\n\r\n                                <Button\r\n                                  color='success'\r\n                                  block\r\n                                  onClick={async () => {\r\n                                    setEditBillingLoading(true);\r\n                                    await updateBillingRate(\r\n                                      values,\r\n                                      match.params.id\r\n                                    );\r\n                                    await getSingleCustomer(match.params.id);\r\n                                    setEditBillingLoading(false);\r\n                                  }}\r\n                                >\r\n                                  {editBillingLoading ? (\r\n                                    <span>Processing...</span>\r\n                                  ) : (\r\n                                    <span>Save Billing Settings</span>\r\n                                  )}\r\n                                </Button>\r\n\r\n                                <br />\r\n\r\n                                <ConfirmModal\r\n                                  openState={confirmAutobilling}\r\n                                  toggle={() => {\r\n                                    setConfirmAutobilling(!confirmAutobilling);\r\n                                  }}\r\n                                  header='Are you sure you want to enable Autobilling?'\r\n                                  action='enable autobilling for this customer'\r\n                                  result='This action will charge the card on file the defined service rate immediately.'\r\n                                  loading={editBillingLoading}\r\n                                  confirm={async () => {\r\n                                    setEditBillingLoading(true);\r\n                                    await addSubscription(\r\n                                      undefined,\r\n                                      match.params.id,\r\n                                      values.billingFrequency\r\n                                    );\r\n                                    await getSingleCustomer(match.params.id);\r\n                                    setConfirmAutobilling(false);\r\n                                    setEditBillingLoading(false);\r\n                                  }}\r\n                                />\r\n\r\n                                <ConfirmModal\r\n                                  openState={confirmDisableBilling}\r\n                                  toggle={() => {\r\n                                    setConfirmDisableBilling(\r\n                                      !confirmDisableBilling\r\n                                    );\r\n                                  }}\r\n                                  header='Are you sure you want to disable autobilling?'\r\n                                  action='disable autobilling for this customer'\r\n                                  result='This action will cancel autobilling for this customer. This customer will not be billed again until you re-enable autobilling.'\r\n                                  loading={editBillingLoading}\r\n                                  confirm={async () => {\r\n                                    setEditBillingLoading(true);\r\n                                    await cancelSubscription(match.params.id);\r\n                                    await getSingleCustomer(match.params.id);\r\n                                    setConfirmDisableBilling(false);\r\n                                    // setEditBillingModal(false);\r\n                                    setEditBillingLoading(false);\r\n                                  }}\r\n                                />\r\n\r\n                                {customer[0].billingType ===\r\n                                'Manual Billing' ? (\r\n                                  <Button\r\n                                    color='warning'\r\n                                    block\r\n                                    onClick={async () => {\r\n                                      setConfirmAutobilling(true);\r\n                                      // setEditBillingLoading(true);\r\n                                      // await addSubscription(\r\n                                      //   undefined,\r\n                                      //   match.params.id,\r\n                                      //   values.billingFrequency\r\n                                      // );\r\n                                      // await getSingleCustomer(match.params.id);\r\n                                      // setEditBillingLoading(false);\r\n                                    }}\r\n                                  >\r\n                                    {!editBillingLoading ? (\r\n                                      <span>Enable Autobilling</span>\r\n                                    ) : (\r\n                                      <span>\r\n                                        {' '}\r\n                                        <SpinnerCircular\r\n                                          size={24}\r\n                                          thickness={180}\r\n                                          speed={100}\r\n                                          color='rgba(57, 125, 172, 1)'\r\n                                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                        />{' '}\r\n                                        Processing...\r\n                                      </span>\r\n                                    )}\r\n                                  </Button>\r\n                                ) : (\r\n                                  <Button\r\n                                    color='danger'\r\n                                    block\r\n                                    onClick={async () => {\r\n                                      setConfirmDisableBilling(true);\r\n                                      // setEditBillingLoading(true);\r\n                                      // await cancelSubscription(match.params.id);\r\n                                      // await getSingleCustomer(match.params.id);\r\n                                      // setEditBillingLoading(false);\r\n                                    }}\r\n                                  >\r\n                                    {!editBillingLoading ? (\r\n                                      <span>Disable Autobilling</span>\r\n                                    ) : (\r\n                                      <span>\r\n                                        {' '}\r\n                                        <SpinnerCircular\r\n                                          size={24}\r\n                                          thickness={180}\r\n                                          speed={100}\r\n                                          color='rgba(57, 125, 172, 1)'\r\n                                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                        />{' '}\r\n                                        Processing...\r\n                                      </span>\r\n                                    )}\r\n                                  </Button>\r\n                                )}\r\n                              </Fragment>\r\n                            )}\r\n\r\n                            {/* <FormGroup>\r\n                              <Label\r\n                                for='billingType'\r\n                                className='form-control-label'\r\n                              >\r\n                                Payment Method:\r\n                              </Label>\r\n                              <Input\r\n                                type='select'\r\n                                name='paymentMethod'\r\n                                value={values.paymentMethod}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              >\r\n                                <option>Credit Card</option>\r\n                                <option>Invoice</option>\r\n                              </Input>\r\n                            </FormGroup> */}\r\n                          </Form>\r\n                        </Container>\r\n                      )}\r\n                    />\r\n                  </ModalBody>\r\n                )}\r\n                <ModalFooter>\r\n                  <Button block onClick={toggleBillingModal}>\r\n                    Cancel\r\n                  </Button>\r\n                  {/* <Button onClick={saveBilling} color='success'>\r\n                    {editBillingLoading ? (\r\n                      <span>\r\n                        {' '}\r\n                        <SpinnerCircular\r\n                          size={24}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />{' '}\r\n                        Processing...\r\n                      </span>\r\n                    ) : (\r\n                      <span>Save Changes</span>\r\n                    )}\r\n                  </Button> */}\r\n                </ModalFooter>\r\n              </Modal>\r\n            </Col>\r\n            <Col md='5'>\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className='row align-items-center'>\r\n                    <div className='col-8'>\r\n                      <h3 className='mb-0'>Service Checklist </h3>\r\n                    </div>\r\n                    <div className='col-4 text-right'>\r\n                      <Link\r\n                        to={`/customers/${match.params.id}/manage/serviceChecklist`}\r\n                        className='btn btn-sm btn-primary'\r\n                      >\r\n                        Edit Checklist\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {!customer || singleLoading ? (\r\n                    <Fragment>\r\n                      <div className='text-center'>\r\n                        <h4>Loading Data...</h4>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                      </div>\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Fragment>\r\n                      {serviceChecklist.length < 1 ? (\r\n                        <div className='text-center'>No Items Found...</div>\r\n                      ) : (\r\n                        <Fragment>\r\n                          {serviceChecklist.map(item => (\r\n                            <Row key={item._id}>\r\n                              <Col xs={{ size: '12' }}>\r\n                                <h3>\r\n                                  <i className='fas fa-chevron-right fa-1x color-green'></i>{' '}\r\n                                  {item.item}\r\n                                </h3>\r\n                              </Col>\r\n                            </Row>\r\n                          ))}\r\n                        </Fragment>\r\n                      )}\r\n                    </Fragment>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nViewCustomer.propTypes = {\r\n  getSingleCustomer: PropTypes.func.isRequired,\r\n  getCustomerServiceNotes: PropTypes.func.isRequired,\r\n  addServiceNote: PropTypes.func.isRequired,\r\n  deleteServiceNote: PropTypes.func.isRequired,\r\n  updateServiceNote: PropTypes.func.isRequired,\r\n  addRecentActivity: PropTypes.func.isRequired,\r\n  getRecentActivity: PropTypes.func.isRequired,\r\n  deleteRecentActivity: PropTypes.func.isRequired,\r\n  getChecklist: PropTypes.func.isRequired,\r\n  updateBilling: PropTypes.func.isRequired,\r\n  addPaymentMethod: PropTypes.func.isRequired,\r\n  getWorkOrders: PropTypes.func.isRequired,\r\n  createWorkOrder: PropTypes.func.isRequired,\r\n  getEmployees: PropTypes.func.isRequired,\r\n  addSubscription: PropTypes.func.isRequired,\r\n  cancelSubscription: PropTypes.func.isRequired,\r\n  updateBillingRate: PropTypes.func.isRequired,\r\n  customer: PropTypes.object.isRequired,\r\n  serviceNotes: PropTypes.array.isRequired,\r\n  recentActivity: PropTypes.array.isRequired,\r\n  serviceChecklist: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  customers: state.customer,\r\n  employees: state.employee,\r\n  customer: state.customer.singleCustomer,\r\n  serviceNotes: state.customer.serviceNotes,\r\n  recentActivity: state.customer.recentActivity,\r\n  serviceChecklist: state.customer.checklist\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSingleCustomer,\r\n  addServiceNote,\r\n  getCustomerServiceNotes,\r\n  deleteServiceNote,\r\n  updateServiceNote,\r\n  addRecentActivity,\r\n  getRecentActivity,\r\n  deleteRecentActivity,\r\n  getChecklist,\r\n  updateBilling,\r\n  updateActivityComment,\r\n  addPaymentMethod,\r\n  getWorkOrders,\r\n  createWorkOrder,\r\n  getEmployees,\r\n  addSubscription,\r\n  cancelSubscription,\r\n  updateBillingRate\r\n})(ViewCustomer);\r\n",["292","293"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\AddCustomers.js",["294"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\customer.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\index.js",[],["295","296"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\AddUser.js",["297","298","299","300"],"import React, { Fragment, useRef, useState } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { addEmployee } from '../../actions/employee';\r\nimport { registerSubuser } from '../../actions/auth';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\nimport Alert from '../Layout/Alert';\r\n\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label\r\n} from 'reactstrap';\r\n\r\nimport { Formik } from 'formik';\r\n\r\nimport * as Yup from 'yup';\r\nimport generator from 'generate-password';\r\n\r\nconst AddUser = ({ addEmployee, registerSubuser }) => {\r\n  const [generatedPassword, setGeneratedPassword] = useState(null);\r\n\r\n  const phoneRegExp = /^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/;\r\n  const lowercaseRegex = /(?=.*[a-z])/;\r\n  const uppercaseRegex = /(?=.*[A-X])/;\r\n  const numericRegex = /(?=.*[0-9])/;\r\n\r\n  const formSchema = Yup.object().shape({\r\n    firstName: Yup.string().required('First name is required'),\r\n    lastName: Yup.string().required('Last name is required'),\r\n    email: Yup.string()\r\n      .email('Please provide a valid email')\r\n      .required('Email is required'),\r\n    phone: Yup.string()\r\n      .matches(phoneRegExp, 'Phone number is not valid')\r\n      .required('Phone is required'),\r\n    password: Yup.string()\r\n      .matches(lowercaseRegex, 'Password must contain lowercase letter')\r\n      .matches(uppercaseRegex, 'Password must contain uppercase letter')\r\n      .matches(numericRegex, 'Password must contain a number')\r\n      .min(8, 'Password must be at least 8 characters long')\r\n      .required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password')], 'Passwords do not match')\r\n      .required('Confirm password is required')\r\n  });\r\n\r\n  const formRef = useRef();\r\n  const history = useHistory();\r\n  const handleSubmit = () => {\r\n    if (formRef.current) {\r\n      formRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const onGeneratePassword = () => {\r\n    setGeneratedPassword(generator.generate({ length: 12, numbers: true }));\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='users' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/'>\r\n                          <i className='fas fa-home' />\r\n                        </a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/dashboard'>Dashboard</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/users'>Users</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <a href='/users/add'>Add User</a>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n                <div className='col-lg-6 col-5 text-right'>\r\n                  <a href='#' className='btn btn-sm btn-neutral'>\r\n                    New\r\n                  </a>\r\n                  <a href='#' className='btn btn-sm btn-neutral'>\r\n                    Filters\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              <div className='row align-items-center'>\r\n                <div className='col-8'>\r\n                  <h3 className='mb-0'>Add User </h3>\r\n                </div>\r\n                <div className='col-4 text-right'>\r\n                  <Button type='submit' color='primary' onClick={handleSubmit}>\r\n                    <span className='btn-inner--icon'>\r\n                      <i className='fas fa-save'></i>\r\n                    </span>{' '}\r\n                    <span className='btn-inner--text'>Save User</span>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Formik\r\n                initialValues={{\r\n                  firstName: '',\r\n                  lastName: '',\r\n                  email: '',\r\n                  phone: '',\r\n                  role: 'Technician',\r\n                  password: '',\r\n                  confirmPassword: ''\r\n                }}\r\n                innerRef={formRef}\r\n                onSubmit={async data => {\r\n                  await registerSubuser(data);\r\n                  history.push('/users');\r\n                }}\r\n                validationSchema={formSchema}\r\n                render={({\r\n                  handleSubmit,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  values,\r\n                  errors,\r\n                  touched\r\n                }) => (\r\n                  <Fragment>\r\n                    <Form onSubmit={handleSubmit}>\r\n                      <h6 className='heading-small text-muted mb-4'>\r\n                        User Information\r\n                      </h6>\r\n                      <div className='pl-lg-4'>\r\n                        <Row>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='firstName'\r\n                                className='form-control-label'\r\n                              >\r\n                                First Name\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='firstName'\r\n                                placeholder='John'\r\n                                value={values.firstName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.firstName && touched.firstName && (\r\n                                <p className='color-red'>{errors.firstName}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='lastName'\r\n                                className='form-control-label'\r\n                              >\r\n                                Last Name\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='lastName'\r\n                                placeholder='Doe'\r\n                                value={values.lastName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.lastName && touched.lastName && (\r\n                                <p className='color-red'>{errors.lastName}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label for='email' className='form-control-label'>\r\n                                Email\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='email'\r\n                                placeholder='john.doe@gmail.com'\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.email && touched.email && (\r\n                                <p className='color-red'>{errors.email}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label for='Phone' className='form-control-label'>\r\n                                Phone\r\n                              </Label>\r\n                              <Input\r\n                                type='text'\r\n                                name='phone'\r\n                                placeholder='555-555-5555'\r\n                                value={values.phone}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.phone && touched.phone && (\r\n                                <p className='color-red'>{errors.phone}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col lg='12'>\r\n                            <FormGroup>\r\n                              <Label for='role' className='form-control-label'>\r\n                                User Role\r\n                              </Label>\r\n                              <Input\r\n                                type='select'\r\n                                name='role'\r\n                                value={values.role}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              >\r\n                                <option>Technician</option>\r\n                                <option>Logistics</option>\r\n                                <option>Admin</option>\r\n                              </Input>\r\n                              {errors.role && touched.role && (\r\n                                <p className='color-red'>{errors.role}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='password'\r\n                                className='form-control-label'\r\n                              >\r\n                                Password\r\n                              </Label>\r\n                              <Input\r\n                                type='password'\r\n                                name='password'\r\n                                autoComplete='on'\r\n                                placeholder='Password'\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.password && touched.password && (\r\n                                <p className='color-red'>{errors.password}</p>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col lg='6'>\r\n                            <FormGroup>\r\n                              <Label\r\n                                for='confirmPassword'\r\n                                className='form-control-label'\r\n                              >\r\n                                Confirm Password\r\n                              </Label>\r\n                              <Input\r\n                                type='password'\r\n                                name='confirmPassword'\r\n                                autoComplete='on'\r\n                                placeholder='Confirm Password'\r\n                                value={values.confirmPassword}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                              {errors.confirmPassword &&\r\n                                touched.confirmPassword && (\r\n                                  <p className='color-red'>\r\n                                    {errors.confirmPassword}\r\n                                  </p>\r\n                                )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col lg='12'>\r\n                            {generatedPassword && (\r\n                              <Fragment>\r\n                                <span>Password: {generatedPassword}</span>\r\n                                <br />\r\n                                <small>\r\n                                  Make sure to save or write down this password\r\n                                </small>\r\n                                <br />\r\n                                <br />\r\n                              </Fragment>\r\n                            )}\r\n\r\n                            <Button\r\n                              color='success'\r\n                              onClick={onGeneratePassword}\r\n                            >\r\n                              Generate a Password\r\n                            </Button>\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                    </Form>\r\n                  </Fragment>\r\n                )}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </Container>\r\n\r\n        <Footer />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nAddUser.propTypes = {\r\n  addEmployee: PropTypes.func.isRequired,\r\n  registerSubuser: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, { addEmployee, registerSubuser })(AddUser);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\landing\\Landing.js",["301","302","303","304","305","306","307","308"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Row, Col, Container, Button, Nav } from 'react-bootstrap';\r\n\r\nimport Navbar from '../Layout/Navbar';\r\nimport LandingContent from './LandingContent';\r\nimport Footer from '../Layout/Footer';\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <Fragment>\r\n      <Navbar />\r\n      <LandingContent />\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n",["309","310"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ChangeEmail.js",["311","312","313"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Navbar.js",["314","315","316","317","318","319","320","321","322","323","324","325"],"import React, { Fragment, useState } from 'react';\r\nimport { Row, Col, Container, Button, Nav } from 'react-bootstrap';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport '../../../node_modules/jquery/dist/jquery.min.js';\r\nimport '../../../node_modules/bootstrap/dist/js/bootstrap.min.js';\r\n\r\nimport logo from '../../img/brand/Logo_Light.svg';\r\nimport mlogo from '../../img/brand/blue.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = ({ auth: { user, isAuthenticated, loading } }) => {\r\n  return (\r\n    <Fragment>\r\n      <nav\r\n        id='navbar-main'\r\n        className='navbar navbar-horizontal navbar-main navbar-expand-lg navbar-dark bg-primary'\r\n      >\r\n        <div className='container'>\r\n          <a className='navbar-brand' href='/'>\r\n            <img src={logo} />\r\n          </a>\r\n          <button\r\n            className='navbar-toggler'\r\n            type='button'\r\n            data-toggle='collapse'\r\n            data-target='#navbar-collapse'\r\n            aria-controls='navbar-collapse'\r\n            aria-expanded='false'\r\n            aria-label='Toggle navigation'\r\n          >\r\n            <span className='navbar-toggler-icon'></span>\r\n          </button>\r\n          <div\r\n            className='navbar-collapse navbar-custom-collapse collapse'\r\n            id='navbar-collapse'\r\n          >\r\n            <div className='navbar-collapse-header'>\r\n              <div className='row'>\r\n                <div className='col-6 collapse-brand'>\r\n                  <a href='/'>\r\n                    <img src={mlogo} />\r\n                  </a>\r\n                </div>\r\n                <div className='col-6 collapse-close'>\r\n                  <button\r\n                    type='button'\r\n                    className='navbar-toggler'\r\n                    data-toggle='collapse'\r\n                    data-target='#navbar-collapse'\r\n                    aria-controls='navbar-collapse'\r\n                    aria-expanded='false'\r\n                    aria-label='Toggle navigation'\r\n                  >\r\n                    <span></span>\r\n                    <span></span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <ul className='navbar-nav mr-auto'>\r\n              <li className='nav-item'>\r\n                <a href='/pricing' className='nav-link'>\r\n                  <span className='nav-link-inner--text'>Pricing</span>\r\n                </a>\r\n              </li>\r\n              <li className='nav-item'>\r\n                <Link to='/login' className='nav-link'>\r\n                  <span className='nav-link-inner--text'>Login</span>\r\n                </Link>\r\n              </li>\r\n              <li className='nav-item'>\r\n                <a href='./pages/examples/register.html' className='nav-link'>\r\n                  <span className='nav-link-inner--text'>Sign Up</span>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <hr className='d-lg-none' />\r\n            <ul className='navbar-nav align-items-lg-center ml-lg-auto'>\r\n              <li className='nav-item'>\r\n                <a\r\n                  className='nav-link nav-link-icon'\r\n                  href='https://www.facebook.com/creativetim'\r\n                  target='_blank'\r\n                  data-toggle='tooltip'\r\n                  title=''\r\n                  data-original-title='Like us on Facebook'\r\n                >\r\n                  <i className='fab fa-facebook-square'></i>\r\n                  <span className='nav-link-inner--text d-lg-none'>\r\n                    Facebook\r\n                  </span>\r\n                </a>\r\n              </li>\r\n              <li className='nav-item'>\r\n                <a\r\n                  className='nav-link nav-link-icon'\r\n                  href='https://www.instagram.com/creativetimofficial'\r\n                  target='_blank'\r\n                  data-toggle='tooltip'\r\n                  title=''\r\n                  data-original-title='Follow us on Instagram'\r\n                >\r\n                  <i className='fab fa-instagram'></i>\r\n                  <span className='nav-link-inner--text d-lg-none'>\r\n                    Instagram\r\n                  </span>\r\n                </a>\r\n              </li>\r\n              <li className='nav-item'>\r\n                <a\r\n                  className='nav-link nav-link-icon'\r\n                  href='https://twitter.com/creativetim'\r\n                  target='_blank'\r\n                  data-toggle='tooltip'\r\n                  title=''\r\n                  data-original-title='Follow us on Twitter'\r\n                >\r\n                  <i className='fab fa-twitter-square'></i>\r\n                  <span className='nav-link-inner--text d-lg-none'>\r\n                    Twitter\r\n                  </span>\r\n                </a>\r\n              </li>\r\n              <li className='nav-item'>\r\n                <a\r\n                  className='nav-link nav-link-icon'\r\n                  href='https://github.com/creativetimofficial'\r\n                  target='_blank'\r\n                  data-toggle='tooltip'\r\n                  title=''\r\n                  data-original-title='Star us on Github'\r\n                >\r\n                  <i className='fab fa-github'></i>\r\n                  <span className='nav-link-inner--text d-lg-none'>Github</span>\r\n                </a>\r\n              </li>\r\n              {!loading && isAuthenticated && (\r\n                <li className='nav-item d-none d-lg-block ml-lg-4'>\r\n                  <Link to='/dashboard' className='btn btn-neutral btn-icon'>\r\n                    <span className='btn-inner--icon'>\r\n                      <i className='fas fa-user-plus mr-2'></i>\r\n                    </span>\r\n                    <span className='nav-link-inner--text'>\r\n                      Go To Dashboard\r\n                    </span>\r\n                  </Link>\r\n                </li>\r\n              )}\r\n\r\n              {loading ||\r\n                (!isAuthenticated && (\r\n                  <li className='nav-item d-none d-lg-block ml-lg-4'>\r\n                    <Link\r\n                      to='/login'\r\n                      target='_blank'\r\n                      className='btn btn-neutral btn-icon'\r\n                    >\r\n                      <span className='btn-inner--icon'>\r\n                        <i className='fas fa-user-plus mr-2'></i>\r\n                      </span>\r\n                      <span className='nav-link-inner--text'>Login</span>\r\n                    </Link>\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nNavbar.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Navbar);\r\n",["326","327"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\utils\\RoutingMachine.js",[],["328","329"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\map.js",["330"],"import { setAlert } from './alert';\r\nimport { GET_ROUTE_LEGS } from './types';\r\n\r\n// Get Route Legs\r\nexport const getRouteLegs = legs => async dispatch => {\r\n  dispatch({\r\n    type: GET_ROUTE_LEGS,\r\n    payload: legs\r\n  });\r\n};\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\App.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\landing\\LandingContent.js",["331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347"],"import React, { Fragment } from 'react';\r\n\r\nimport { Row, Col, Container, Button, Nav } from 'react-bootstrap';\r\n\r\nconst LandingContent = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className='main-content'>\r\n        <div className='header bg-primary pt-5 pb-7'>\r\n          <div className='container'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center'>\r\n                <div className='col-lg-6'>\r\n                  <div className='pr-5'>\r\n                    <h1 className='display-2 text-white font-weight-bold mb-0'>\r\n                      <Row>\r\n                        <Col>\r\n                          PoolPro360 <span className='fsize-12'>Beta</span>\r\n                        </Col>\r\n                      </Row>\r\n                    </h1>\r\n                    <h2 className='display-4 text-white font-weight-light'>\r\n                      Your Pool Business, Simpler Than Ever Before.\r\n                    </h2>\r\n                    <p className='text-white mt-4'>\r\n                      Designed specifically for Pool Businesses, PoolPro360 will\r\n                      empower you with everything you need to run your business\r\n                      in one, simple, easy to use app.\r\n                    </p>\r\n                    <div className='mt-5'>\r\n                      <a\r\n                        href='./pages/dashboards/dashboard.html'\r\n                        className='btn btn-neutral my-2'\r\n                      >\r\n                        See Pricing\r\n                      </a>\r\n                      <a\r\n                        href='https://www.creative-tim.com/product/argon-dashboard-pro'\r\n                        className='btn btn-default my-2'\r\n                      >\r\n                        Get Started\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className='col-lg-6'>\r\n                  <div className='row pt-5'>\r\n                    <div className='col-md-6'>\r\n                      <div className='card'>\r\n                        <div className='card-body'>\r\n                          <div className='icon icon-shape bg-gradient-red text-white rounded-circle shadow mb-4'>\r\n                            <i className='ni ni-money-coins'></i>\r\n                          </div>\r\n                          <h5 className='h3'>Online Booking/Payment</h5>\r\n                          <p>\r\n                            Reduce wasted time on phone calls and have your\r\n                            future or current customers handle booking services\r\n                            or making payments online.\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      <div className='card'>\r\n                        <div className='card-body'>\r\n                          <div className='icon icon-shape bg-gradient-info text-white rounded-circle shadow mb-4'>\r\n                            <i className='ni ni-single-02'></i>\r\n                          </div>\r\n                          <h5 className='h3'>Customer Tracking</h5>\r\n                          <p>\r\n                            Including information on their pools, locations,\r\n                            gate codes & contact information.\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className='col-md-6 pt-lg-5 pt-4'>\r\n                      <div className='card mb-4'>\r\n                        <div className='card-body'>\r\n                          <div className='icon icon-shape bg-gradient-success text-white rounded-circle shadow mb-4'>\r\n                            <i className='ni ni-email-83'></i>\r\n                          </div>\r\n                          <h5 className='h3'>Service Emails</h5>\r\n                          <p>\r\n                            Email your customers a beautiful service report\r\n                            automatically when you finish each route stop,\r\n                            including checmical readings & dosages.\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      <div className='card mb-4'>\r\n                        <div className='card-body'>\r\n                          <div className='icon icon-shape bg-gradient-warning text-white rounded-circle shadow mb-4'>\r\n                            <i className='ni ni-delivery-fast'></i>\r\n                          </div>\r\n                          <h5 className='h3'>Work Orders</h5>\r\n                          <p>\r\n                            Easily track repairs, service calls, filter\r\n                            cleanings and more.\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='separator separator-bottom separator-skew zindex-100'>\r\n            <svg\r\n              x='0'\r\n              y='0'\r\n              viewBox='0 0 2560 100'\r\n              preserveAspectRatio='none'\r\n              version='1.1'\r\n              xmlns='http://www.w3.org/2000/svg'\r\n            >\r\n              <polygon\r\n                className='fill-default'\r\n                points='2560 0 2560 100 0 100'\r\n              ></polygon>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n        <section className='py-6 pb-9 bg-default'>\r\n          <div className='container'>\r\n            <div className='row justify-content-center text-center'>\r\n              <div className='col-md-8'>\r\n                <h2 className='display-3 text-white'>\r\n                  A Complete Solution For The Modern Pool Business\r\n                </h2>\r\n                <p className='lead text-white'>\r\n                  Argon is a completly new product built on our newest re-built\r\n                  from scratch framework structure that is meant to make our\r\n                  products more intuitive, more adaptive and, needless to say,\r\n                  so much easier to customize. Let Argon amaze you with its cool\r\n                  features and build tools and get your project to a whole new\r\n                  level.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section className='section section-lg pt-lg-0 mt--7'>\r\n          <div className='container'>\r\n            <div className='row justify-content-center'>\r\n              <div className='col-lg-12'>\r\n                <div className='row'>\r\n                  <div className='col-lg-4'>\r\n                    <div className='card card-lift--hover shadow border-0'>\r\n                      <div className='card-body py-5'>\r\n                        <div className='icon icon-shape bg-gradient-primary text-white rounded-circle mb-4'>\r\n                          <i className='ni ni-check-bold'></i>\r\n                        </div>\r\n                        <h4 className='h3 text-primary text-uppercase'>\r\n                          Based on Bootstrap 4\r\n                        </h4>\r\n                        <p className='description mt-3'>\r\n                          Argon is built on top of the most popular open source\r\n                          toolkit for developing with HTML, CSS, and JS.\r\n                        </p>\r\n                        <div>\r\n                          <span className='badge badge-pill badge-primary'>\r\n                            bootstrap 4\r\n                          </span>\r\n                          <span className='badge badge-pill badge-primary'>\r\n                            dashboard\r\n                          </span>\r\n                          <span className='badge badge-pill badge-primary'>\r\n                            template\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-lg-4'>\r\n                    <div className='card card-lift--hover shadow border-0'>\r\n                      <div className='card-body py-5'>\r\n                        <div className='icon icon-shape bg-gradient-success text-white rounded-circle mb-4'>\r\n                          <i className='ni ni-istanbul'></i>\r\n                        </div>\r\n                        <h4 className='h3 text-success text-uppercase'>\r\n                          Integrated build tools\r\n                        </h4>\r\n                        <p className='description mt-3'>\r\n                          Use Argons's included npm and gulp scripts to compile\r\n                          source code, run tests, and more with just a few\r\n                          simple commands.\r\n                        </p>\r\n                        <div>\r\n                          <span className='badge badge-pill badge-success'>\r\n                            npm\r\n                          </span>\r\n                          <span className='badge badge-pill badge-success'>\r\n                            gulp\r\n                          </span>\r\n                          <span className='badge badge-pill badge-success'>\r\n                            build tools\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='col-lg-4'>\r\n                    <div className='card card-lift--hover shadow border-0'>\r\n                      <div className='card-body py-5'>\r\n                        <div className='icon icon-shape bg-gradient-warning text-white rounded-circle mb-4'>\r\n                          <i className='ni ni-planet'></i>\r\n                        </div>\r\n                        <h4 className='h3 text-warning text-uppercase'>\r\n                          Full Sass support\r\n                        </h4>\r\n                        <p className='description mt-3'>\r\n                          Argon makes customization easier than ever before. You\r\n                          get all the tools to make your website building\r\n                          process a breeze.\r\n                        </p>\r\n                        <div>\r\n                          <span className='badge badge-pill badge-warning'>\r\n                            sass\r\n                          </span>\r\n                          <span className='badge badge-pill badge-warning'>\r\n                            design\r\n                          </span>\r\n                          <span className='badge badge-pill badge-warning'>\r\n                            customize\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section className='py-6'>\r\n          <div className='container'>\r\n            <div className='row row-grid align-items-center'>\r\n              <div className='col-md-6 order-md-2'>\r\n                <img\r\n                  src='./assets/img/theme/landing-1.png'\r\n                  className='img-fluid'\r\n                />\r\n              </div>\r\n              <div className='col-md-6 order-md-1'>\r\n                <div className='pr-md-5'>\r\n                  <h1>Awesome features</h1>\r\n                  <p>\r\n                    This dashboard comes with super cool features that are meant\r\n                    to help in the process. Handcrafted components, page\r\n                    examples and functional widgets are just a few things you\r\n                    will see and love at first sight.\r\n                  </p>\r\n                  <ul className='list-unstyled mt-5'>\r\n                    <li className='py-2'>\r\n                      <div className='d-flex align-items-center'>\r\n                        <div>\r\n                          <div className='badge badge-circle badge-success mr-3'>\r\n                            <i className='ni ni-settings-gear-65'></i>\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <h4 className='mb-0'>Carefully crafted components</h4>\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                    <li className='py-2'>\r\n                      <div className='d-flex align-items-center'>\r\n                        <div>\r\n                          <div className='badge badge-circle badge-success mr-3'>\r\n                            <i className='ni ni-html5'></i>\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <h4 className='mb-0'>Amazing page examples</h4>\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                    <li className='py-2'>\r\n                      <div className='d-flex align-items-center'>\r\n                        <div>\r\n                          <div className='badge badge-circle badge-success mr-3'>\r\n                            <i className='ni ni-satisfied'></i>\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <h4 className='mb-0'>Super friendly support team</h4>\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section className='py-6'>\r\n          <div className='container'>\r\n            <div className='row row-grid align-items-center'>\r\n              <div className='col-md-6'>\r\n                <img\r\n                  src='./assets/img/theme/landing-2.png'\r\n                  className='img-fluid'\r\n                />\r\n              </div>\r\n              <div className='col-md-6'>\r\n                <div className='pr-md-5'>\r\n                  <h1>Example pages</h1>\r\n                  <p>\r\n                    If you want to get inspiration or just show something\r\n                    directly to your clients, you can jump start your\r\n                    development with our pre-built example pages.\r\n                  </p>\r\n                  <a\r\n                    href='./pages/examples/profile.html'\r\n                    className='font-weight-bold text-warning mt-5'\r\n                  >\r\n                    Explore pages\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section className='py-6'>\r\n          <div className='container'>\r\n            <div className='row row-grid align-items-center'>\r\n              <div className='col-md-6 order-md-2'>\r\n                <img\r\n                  src='./assets/img/theme/landing-3.png'\r\n                  className='img-fluid'\r\n                />\r\n              </div>\r\n              <div className='col-md-6 order-md-1'>\r\n                <div className='pr-md-5'>\r\n                  <h1>Lovable widgets and cards</h1>\r\n                  <p>\r\n                    We love cards and everybody on the web seems to. We have\r\n                    gone above and beyond with options for you to organise your\r\n                    information. From cards designed for content, to pricing\r\n                    cards or user profiles, you will have many options to choose\r\n                    from.\r\n                  </p>\r\n                  <a\r\n                    href='./pages/widgets.html'\r\n                    className='font-weight-bold text-info mt-5'\r\n                  >\r\n                    Explore widgets\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section className='py-7 section-nucleo-icons bg-white overflow-hidden'>\r\n          <div className='container'>\r\n            <div className='row justify-content-center'>\r\n              <div className='col-lg-8 text-center'>\r\n                <h2 className='display-3'>Nucleo Icons</h2>\r\n                <p className='lead'>\r\n                  The official package contains over 21.000 icons which are\r\n                  looking great in combination with Argon Design System. Make\r\n                  sure you check all of them and use those that you like the\r\n                  most.\r\n                </p>\r\n                <div className='btn-wrapper'>\r\n                  <a\r\n                    href='./docs/foundation/icons.html'\r\n                    className='btn btn-primary'\r\n                  >\r\n                    View demo icons\r\n                  </a>\r\n                  <a\r\n                    href='https://nucleoapp.com/?ref=1712'\r\n                    target='_blank'\r\n                    className='btn btn-default mt-3 mt-md-0'\r\n                  >\r\n                    View all icons\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='blur--hover'>\r\n              <a href='./docs/foundation/icons.html'>\r\n                <div className='icons-container blur-item mt-5'>\r\n                  <i className='icon ni ni-diamond'></i>\r\n\r\n                  <i className='icon icon-sm ni ni-album-2'></i>\r\n                  <i className='icon icon-sm ni ni-app'></i>\r\n                  <i className='icon icon-sm ni ni-atom'></i>\r\n\r\n                  <i className='icon ni ni-bag-17'></i>\r\n                  <i className='icon ni ni-bell-55'></i>\r\n                  <i className='icon ni ni-credit-card'></i>\r\n\r\n                  <i className='icon icon-sm ni ni-briefcase-24'></i>\r\n                  <i className='icon icon-sm ni ni-building'></i>\r\n                  <i className='icon icon-sm ni ni-button-play'></i>\r\n\r\n                  <i className='icon ni ni-calendar-grid-58'></i>\r\n                  <i className='icon ni ni-camera-compact'></i>\r\n                  <i className='icon ni ni-chart-bar-32'></i>\r\n                </div>\r\n                <span className='blur-hidden h5 text-success'>\r\n                  Explore all the 21.000+ Nucleo Icons\r\n                </span>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section className='py-7'>\r\n          <div className='container'>\r\n            <div className='row row-grid justify-content-center'>\r\n              <div className='col-lg-8 text-center'>\r\n                <h2 className='display-3'>\r\n                  Do you love this awesome{' '}\r\n                  <span className='text-success'>\r\n                    Dashboard for Bootstrap 4?\r\n                  </span>\r\n                </h2>\r\n                <p className='lead'>\r\n                  Cause if you do, it can be yours now. Hit the button below to\r\n                  navigate to get the free version or purchase a license for\r\n                  your next project. Build a new web app or give an old\r\n                  Bootstrap project a new look!\r\n                </p>\r\n                <div className='btn-wrapper'>\r\n                  <a\r\n                    href='https://www.creative-tim.com/product/argon-dashboard'\r\n                    className='btn btn-neutral mb-3 mb-sm-0'\r\n                    target='_blank'\r\n                  >\r\n                    <span className='btn-inner--text'>Get FREE version</span>\r\n                  </a>\r\n                  <a\r\n                    href='https://www.creative-tim.com/product/argon-dashboard-pro'\r\n                    className='btn btn-primary btn-icon mb-3 mb-sm-0'\r\n                  >\r\n                    <span className='btn-inner--icon'>\r\n                      <i className='ni ni-basket'></i>\r\n                    </span>\r\n                    <span className='btn-inner--text'>Purchase now</span>\r\n                  </a>\r\n                </div>\r\n                <div className='text-center'>\r\n                  <h4 className='display-4 mb-5 mt-5'>\r\n                    Available on these technologies\r\n                  </h4>\r\n                  <div className='row justify-content-center'>\r\n                    <div className='col-md-2 col-3 my-2'>\r\n                      <a\r\n                        href='https://www.creative-tim.com/product/argon-dashboard'\r\n                        target='_blank'\r\n                        data-toggle='tooltip'\r\n                        data-original-title='Bootstrap 4 - Most popular front-end component library'\r\n                      >\r\n                        <img\r\n                          src='https://s3.amazonaws.com/creativetim_bucket/tim_static_images/presentation-page/bootstrap.jpg'\r\n                          className='img-fluid rounded-circle shadow shadow-lg--hover'\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                    <div className='col-md-2 col-3 my-2'>\r\n                      <a\r\n                        href=' https://www.creative-tim.com/product/vue-argon-dashboard'\r\n                        target='_blank'\r\n                        data-toggle='tooltip'\r\n                        data-original-title='Vue.js - The progressive javascript framework'\r\n                      >\r\n                        <img\r\n                          src='https://s3.amazonaws.com/creativetim_bucket/tim_static_images/presentation-page/vue.jpg'\r\n                          className='img-fluid rounded-circle'\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                    <div className='col-md-2 col-3 my-2'>\r\n                      <a\r\n                        href=' https://www.creative-tim.com/product/argon-dashboard'\r\n                        target='_blank'\r\n                        data-toggle='tooltip'\r\n                        data-original-title='Sketch - Digital design toolkit'\r\n                      >\r\n                        <img\r\n                          src='https://s3.amazonaws.com/creativetim_bucket/tim_static_images/presentation-page/sketch.jpg'\r\n                          className='img-fluid rounded-circle'\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                    <div className='col-md-2 col-3 my-2'>\r\n                      <a\r\n                        href=' https://www.creative-tim.com/product/argon-dashboard-angular'\r\n                        target='_blank'\r\n                        data-toggle='tooltip'\r\n                        data-original-title='Angular - One framework. Mobile &amp; desktop'\r\n                      >\r\n                        <img\r\n                          src='https://s3.amazonaws.com/creativetim_bucket/tim_static_images/presentation-page/angular.jpg'\r\n                          className='img-fluid rounded-circle'\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                    <div className='col-md-2 col-3 my-2'>\r\n                      <a\r\n                        href=' https://www.creative-tim.com/product/argon-dashboard-react'\r\n                        target='_blank'\r\n                        data-toggle='tooltip'\r\n                        data-original-title='React - A JavaScript library for building user interfaces'\r\n                      >\r\n                        <img\r\n                          src='https://s3.amazonaws.com/creativetim_bucket/tim_static_images/presentation-page/react.jpg'\r\n                          className='img-fluid rounded-circle'\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                    <div className='col-md-2 col-3 my-2'>\r\n                      <a\r\n                        href=' https://www.creative-tim.com/product/argon-dashboard-laravel'\r\n                        target='_blank'\r\n                        data-toggle='tooltip'\r\n                        data-original-title='Laravel - The PHP Framework For Web Artisans'\r\n                      >\r\n                        <img\r\n                          src='https://raw.githubusercontent.com/creativetimofficial/public-assets/master/logos/laravel_logo.png'\r\n                          className='img-fluid rounded-circle'\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                  <div className='row justify-content-center'>\r\n                    <div className='col-md-2 col-3 my-2'>\r\n                      <a\r\n                        href=' https://www.creative-tim.com/product/argon-dashboard-nodejs'\r\n                        target='_blank'\r\n                        data-toggle='tooltip'\r\n                        data-original-title=\"Node.js - a JavaScript runtime built on Chrome's V8 JavaScript engine\"\r\n                      >\r\n                        <img\r\n                          src='https://raw.githubusercontent.com/creativetimofficial/public-assets/master/logos/nodejs-logo.jpg'\r\n                          className='img-fluid rounded-circle'\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                    <div className='col-md-2 col-3 my-2'>\r\n                      <a\r\n                        href=' https://www.adobe.com/products/photoshop.html'\r\n                        target='_blank'\r\n                        data-toggle='tooltip'\r\n                        data-original-title='[Coming Soon] Adobe Photoshop - Software for digital images manipulation'\r\n                      >\r\n                        <img\r\n                          src='https://s3.amazonaws.com/creativetim_bucket/tim_static_images/presentation-page/ps.jpg'\r\n                          className='img-fluid rounded-circle opacity-3'\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LandingContent;\r\n",["348","349"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\PumpManager.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\RouteBuilder.js",["350","351","352","353","354","355","356","357","358"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport Footer from '../Layout/Footer';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n  DirectionsRenderer,\r\n  DirectionsService,\r\n  Polyline\r\n} from '@react-google-maps/api';\r\n\r\nimport MapDirectionsRenderer from './MapDirectionsRenderer';\r\n\r\nimport {\r\n  getEmployees,\r\n  getEmployeeCustomers,\r\n  getEmployeeRoute,\r\n  getEmployeeRouteRB\r\n} from '../../actions/employee';\r\n\r\nimport {\r\n  setSchedule,\r\n  unschedule,\r\n  updateRouteOrder,\r\n  getCustomersRB,\r\n  optimizeRoute,\r\n  clearCustomers,\r\n  updateFrequency,\r\n  updateTech\r\n} from '../../actions/customer';\r\n\r\nimport {\r\n  Button,\r\n  Badge,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Input,\r\n  Form,\r\n  Label,\r\n  FormGroup,\r\n  ListGroupItem,\r\n  ListGroup,\r\n  Card,\r\n  CardBody,\r\n  CardHeader\r\n} from 'reactstrap';\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '400px'\r\n};\r\n\r\nconst RouteBuilder = ({\r\n  clearCustomers,\r\n  updateFrequency,\r\n  getEmployees,\r\n  getEmployeeCustomers,\r\n  setSchedule,\r\n  unschedule,\r\n  getEmployeeRoute,\r\n  updateRouteOrder,\r\n  getCustomersRB,\r\n  optimizeRoute,\r\n  updateTech,\r\n  getEmployeeRouteRB,\r\n  mapRedux: { legs },\r\n  employees: { employees },\r\n  customers: { customers, loading, routeList, allCustomers }\r\n}) => {\r\n  useEffect(() => {\r\n    clearCustomers();\r\n    getEmployees();\r\n    getCustomersRB();\r\n  }, [clearCustomers, getEmployees, getCustomersRB]);\r\n\r\n  const [selectedTech, setSelectedTech] = useState(null);\r\n  const [dateSelected, setDateSelected] = useState('Monday');\r\n  const [customerRouteList, updateCustomerRouteList] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [map, setMap] = useState(null);\r\n  const [routedCustomers, updateRoutedCustomers] = useState(null);\r\n\r\n  const onTechChange = async e => {\r\n    setIsProcessing(true);\r\n    setSelectedTech(e.target.value);\r\n    await getEmployeeCustomers(e.target.value);\r\n    await getEmployeeRouteRB(e.target.value, dateSelected);\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const onChangeDay = async e => {\r\n    setIsProcessing(true);\r\n    setDateSelected(e.target.value);\r\n    await getEmployeeRouteRB(selectedTech, e.target.value);\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const routeBuilder = true;\r\n\r\n  const addToRoute = async e => {\r\n    setIsProcessing(true);\r\n    await setSchedule(e, selectedTech, dateSelected);\r\n    await getEmployeeCustomers(selectedTech);\r\n    await getEmployeeRouteRB(selectedTech, dateSelected);\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const removeFromRoute = async e => {\r\n    setIsProcessing(true);\r\n    await unschedule(e);\r\n    await getEmployeeCustomers(selectedTech);\r\n    await getEmployeeRouteRB(selectedTech, dateSelected);\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const [mapCenterPoint, setMapCenterPoint] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!loading && customers[0]) {\r\n      getEmployeeRouteRB(selectedTech, dateSelected);\r\n      setMapCenterPoint({\r\n        lat: parseFloat(customers[0].serviceLat),\r\n        lng: parseFloat(customers[0].serviceLng)\r\n      });\r\n      // const list = customers.filter(customer => customer.isScheduled === true);\r\n      // updateRoutedCustomers(list);\r\n      // console.log(list);\r\n    }\r\n  }, [customers]);\r\n\r\n  const [mapCenterPointNC, setMapCenterPointNC] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (allCustomers[0]) {\r\n      setMapCenterPointNC({\r\n        lat: parseFloat(allCustomers[0].serviceLat),\r\n        lng: parseFloat(allCustomers[0].serviceLng)\r\n      });\r\n    }\r\n  }, [allCustomers]);\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      updateCustomerRouteList(Array.from(routeList, x => x.customer));\r\n      updateRoutedCustomers(Array.from(routeList, x => x.customer));\r\n      // updateRoutedCustomers(routeList);\r\n    }\r\n  }, [routeList]);\r\n\r\n  const handleOnDragEnd = async result => {\r\n    const items = Array.from(customerRouteList);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n    updateCustomerRouteList(items);\r\n    setIsProcessing(true);\r\n    await updateRouteOrder(selectedTech, dateSelected, items);\r\n    await getEmployeeRouteRB(selectedTech, dateSelected);\r\n    setIsProcessing(false);\r\n  };\r\n\r\n  const onLoad = React.useCallback(function callback(map) {\r\n    const bounds = new window.google.maps.LatLngBounds();\r\n    // map.fitBounds(bounds);\r\n    setMap(map);\r\n  }, []);\r\n\r\n  const onUnmount = React.useCallback(function callback(map) {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  const [infoIsOpen, setInfoIsOpen] = useState({\r\n    isOpen: false,\r\n    active: null\r\n  });\r\n\r\n  const onToggleOpen = customer => {\r\n    setInfoIsOpen({\r\n      isOpen: !infoIsOpen.isOpen,\r\n      active: customer\r\n    });\r\n  };\r\n\r\n  let totalDistance = 0;\r\n  let totalDuration = 0;\r\n  let METERS_TO_MILES = 0.000621371192;\r\n\r\n  const calculateTotalDistance = () => {\r\n    for (var i = 0; i < legs.length; ++i) {\r\n      totalDistance += legs[i].distance.value;\r\n      totalDuration += legs[i].duration.value;\r\n    }\r\n\r\n    totalDistance = Math.round(totalDistance * METERS_TO_MILES * 10) / 10;\r\n    totalDuration = Math.round(totalDuration / 60);\r\n\r\n    // setTotals({\r\n    //   totalDistance,\r\n    //   totalDuration\r\n    // });\r\n  };\r\n\r\n  calculateTotalDistance();\r\n\r\n  const [frequency, setFrequency] = useState({\r\n    customer: null,\r\n    freq: null\r\n  });\r\n\r\n  const onFreqChange = async (customerId, freq) => {\r\n    setFrequency({\r\n      customer: customerId,\r\n      freq: freq\r\n    });\r\n    updateFrequency(customerId, freq);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='routing' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/routing'>Routing</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to='/routing/builder'>Route Builder</Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              <h3 className='mb-0'>Route Builder </h3>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Row>\r\n                <Col md='4'>\r\n                  {totalDistance && (\r\n                    <h5>Total Distance: {totalDistance} miles</h5>\r\n                  )}\r\n                  {totalDuration && (\r\n                    <h5>Total Duration: {totalDuration} minutes</h5>\r\n                  )}\r\n                </Col>\r\n                {/* <Col>\r\n                  {' '}\r\n                  <p>\r\n                    Routing Type:{' '}\r\n                    {routeList.isOptimized ? (\r\n                      <span>Optimized</span>\r\n                    ) : (\r\n                      <span>Manual</span>\r\n                    )}\r\n                  </p>\r\n                </Col> */}\r\n                <Col md={{ size: 4, offset: 4 }}>\r\n                  <Button\r\n                    color='primary'\r\n                    disabled={isProcessing}\r\n                    onClick={async () => {\r\n                      setIsProcessing(true);\r\n                      await optimizeRoute(\r\n                        routedCustomers,\r\n                        selectedTech,\r\n                        dateSelected\r\n                      );\r\n                      await getEmployeeRouteRB(selectedTech, dateSelected);\r\n                      setIsProcessing(false);\r\n                    }}\r\n                  >\r\n                    {isProcessing ? (\r\n                      <span>\r\n                        {' '}\r\n                        <SpinnerCircular\r\n                          size={24}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />{' '}\r\n                        Processing...\r\n                      </span>\r\n                    ) : (\r\n                      <span>Optimize Route</span>\r\n                    )}\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  {customers.length === 0 &&\r\n                    mapCenterPointNC !== null &&\r\n                    selectedTech && (\r\n                      <LoadScript googleMapsApiKey='AIzaSyBPTZtirCX7Ar2bIandK2EZzj10V2bBUag'>\r\n                        <GoogleMap\r\n                          mapContainerStyle={containerStyle}\r\n                          center={mapCenterPointNC}\r\n                          zoom={10}\r\n                          onLoad={onLoad}\r\n                          onUnmount={onUnmount}\r\n                        >\r\n                          {allCustomers.map(customer => (\r\n                            <Fragment key={customer._id}>\r\n                              {customer.technician !== selectedTech && (\r\n                                <Marker\r\n                                  icon={'https://i.imgur.com/SErFNu4.png'}\r\n                                  position={{\r\n                                    lat: parseFloat(customer.serviceLat),\r\n                                    lng: parseFloat(customer.serviceLng)\r\n                                  }}\r\n                                  onClick={() => {\r\n                                    onToggleOpen(customer._id);\r\n                                  }}\r\n                                >\r\n                                  {infoIsOpen.isOpen &&\r\n                                    infoIsOpen.active === customer._id && (\r\n                                      <InfoWindow onCloseClick={onToggleOpen}>\r\n                                        <div>\r\n                                          <strong>\r\n                                            <h4 className='mb-0'>\r\n                                              {customer.firstName}{' '}\r\n                                              {customer.lastName}\r\n                                            </h4>\r\n                                          </strong>{' '}\r\n                                          {customer.serviceAddress}\r\n                                          <br />\r\n                                          {customer.isScheduled ? (\r\n                                            <Badge\r\n                                              className='mgn-btm-10'\r\n                                              color='success'\r\n                                            >\r\n                                              Scheduled\r\n                                            </Badge>\r\n                                          ) : (\r\n                                            <Badge\r\n                                              className='mgn-btm-10'\r\n                                              color='danger'\r\n                                            >\r\n                                              Not Scheduled\r\n                                            </Badge>\r\n                                          )}\r\n                                          <br />\r\n                                          {customer.technician === null ? (\r\n                                            <span>\r\n                                              Not Assigned to Tech\r\n                                              <br />\r\n                                              <Button\r\n                                                size='sm'\r\n                                                color='success'\r\n                                                disabled={isProcessing}\r\n                                                onClick={async () => {\r\n                                                  setIsProcessing(true);\r\n                                                  await updateTech(\r\n                                                    customer._id,\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getEmployeeCustomers(\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getCustomersRB();\r\n                                                  setIsProcessing(false);\r\n                                                }}\r\n                                              >\r\n                                                Assign to Selected Tech\r\n                                              </Button>\r\n                                            </span>\r\n                                          ) : (\r\n                                            <span>\r\n                                              Assigned to{' '}\r\n                                              {customer.technicianName}\r\n                                              <br />\r\n                                              <Button\r\n                                                size='sm'\r\n                                                disabled={isProcessing}\r\n                                                color='success'\r\n                                                onClick={async () => {\r\n                                                  setIsProcessing(true);\r\n                                                  await updateTech(\r\n                                                    customer._id,\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getEmployeeCustomers(\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getCustomersRB();\r\n                                                  setIsProcessing(false);\r\n                                                }}\r\n                                              >\r\n                                                Assign to Selected Tech\r\n                                              </Button>\r\n                                            </span>\r\n                                          )}\r\n                                        </div>\r\n                                      </InfoWindow>\r\n                                    )}\r\n                                </Marker>\r\n                              )}\r\n                            </Fragment>\r\n                          ))}\r\n                        </GoogleMap>\r\n                      </LoadScript>\r\n                    )}\r\n\r\n                  {customers.length >= 1 &&\r\n                    routedCustomers !== null &&\r\n                    mapCenterPoint !== null && (\r\n                      <LoadScript googleMapsApiKey='AIzaSyBPTZtirCX7Ar2bIandK2EZzj10V2bBUag'>\r\n                        <GoogleMap\r\n                          mapContainerStyle={containerStyle}\r\n                          center={mapCenterPoint}\r\n                          zoom={10}\r\n                          onLoad={onLoad}\r\n                          onUnmount={onUnmount}\r\n                        >\r\n                          {routedCustomers.length >= 2 &&\r\n                            isProcessing === false && (\r\n                              <MapDirectionsRenderer\r\n                                travelMode='DRIVING'\r\n                                places={routedCustomers}\r\n                              />\r\n                            )}\r\n\r\n                          {routedCustomers.length === 1 && (\r\n                            <Fragment>\r\n                              {routedCustomers.map(customer => (\r\n                                <Marker\r\n                                  key={customer._id}\r\n                                  icon={'https://i.imgur.com/kAyfMFn.png'}\r\n                                  position={{\r\n                                    lat: parseFloat(customer.serviceLat),\r\n                                    lng: parseFloat(customer.serviceLng)\r\n                                  }}\r\n                                ></Marker>\r\n                              ))}\r\n                            </Fragment>\r\n                          )}\r\n\r\n                          {allCustomers.map(customer => (\r\n                            <Fragment key={customer._id}>\r\n                              {customer.technician !== selectedTech && (\r\n                                <Marker\r\n                                  icon={'https://i.imgur.com/SErFNu4.png'}\r\n                                  position={{\r\n                                    lat: parseFloat(customer.serviceLat),\r\n                                    lng: parseFloat(customer.serviceLng)\r\n                                  }}\r\n                                  onClick={() => {\r\n                                    onToggleOpen(customer._id);\r\n                                  }}\r\n                                >\r\n                                  {infoIsOpen.isOpen &&\r\n                                    infoIsOpen.active === customer._id && (\r\n                                      <InfoWindow onCloseClick={onToggleOpen}>\r\n                                        <div>\r\n                                          <strong>\r\n                                            <h4 className='mb-0'>\r\n                                              {customer.firstName}{' '}\r\n                                              {customer.lastName}\r\n                                            </h4>\r\n                                          </strong>{' '}\r\n                                          {customer.serviceAddress}\r\n                                          <br />\r\n                                          {customer.isScheduled ? (\r\n                                            <Badge\r\n                                              className='mgn-btm-10'\r\n                                              color='success'\r\n                                            >\r\n                                              Scheduled\r\n                                            </Badge>\r\n                                          ) : (\r\n                                            <Badge\r\n                                              className='mgn-btm-10'\r\n                                              color='danger'\r\n                                            >\r\n                                              Not Scheduled\r\n                                            </Badge>\r\n                                          )}\r\n                                          <br />\r\n                                          {customer.technician === null ? (\r\n                                            <span>\r\n                                              Not Assigned to Tech\r\n                                              <br />\r\n                                              <Button\r\n                                                size='sm'\r\n                                                color='success'\r\n                                                disabled={isProcessing}\r\n                                                onClick={async () => {\r\n                                                  setIsProcessing(true);\r\n                                                  await updateTech(\r\n                                                    customer._id,\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getEmployeeCustomers(\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getCustomersRB();\r\n                                                  setIsProcessing(false);\r\n                                                }}\r\n                                              >\r\n                                                Assign to Selected Tech\r\n                                              </Button>\r\n                                            </span>\r\n                                          ) : (\r\n                                            <span>\r\n                                              Assigned to{' '}\r\n                                              {customer.technicianName}\r\n                                              <br />\r\n                                              <Button\r\n                                                size='sm'\r\n                                                color='success'\r\n                                                disabled={isProcessing}\r\n                                                onClick={async () => {\r\n                                                  setIsProcessing(true);\r\n                                                  await updateTech(\r\n                                                    customer._id,\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getEmployeeCustomers(\r\n                                                    selectedTech\r\n                                                  );\r\n                                                  await getCustomersRB();\r\n                                                  setIsProcessing(false);\r\n                                                }}\r\n                                              >\r\n                                                Assign to Selected Tech\r\n                                              </Button>\r\n                                            </span>\r\n                                          )}\r\n                                        </div>\r\n                                      </InfoWindow>\r\n                                    )}\r\n                                </Marker>\r\n                              )}\r\n                            </Fragment>\r\n                          ))}\r\n\r\n                          {customers.map(customer => (\r\n                            <Fragment key={customer._id}>\r\n                              {customer.isScheduled === false && (\r\n                                <Marker\r\n                                  icon={'https://i.imgur.com/DOITJn6.png'}\r\n                                  position={{\r\n                                    lat: parseFloat(customer.serviceLat),\r\n                                    lng: parseFloat(customer.serviceLng)\r\n                                  }}\r\n                                  onClick={() => {\r\n                                    onToggleOpen(customer._id);\r\n                                  }}\r\n                                >\r\n                                  {infoIsOpen.isOpen &&\r\n                                    infoIsOpen.active === customer._id && (\r\n                                      <InfoWindow onCloseClick={onToggleOpen}>\r\n                                        <div>\r\n                                          <strong>\r\n                                            <h4 className='mb-0'>\r\n                                              {customer.firstName}{' '}\r\n                                              {customer.lastName}\r\n                                            </h4>\r\n                                          </strong>{' '}\r\n                                          {customer.serviceAddress}\r\n                                          <br />\r\n                                          <Badge color='danger'>\r\n                                            Not Scheduled\r\n                                          </Badge>\r\n                                          <br />\r\n                                          <br />\r\n                                          Assigned to {customer.technicianName}\r\n                                          <br />\r\n                                          <Button\r\n                                            size='sm'\r\n                                            disabled={isProcessing}\r\n                                            color='success'\r\n                                            onClick={() =>\r\n                                              addToRoute(customer._id)\r\n                                            }\r\n                                          >\r\n                                            Add To Route\r\n                                          </Button>\r\n                                        </div>\r\n                                      </InfoWindow>\r\n                                    )}\r\n                                </Marker>\r\n                              )}\r\n                            </Fragment>\r\n                          ))}\r\n                        </GoogleMap>\r\n                      </LoadScript>\r\n                    )}\r\n                </Col>\r\n              </Row>\r\n              <br />\r\n              <Row>\r\n                <Col lg='4'>\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label className='form-control-label'>Technician:</Label>\r\n                      <Input\r\n                        type='select'\r\n                        name='technician'\r\n                        onChange={onTechChange}\r\n                      >\r\n                        <option>Choose One</option>\r\n                        {employees.map(e => (\r\n                          <option key={e._id} value={e._id}>\r\n                            {e.firstName} {e.lastName}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Form>\r\n                  <h4>Unscheuled Customers:</h4>\r\n                  <ListGroup className='mgn-btm-10'>\r\n                    {customers.map(c => (\r\n                      <Fragment key={c._id}>\r\n                        {c.isScheduled === false && (\r\n                          <ListGroupItem>\r\n                            <strong>\r\n                              {c.firstName} {c.lastName}\r\n                            </strong>{' '}\r\n                            <br />\r\n                            <small>\r\n                              <em>{c.serviceAddress}</em>\r\n                            </small>\r\n                            <br />\r\n                            <Badge color='warning' className='mgn-btm-10'>\r\n                              Unscheduled\r\n                            </Badge>\r\n                            <br />\r\n                            <Button\r\n                              size='sm'\r\n                              disabled={isProcessing}\r\n                              color='success'\r\n                              onClick={() => addToRoute(c._id)}\r\n                            >\r\n                              Add To Route\r\n                            </Button>\r\n                          </ListGroupItem>\r\n                        )}\r\n                      </Fragment>\r\n                    ))}\r\n                  </ListGroup>\r\n                  <hr />\r\n                  <h4>Other Scheduled Customers:</h4>\r\n                  <ListGroup>\r\n                    {customers.map(c => (\r\n                      <Fragment key={c._id}>\r\n                        {c.isScheduled === true &&\r\n                          c.scheduledDay !== dateSelected && (\r\n                            <ListGroupItem>\r\n                              {c.firstName} {c.lastName} <br />\r\n                              <Badge color='primary' className='mgn-btm-10'>\r\n                                Scheduled - {c.scheduledDay}\r\n                              </Badge>\r\n                              <Button\r\n                                size='sm'\r\n                                disabled={isProcessing}\r\n                                color='success'\r\n                                onClick={async () => {\r\n                                  await removeFromRoute(c._id);\r\n                                  addToRoute(c._id);\r\n                                }}\r\n                              >\r\n                                Switch to {dateSelected}\r\n                              </Button>\r\n                            </ListGroupItem>\r\n                          )}\r\n                      </Fragment>\r\n                    ))}\r\n                  </ListGroup>\r\n                </Col>\r\n                <Col lg='8'>\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label className='form-control-label'>\r\n                        Day to Schedule:\r\n                      </Label>\r\n                      <Input type='select' name='day' onChange={onChangeDay}>\r\n                        <option>Monday</option>\r\n                        <option>Tuesday</option>\r\n                        <option>Wednesday</option>\r\n                        <option>Thursday</option>\r\n                        <option>Friday</option>\r\n                        <option>Saturday</option>\r\n                        <option>Sunday</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Form>\r\n                  <div className='route-builder-box'>\r\n                    <h3>{dateSelected}'s Route</h3>\r\n                    {!isProcessing ? (\r\n                      <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId='items'>\r\n                          {provided => (\r\n                            <div\r\n                              {...provided.droppableProps}\r\n                              ref={provided.innerRef}\r\n                            >\r\n                              <ListGroup>\r\n                                {!loading &&\r\n                                  !isProcessing &&\r\n                                  customerRouteList !== null &&\r\n                                  customerRouteList.map((c, index) => (\r\n                                    <Draggable\r\n                                      key={c._id}\r\n                                      draggableId={c._id}\r\n                                      index={index}\r\n                                    >\r\n                                      {provided => (\r\n                                        <div\r\n                                          {...provided.draggableProps}\r\n                                          {...provided.dragHandleProps}\r\n                                          ref={provided.innerRef}\r\n                                        >\r\n                                          {c.isScheduled === true &&\r\n                                            c.scheduledDay === dateSelected && (\r\n                                              <ListGroupItem>\r\n                                                <strong>\r\n                                                  {c.firstName} {c.lastName}{' '}\r\n                                                </strong>\r\n                                                <br />\r\n                                                <small>\r\n                                                  <em>{c.serviceAddress}</em>\r\n                                                </small>\r\n                                                <br />\r\n                                                <br />\r\n                                                <Row>\r\n                                                  <Col sm='3'>\r\n                                                    <Label className='form-control-label'>\r\n                                                      Frequency:\r\n                                                    </Label>\r\n                                                  </Col>\r\n                                                  <Col sm='9'>\r\n                                                    <Input\r\n                                                      type='select'\r\n                                                      defaultValue={c.frequency}\r\n                                                      name='frequency'\r\n                                                      onChange={e =>\r\n                                                        onFreqChange(\r\n                                                          c._id,\r\n                                                          e.target.value\r\n                                                        )\r\n                                                      }\r\n                                                    >\r\n                                                      <option>Weekly</option>\r\n                                                      <option>\r\n                                                        Bi-Weekly (Every 2\r\n                                                        Weeks)\r\n                                                      </option>\r\n                                                      <option>\r\n                                                        Tri-Weekly (Every 3\r\n                                                        Weeks)\r\n                                                      </option>\r\n                                                      <option>\r\n                                                        Monthly (Every 4 Weeks)\r\n                                                      </option>\r\n                                                    </Input>\r\n                                                  </Col>\r\n                                                </Row>\r\n\r\n                                                <br />\r\n                                                <Button\r\n                                                  size='sm'\r\n                                                  disabled={isProcessing}\r\n                                                  color='danger'\r\n                                                  onClick={() =>\r\n                                                    removeFromRoute(c._id)\r\n                                                  }\r\n                                                >\r\n                                                  Remove From {dateSelected}'s\r\n                                                  Schedule\r\n                                                </Button>\r\n                                              </ListGroupItem>\r\n                                            )}\r\n                                        </div>\r\n                                      )}\r\n                                    </Draggable>\r\n                                  ))}\r\n                                {provided.placeholder}\r\n                              </ListGroup>\r\n                            </div>\r\n                          )}\r\n                        </Droppable>\r\n                      </DragDropContext>\r\n                    ) : (\r\n                      <span>\r\n                        <SpinnerCircular\r\n                          size={54}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />\r\n                        <h3>Processing...</h3>\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nRouteBuilder.propTypes = {\r\n  getEmployees: PropTypes.func.isRequired,\r\n  getEmployeeCustomers: PropTypes.func.isRequired,\r\n  unschedule: PropTypes.func.isRequired,\r\n  setSchedule: PropTypes.func.isRequired,\r\n  getEmployeeRoute: PropTypes.func.isRequired,\r\n  updateRouteOrder: PropTypes.func.isRequired,\r\n  getCustomersRB: PropTypes.func.isRequired,\r\n  optimizeRoute: PropTypes.func.isRequired,\r\n  clearCustomers: PropTypes.func.isRequired,\r\n  updateFrequency: PropTypes.func.isRequired,\r\n  updateTech: PropTypes.func.isRequired,\r\n  getEmployeeRouteRB: PropTypes.func.isRequired,\r\n  employees: PropTypes.object.isRequired,\r\n  mapRedux: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  employees: state.employee,\r\n  customers: state.customer,\r\n  mapRedux: state.map\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getEmployees,\r\n  getEmployeeCustomers,\r\n  setSchedule,\r\n  unschedule,\r\n  getEmployeeRoute,\r\n  updateRouteOrder,\r\n  getCustomersRB,\r\n  optimizeRoute,\r\n  clearCustomers,\r\n  updateFrequency,\r\n  updateTech,\r\n  getEmployeeRouteRB\r\n})(RouteBuilder);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\RouteViewer.js",["359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Pricing.js",[],["380","381"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\dashboard\\Sidebar.js",["382","383","384","385"],"import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport logo from '../../img/brand/logo.png';\r\nimport { Collapse, Button, CardBody, Card } from 'reactstrap';\r\n\r\nimport $ from 'jquery';\r\n\r\n$(document).ready(function() {\r\n  $('.nav-link').on('click', function() {\r\n    $('.collapse').removeClass('show');\r\n    $('.nav-link').attr('aria-expanded', 'false');\r\n  });\r\n});\r\n\r\nconst Sidebar = ({ active, auth: { user, isAuthenticated, loading } }) => {\r\n  const [sidebarOpen, setSidebarOpen] = useState(true);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  if (sidebarOpen) {\r\n    if (window.innerWidth > 1199) {\r\n      document.body.classList.add('g-sidenav-pinned');\r\n      document.body.classList.add('g-sidenav-show');\r\n    }\r\n  } else {\r\n    document.body.classList.remove('g-sidenav-pinned');\r\n    document.body.classList.remove('g-sidenav-show');\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (active === 'routing') {\r\n      setIsOpen(true);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* Sidenav */}\r\n      <nav\r\n        className='sidenav navbar navbar-vertical  fixed-left  navbar-expand-xs navbar-light bg-white'\r\n        id='sidenav-main'\r\n      >\r\n        <Scrollbars\r\n          autoHide\r\n          // Hide delay in ms\r\n          autoHideTimeout={1000}\r\n          // Duration for hide animation in ms.\r\n          autoHideDuration={200}\r\n        >\r\n          <div className='scrollbar-inner'>\r\n            {/* Brand */}\r\n            <div className='sidenav-header  d-flex  align-items-center'>\r\n              <a\r\n                className='navbar-brand'\r\n                href='../../pages/dashboards/dashboard.html'\r\n              >\r\n                <img src={logo} className='navbar-brand-img' alt='...' />\r\n              </a>\r\n              <div className=' ml-auto '>\r\n                {/* Sidenav toggler */}\r\n                <div\r\n                  className={`sidenav-toggler d-none d-xl-block-bak ${\r\n                    sidebarOpen ? 'active' : ''\r\n                  }`}\r\n                  data-action='sidenav-unpin'\r\n                  data-target='#sidenav-main'\r\n                  onClick={e => {\r\n                    setSidebarOpen(!sidebarOpen);\r\n                  }}\r\n                >\r\n                  <div className='sidenav-toggler-inner'>\r\n                    <i className='sidenav-toggler-line' />\r\n                    <i className='sidenav-toggler-line' />\r\n                    <i className='sidenav-toggler-line' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='navbar-inner'>\r\n              {/* Collapse */}\r\n              <div\r\n                className='collapse navbar-collapse'\r\n                id='sidenav-collapse-main'\r\n              >\r\n                {/* Nav items */}\r\n                <ul className='navbar-nav'>\r\n                  <li className='nav-item nav-ctrl'>\r\n                    <Link\r\n                      className={`nav-link ${\r\n                        active === 'dashboard' ? 'active' : ''\r\n                      }`}\r\n                      to='/dashboard'\r\n                      aria-controls='navbar-dashboards'\r\n                    >\r\n                      <i className='ni ni-shop text-primary' />\r\n                      <span className='nav-link-text'>Dashboard</span>\r\n                    </Link>\r\n                  </li>\r\n                  {isAuthenticated && !loading && user.role !== 'Technician' && (\r\n                    <Fragment>\r\n                      <li className='nav-item nav-ctrl'>\r\n                        <Link\r\n                          className={`nav-link ${\r\n                            active === 'workorders' ? 'active' : ''\r\n                          }`}\r\n                          to='/work-orders'\r\n                        >\r\n                          <i className='ni ni-delivery-fast text-orange' />\r\n                          <span className='nav-link-text'>Work Orders</span>\r\n                        </Link>\r\n                      </li>\r\n                      <li className='nav-item nav-ctrl'>\r\n                        <Link\r\n                          className={`nav-link ${\r\n                            active === 'customers' ? 'active' : ''\r\n                          }`}\r\n                          to='/customers'\r\n                        >\r\n                          <i className='ni ni-bullet-list-67 text-info' />\r\n                          <span className='nav-link-text'>Customers</span>\r\n                        </Link>\r\n                      </li>\r\n                      {/* <li className='nav-item nav-ctrl'>\r\n                        <Link\r\n                          className={`nav-link ${\r\n                            active === 'bookingforms' ? 'active' : ''\r\n                          }`}\r\n                          to='/booking-forms'\r\n                        >\r\n                          <i className='ni ni-single-copy-04 text-pink' />\r\n                          <span className='nav-link-text'>Booking Forms</span>\r\n                        </Link>{' '}\r\n                      </li> */}\r\n                      {user.role === 'Owner' && (\r\n                        <li className='nav-item nav-ctrl'>\r\n                          <Link\r\n                            className={`nav-link ${\r\n                              active === 'users' ? 'active' : ''\r\n                            }`}\r\n                            to='/users'\r\n                          >\r\n                            <i className='ni ni-circle-08 text-default' />\r\n                            <span className='nav-link-text'>Users</span>\r\n                          </Link>\r\n                        </li>\r\n                      )}\r\n                    </Fragment>\r\n                  )}\r\n\r\n                  {/* <li className='nav-item nav-ctrl'>\r\n                    <Link\r\n                      className={`nav-link ${\r\n                        props.active === 'routing' ? 'active' : ''\r\n                      }`}\r\n                      to='/routing'\r\n                    >\r\n                      <i className='ni ni-square-pin text-primary' />\r\n                      <span className='nav-link-text'>Routing</span>\r\n                    </Link>\r\n                  </li> */}\r\n                  {isAuthenticated && !loading && user.role !== 'Technician' && (\r\n                    <li className='nav-item'>\r\n                      <div\r\n                        className={`nav-link ${\r\n                          active === 'routing' ? 'active' : ''\r\n                        }`}\r\n                        onClick={toggle}\r\n                      >\r\n                        <i className='ni ni-square-pin text-primary' />\r\n                        <span className='nav-link-text'>Routing</span>\r\n                        {isOpen ? (\r\n                          <div className='mgn-left-50p'>\r\n                            <i className='fas fa-chevron-up'></i>\r\n                          </div>\r\n                        ) : (\r\n                          <div className='mgn-left-50p'>\r\n                            <i className='fas fa-chevron-down'></i>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      <Collapse isOpen={isOpen}>\r\n                        <ul className='nav nav-sm flex-column'>\r\n                          <li className='nav-item nav-ctrl'>\r\n                            <Link to='/routing/builder' className='nav-link'>\r\n                              <span className='sidenav-normal'>\r\n                                {' '}\r\n                                <i className='fas fa-drafting-compass text-yellow mgn-right-5'></i>\r\n                                {'  '}\r\n                                Route Builder{' '}\r\n                              </span>\r\n                            </Link>\r\n                          </li>\r\n                          <li className='nav-item nav-ctrl'>\r\n                            <Link to='/view-my-route' className='nav-link'>\r\n                              <span className='sidenav-normal'>\r\n                                {' '}\r\n                                <i className='fas fa-map-signs text-purple mgn-right-5'></i>{' '}\r\n                                View Route{' '}\r\n                              </span>\r\n                            </Link>\r\n                          </li>\r\n                        </ul>\r\n                      </Collapse>\r\n                    </li>\r\n                  )}\r\n\r\n                  {isAuthenticated && !loading && user.role === 'Technician' && (\r\n                    <Fragment>\r\n                      <li className='nav-item nav-ctrl'>\r\n                        <Link\r\n                          className={`nav-link ${\r\n                            active === 'view-logs' ? 'active' : ''\r\n                          }`}\r\n                          to='/view-logs'\r\n                        >\r\n                          <i className='fas fa-clipboard-list text-green mgn-right-5'></i>{' '}\r\n                          <span className='nav-link-text'>Service Logs</span>\r\n                        </Link>\r\n                      </li>\r\n                    </Fragment>\r\n                  )}\r\n                  {isAuthenticated && !loading && user.role !== 'Technician' && (\r\n                    <li className='nav-item nav-ctrl'>\r\n                      <Link\r\n                        className={`nav-link ${\r\n                          active === 'payments' ? 'active' : ''\r\n                        }`}\r\n                        to='/payments'\r\n                      >\r\n                        <i className='ni ni-money-coins text-green' />\r\n                        <span className='nav-link-text'>Payments/Billing</span>\r\n                      </Link>\r\n                    </li>\r\n                  )}\r\n\r\n                  <li className='nav-item nav-ctrl'>\r\n                    <Link\r\n                      className={`nav-link ${\r\n                        active === 'settings' ? 'active' : ''\r\n                      }`}\r\n                      to='/account-settings'\r\n                    >\r\n                      <i className='ni ni-settings text-red' />\r\n                      <span className='nav-link-text'>Settings</span>\r\n                    </Link>\r\n                  </li>\r\n                </ul>\r\n                {/* Divider */}\r\n                <hr className='my-3' />\r\n                {/* Heading */}\r\n                <h6 className='navbar-heading p-0 text-muted'>\r\n                  <span className='docs-normal'>Support</span>\r\n                  <span className='docs-mini'>S</span>\r\n                </h6>\r\n                {/* Navigation */}\r\n                <ul className='navbar-nav mb-md-3'>\r\n                  <li className='nav-item nav-ctrl'>\r\n                    <Link\r\n                      className='nav-link'\r\n                      to='https://demos.creative-tim.com/argon-dashboard-pro/docs/getting-started/overview.html'\r\n                      target='_blank'\r\n                    >\r\n                      <i className='ni ni-spaceship' />\r\n                      <span className='nav-link-text'>Video Guides</span>\r\n                    </Link>\r\n                  </li>\r\n                  <li className='nav-item nav-ctrl'>\r\n                    <Link\r\n                      className='nav-link'\r\n                      to='https://demos.creative-tim.com/argon-dashboard-pro/docs/foundation/colors.html'\r\n                      target='_blank'\r\n                    >\r\n                      <i className='ni ni-chat-round' />\r\n                      <span className='nav-link-text'>Contact Support</span>\r\n                    </Link>\r\n                  </li>{' '}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Scrollbars>{' '}\r\n      </nav>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nSidebar.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Sidebar);\r\n",["386","387"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\dashboard\\Dashboard.js",["388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\dashboard\\DashCards.js",["442","443"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Routing.js",["444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468"],"import React, { Fragment, useState, useEffect, useRef } from 'react';\r\n\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n  DirectionsRenderer,\r\n  DirectionsService,\r\n  Polyline\r\n} from '@react-google-maps/api';\r\n\r\nimport MapDirectionsRenderer from './MapDirectionsRenderer';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getEmployeeCustomers } from '../../actions/employee';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport Footer from '../Layout/Footer';\r\nimport RouteBuilder from '../Layout/RouteBuilder';\r\n\r\nimport { Container } from 'reactstrap';\r\n\r\n// import { Map, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport RoutingMachine from '../../utils/RoutingMachine';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-routing-machine/dist/leaflet-routing-machine';\r\nimport 'leaflet-routing-machine/dist/leaflet-routing-machine.css';\r\nimport 'leaflet-routing-machine/dist/leaflet.routing.icons.png';\r\n\r\nimport LeafletMap from '../Layout/LeafletMap';\r\n\r\nlet key = 'AIzaSyBPTZtirCX7Ar2bIandK2EZzj10V2bBUag';\r\n\r\nconst markerIcon = new L.Icon({\r\n  iconUrl:\r\n    'https://cdn0.iconfinder.com/data/icons/small-n-flat/24/678111-map-marker-512.png',\r\n  iconSize: [35, 45],\r\n  iconAnchor: [17, 46],\r\n  popupAnchor: [0, -46],\r\n  html: '5'\r\n});\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '400px'\r\n};\r\n\r\nconst locations = [\r\n  {\r\n    id: 4,\r\n    info: 'Greg Bryson',\r\n    lat: 34.238134,\r\n    lng: -84.072205\r\n  },\r\n\r\n  {\r\n    id: 3,\r\n    info: 'Lee Wood',\r\n    lat: 34.224666,\r\n    lng: -84.077647\r\n  },\r\n  {\r\n    id: 5,\r\n    info: 'Sam Siemon',\r\n    lat: 34.235536,\r\n    lng: -84.072864\r\n  },\r\n  {\r\n    id: 2,\r\n    info: 'Scott Harris',\r\n    lat: 34.189243,\r\n    lng: -84.069363\r\n  }\r\n];\r\n\r\nconst Routing = ({\r\n  mapRedux: { legs, loading },\r\n  customers: { customers },\r\n  getEmployeeCustomers\r\n}) => {\r\n  const [map, setMap] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    // getEmployeeCustomers('6011ff1582278974ac42fe88');\r\n  }, [getEmployeeCustomers]);\r\n\r\n  const [mapState, setMapState] = useState({\r\n    showingInfoWindow: false,\r\n    selectedMarker: null\r\n  });\r\n\r\n  const onMarkerClick = id => {\r\n    setMapState({\r\n      showingInfoWindow: true,\r\n      selectedMarker: id\r\n    });\r\n  };\r\n\r\n  const onInfoWindowClose = () => {\r\n    setMapState({\r\n      showingInfoWindow: false,\r\n      selectedMarker: null\r\n    });\r\n  };\r\n\r\n  const onLoad = React.useCallback(function callback(map) {\r\n    const bounds = new window.google.maps.LatLngBounds();\r\n    map.fitBounds(bounds);\r\n    setMap(map);\r\n  }, []);\r\n\r\n  const onUnmount = React.useCallback(function callback(map) {\r\n    setMap(null);\r\n  }, []);\r\n  let totalDistance = 0;\r\n  let totalDuration = 0;\r\n  let METERS_TO_MILES = 0.000621371192;\r\n\r\n  const calculateTotalDistance = () => {\r\n    for (var i = 0; i < legs.length; ++i) {\r\n      totalDistance += legs[i].distance.value;\r\n      totalDuration += legs[i].duration.value;\r\n    }\r\n\r\n    totalDistance = Math.round(totalDistance * METERS_TO_MILES * 10) / 10;\r\n    totalDuration = Math.round(totalDuration / 60);\r\n\r\n    // setTotals({\r\n    //   totalDistance,\r\n    //   totalDuration\r\n    // });\r\n  };\r\n\r\n  calculateTotalDistance();\r\n\r\n  // console.log(totalDuration, totalDistance);\r\n\r\n  const [centerPoint, setCenterPoint] = useState({\r\n    lat: 34.2313319,\r\n    lng: -84.1105079\r\n  });\r\n  const ZOOM_LEVEL = 13;\r\n  const mapRef = useRef();\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='routing' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/'>\r\n                          <i className='fas fa-home' />\r\n                        </a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/dashboard'>Dashboard</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <a href='/users'>Routing</a>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container>\r\n          <h1>Google Maps Route</h1>\r\n\r\n          {totalDistance && <h2>Total Distance: {totalDistance} miles</h2>}\r\n          {totalDuration && <h3>Total Duration: {totalDuration} minutes</h3>}\r\n\r\n          <h1>Route Builder</h1>\r\n          <RouteBuilder />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nRouting.propTypes = {\r\n  getEmployeeCustomers: PropTypes.func.isRequired,\r\n  mapRedux: PropTypes.object.isRequired,\r\n  customers: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  mapRedux: state.map,\r\n  customers: state.customer\r\n});\r\n\r\nexport default connect(mapStateToProps, { getEmployeeCustomers })(Routing);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\alert.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\BookingForms.js",["469","470","471","472","473"],"import React, { Fragment, useEffect, useState } from 'react';\r\n\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Sidebar from '../dashboard/Sidebar';\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport\r\n} from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nimport {\r\n  Button,\r\n  Container,\r\n  Col,\r\n  Row,\r\n  CardBody,\r\n  Card,\r\n  CardTitle,\r\n  UncontrolledDropdown,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle\r\n} from 'reactstrap';\r\n\r\nconst pagination = paginationFactory({\r\n  page: 1,\r\n  alwaysShowAllBtns: true,\r\n  showTotal: false,\r\n  withFirstAndLast: false,\r\n  sizePerPageRenderer: ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <div className='dataTables_length' id='datatable-basic_length'>\r\n      <select\r\n        name='datatable-basic_length'\r\n        aria-controls='datatable-basic'\r\n        className='form-control form-control-sm'\r\n        style={{ width: '30%' }}\r\n        onChange={e => onSizePerPageChange(e.target.value)}\r\n      >\r\n        <option value='10'>10</option>\r\n        <option value='25'>25</option>\r\n        <option value='50'>50</option>\r\n        <option value='100'>100</option>\r\n      </select>\r\n    </div>\r\n  )\r\n});\r\n\r\nconst dataTable = [\r\n  {\r\n    id: 1,\r\n    name: 'Weekly Pool Maintenance (Riverside)',\r\n    url: 'https://example.com/booking/a123dfj38rnxiofn',\r\n    type: 'Residential',\r\n    created: 'Aug 01, 2020',\r\n    responses: '4'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Weekly Pool Maintenance (Bakersfield)',\r\n    url: 'https://example.com/booking/ahvrhi3r7347fhjd',\r\n    created: 'Aug 01, 2020',\r\n    responses: '12'\r\n  }\r\n];\r\n\r\nconst urlFormatter = cell => {\r\n  return (\r\n    <input\r\n      type='text'\r\n      className='form-control'\r\n      aria-label='Form Url'\r\n      value={cell}\r\n    />\r\n  );\r\n};\r\n\r\nconst actionFormatter = cell => {\r\n  return (\r\n    <UncontrolledDropdown>\r\n      <DropdownToggle\r\n        className='btn-icon-only text-light'\r\n        color=''\r\n        role='button'\r\n        size='sm'\r\n      >\r\n        <i className='fas fa-ellipsis-v' />\r\n      </DropdownToggle>\r\n      <DropdownMenu className='dropdown-menu-arrow' right>\r\n        <DropdownItem\r\n          href={`/booking-forms/${cell}`}\r\n          onClick={e => e.preventDefault()}\r\n        >\r\n          View\r\n        </DropdownItem>\r\n        <DropdownItem\r\n          href={`/booking-forms/edit/${cell}`}\r\n          onClick={e => e.preventDefault()}\r\n        >\r\n          Edit\r\n        </DropdownItem>\r\n        <DropdownItem\r\n          href={`/booking-forms/delete/${cell}`}\r\n          onClick={e => e.preventDefault()}\r\n        >\r\n          Delete\r\n        </DropdownItem>\r\n      </DropdownMenu>\r\n    </UncontrolledDropdown>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    dataField: 'name',\r\n    text: 'Form Name'\r\n  },\r\n  {\r\n    dataField: 'url',\r\n    text: 'Form URL',\r\n    formatter: urlFormatter\r\n  },\r\n  {\r\n    dataField: 'created',\r\n    text: 'Created On'\r\n  },\r\n  {\r\n    dataField: 'responses',\r\n    text: 'Responses'\r\n  },\r\n  {\r\n    dataField: 'id',\r\n    text: 'Actions',\r\n    formatter: actionFormatter\r\n  }\r\n];\r\n\r\nconst BookingForms = () => {\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='bookingforms' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/'>\r\n                          <i className='fas fa-home' />\r\n                        </a>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <a href='/dashboard'>Dashboard</a>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <a href='/booking-forms'>Booking Forms</a>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col>\r\n              <Card className='mgn-top-50'>\r\n                <CardBody>\r\n                  <CardTitle>\r\n                    <div className='card-header bg-transparent'>\r\n                      <div className='row align-items-center'>\r\n                        <div className='col'>\r\n                          <h6 className='text-uppercase text-muted ls-1 mb-1'>\r\n                            Overview\r\n                          </h6>\r\n                          <h5 className='h3 mb-0'>Booking Forms</h5>\r\n                        </div>\r\n                        <span className='float-right'>\r\n                          <Button color='primary' href='/booking-forms/add'>\r\n                            <span class='btn-inner--icon'>\r\n                              <i class='ni ni-fat-add'></i>\r\n                            </span>\r\n                            <span class='btn-inner--text'> Add New Form</span>\r\n                          </Button>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </CardTitle>\r\n\r\n                  <div\r\n                    className='py-4 table-responsive'\r\n                    style={{ padding: '25px' }}\r\n                  >\r\n                    <div id='datatable-basic_filter' className='px-4 pb-1'>\r\n                      <BootstrapTable\r\n                        data={dataTable}\r\n                        keyField='property'\r\n                        columns={columns}\r\n                        bootstrap4={true}\r\n                        pagination={pagination}\r\n                        bordered={false}\r\n                        wrapperClasses='table-responsive'\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BookingForms;\r\n",["474","475"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Alert.js",["476","477"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Alert as BSAlert } from 'react-bootstrap';\r\n\r\nimport $ from 'jquery';\r\nimport { notify } from 'bootstrap4-notify';\r\n\r\n// $.notify('Hello World');\r\n\r\nconst alertHandler = alert => {\r\n  $.notify(\r\n    {\r\n      message: alert.msg\r\n    },\r\n    {\r\n      type: alert.alertType,\r\n      delay: 5000,\r\n      placement: {\r\n        from: 'top',\r\n        align: 'center'\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\nconst Alert = ({ alerts }) =>\r\n  alerts !== null &&\r\n  alerts.length > 0 &&\r\n  alerts.map(alert => <div key={alert.id}>{alertHandler(alert)}</div>);\r\n\r\nAlert.propTypes = {\r\n  alerts: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  alerts: state.alert\r\n});\r\n\r\nexport default connect(mapStateToProps)(Alert);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\HeaterManager.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\EquipmentManagers\\CleanerManager..js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\EditCustomerInformation.js",["478"],"import React, { Fragment, useState, useRef, useEffect } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Formik } from 'formik';\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Input,\r\n  Form,\r\n  Label,\r\n  FormGroup,\r\n  Card,\r\n  CardHeader,\r\n  CardBody\r\n} from 'reactstrap';\r\n\r\nimport { getSingleCustomer, updateCustomer } from '../../actions/customer';\r\nimport { getEmployees } from '../../actions/employee';\r\n\r\nconst EditCustomerInformation = ({\r\n  getSingleCustomer,\r\n  updateCustomer,\r\n  getEmployees,\r\n  customer: { customer, singleLoading },\r\n  employees: { employees, loading },\r\n  match\r\n}) => {\r\n  useEffect(() => {\r\n    getSingleCustomer(match.params.id);\r\n    getEmployees();\r\n  }, [getSingleCustomer, getEmployees]);\r\n\r\n  const formRef = useRef();\r\n  const handleSubmit = () => {\r\n    if (formRef.current) {\r\n      formRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const [loadingSave, setLoadingSave] = useState(false);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='customers' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-12'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/customers'>Customers</Link>\r\n                      </li>\r\n                      {customer && customer.length >= 1 && (\r\n                        <li className='breadcrumb-item'>\r\n                          <Link to={`/customers/${match.params.id}`}>\r\n                            {customer[0].firstName} {customer[0].lastName}\r\n                          </Link>\r\n                        </li>\r\n                      )}\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to='/customers/add'>Edit Customer Details</Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              <Row className='align-items-center'>\r\n                <Col sm={{ size: 8 }}>\r\n                  <h3 className='mb-0'>Manage Customer Details:</h3>\r\n                </Col>\r\n                <Col sm={{ size: 4 }} className='d-none d-lg-block'>\r\n                  <div className='text-right'>\r\n                    <Button\r\n                      type='submit'\r\n                      color='success'\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      {loadingSave ? (\r\n                        <span>\r\n                          <SpinnerCircular\r\n                            size={24}\r\n                            thickness={180}\r\n                            speed={100}\r\n                            color='rgba(57, 125, 172, 1)'\r\n                            secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                          />{' '}\r\n                          Processing...\r\n                        </span>\r\n                      ) : (\r\n                        <span>Save Changes</span>\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                </Col>\r\n                <Col\r\n                  sm={{ size: 4 }}\r\n                  className='d-block d-sm-block d-md-block d-lg-none'\r\n                >\r\n                  <br />\r\n                  <Button type='submit' color='success' onClick={handleSubmit}>\r\n                    {loadingSave ? (\r\n                      <span>\r\n                        <SpinnerCircular\r\n                          size={24}\r\n                          thickness={180}\r\n                          speed={100}\r\n                          color='rgba(57, 125, 172, 1)'\r\n                          secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                        />{' '}\r\n                        Processing...\r\n                      </span>\r\n                    ) : (\r\n                      <span>Save Changes</span>\r\n                    )}\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </CardHeader>\r\n            {customer && !singleLoading ? (\r\n              <CardBody>\r\n                <Formik\r\n                  initialValues={{\r\n                    firstName: customer[0].firstName,\r\n                    lastName: customer[0].lastName,\r\n                    email: customer[0].email,\r\n                    mobilePhone: customer[0].mobilePhone,\r\n                    serviceAddress: customer[0].serviceAddress,\r\n                    serviceCity: customer[0].serviceCity,\r\n                    serviceState: customer[0].serviceState,\r\n                    serviceZip: customer[0].serviceZip,\r\n                    gateCode: customer[0].gateCode,\r\n                    canText: customer[0].canText,\r\n                    poolType: customer[0].poolType,\r\n                    technician: customer[0].technician,\r\n                    servicePackageAndRate: customer[0].servicePackageAndRate,\r\n                    altPhone: customer[0].altPhone\r\n                  }}\r\n                  innerRef={formRef}\r\n                  onSubmit={async data => {\r\n                    // console.log(data);\r\n                    setLoadingSave(true);\r\n                    await updateCustomer(match.params.id, data);\r\n\r\n                    setLoadingSave(false);\r\n                  }}\r\n                  render={({\r\n                    handleSubmit,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    validateForm,\r\n                    isValid\r\n                  }) => (\r\n                    <Fragment>\r\n                      <Form>\r\n                        <h6 className='heading-small text-muted mb-4'>\r\n                          Customer Information\r\n                        </h6>\r\n                        <div className='pl-lg-4'>\r\n                          <Row>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='firstName'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  First name\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='firstName'\r\n                                  placeholder='John'\r\n                                  value={values.firstName}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='lastName'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Last name\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='lastName'\r\n                                  value={values.lastName}\r\n                                  placeholder='Doe'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='mobilePhone'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Mobile Number\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='mobilePhone'\r\n                                  value={values.mobilePhone}\r\n                                  placeholder='(555) 555-5555'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='email'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Email address\r\n                                </Label>\r\n                                <Input\r\n                                  type='email'\r\n                                  name='email'\r\n                                  value={values.email}\r\n                                  placeholder='jessie@example.com'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='canText'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Can text?\r\n                                </Label>\r\n                                <Input\r\n                                  type='select'\r\n                                  name='canText'\r\n                                  value={values.canText}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                >\r\n                                  <option>N/A</option>\r\n                                  <option>Yes</option>\r\n                                  <option>No</option>\r\n                                </Input>\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='6'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='altPhone'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Alt Phone\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='altPhone'\r\n                                  value={values.altPhone}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                  placeholder='(555) 123-4567'\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </div>\r\n                        <hr className='my-4' />\r\n                        {/* Address */}\r\n                        <h6 className='heading-small text-muted mb-4'>\r\n                          Service Address\r\n                        </h6>\r\n                        <div className='pl-lg-4'>\r\n                          <Row>\r\n                            <Col lg='12'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='serviceAddress'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Service Address\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='serviceAddress'\r\n                                  value={values.serviceAddress}\r\n                                  placeholder='2070 Libby Street'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col lg='4'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='serviceCity'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  City\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='serviceCity'\r\n                                  value={values.serviceCity}\r\n                                  placeholder='Beverly Hills'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='4'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='serviceState'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  State\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='serviceState'\r\n                                  value={values.serviceState}\r\n                                  placeholder='CA'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='4'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='serviceZip'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Zip\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='serviceZip'\r\n                                  value={values.serviceZip}\r\n                                  placeholder='90210'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <hr className='my-4' />\r\n\r\n                          <h6 className='heading-small text-muted mb-4'>\r\n                            Service Information\r\n                          </h6>\r\n                          <div className='pl-lg-4'>\r\n                            <Row>\r\n                              <Col lg='4'>\r\n                                <Label\r\n                                  for='gateCode'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Gate/Lock Code\r\n                                </Label>\r\n                                <Input\r\n                                  type='text'\r\n                                  name='gateCode'\r\n                                  value={values.gateCode}\r\n                                  placeholder='12345'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </Col>\r\n                              <Col lg='4'>\r\n                                <Label\r\n                                  for='poolType'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Pool Type\r\n                                </Label>\r\n                                <Input\r\n                                  type='select'\r\n                                  name='poolType'\r\n                                  value={values.poolType}\r\n                                  placeholder='Residential'\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                >\r\n                                  <option>Residential</option>\r\n                                  <option>Commercial</option>\r\n                                </Input>\r\n                              </Col>\r\n                              <Col lg='4'>\r\n                                <Label\r\n                                  for='technician'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Assigned Technician\r\n                                </Label>\r\n                                <Input\r\n                                  type='select'\r\n                                  name='technician'\r\n                                  value={values.technician}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                >\r\n                                  <option>N/A</option>\r\n\r\n                                  {employees.map(employee => (\r\n                                    <option\r\n                                      key={employee._id}\r\n                                      value={employee._id}\r\n                                    >\r\n                                      {employee.firstName} {employee.lastName}\r\n                                    </option>\r\n                                  ))}\r\n                                </Input>\r\n                              </Col>\r\n                            </Row>\r\n                          </div>\r\n                        </div>\r\n                      </Form>\r\n                    </Fragment>\r\n                  )}\r\n                />\r\n              </CardBody>\r\n            ) : (\r\n              <Fragment>\r\n                <div className='text-center'>\r\n                  <h4>Loading Data...</h4>\r\n                  <SpinnerCircular\r\n                    size={54}\r\n                    thickness={180}\r\n                    speed={100}\r\n                    color='rgba(57, 125, 172, 1)'\r\n                    secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                  />\r\n                </div>\r\n              </Fragment>\r\n            )}\r\n          </Card>\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nEditCustomerInformation.propTypes = {\r\n  getSingleCustomer: PropTypes.func.isRequired,\r\n  updateCustomer: PropTypes.func.isRequired,\r\n  getEmployees: PropTypes.func.isRequired,\r\n  customer: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  customer: state.customer.singleCustomer,\r\n  employees: state.employee\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSingleCustomer,\r\n  updateCustomer,\r\n  getEmployees\r\n})(EditCustomerInformation);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\WorkOrderModal.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\WorkOrders.js",["479","480","481","482","483","484","485","486","487","488","489"],"import React, { Fragment, useState, useEffect, useRef } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Alert from '../Layout/Alert';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\n\r\nimport DatePicker from 'reactstrap-date-picker';\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  Badge,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  CardText,\r\n  CardTitle\r\n} from 'reactstrap';\r\n\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport moment from 'moment';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport\r\n} from 'react-bootstrap-table2-toolkit';\r\n\r\nimport {\r\n  getWorkOrders,\r\n  getCustomers,\r\n  createWorkOrder,\r\n  updateWorkOrder,\r\n  approveWorkOrder,\r\n  clearCustomers\r\n} from '../../actions/customer';\r\n\r\nimport { getEmployees } from '../../actions/employee';\r\n\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport WorkOrderModal from './WorkOrderModal';\r\n\r\nconst pagination = paginationFactory({\r\n  page: 1,\r\n  alwaysShowAllBtns: true,\r\n  showTotal: true,\r\n  withFirstAndLast: false,\r\n  sizePerPageRenderer: ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n    <div className='dataTables_length' id='datatable-basic_length'>\r\n      <select\r\n        name='datatable-basic_length'\r\n        aria-controls='datatable-basic'\r\n        className='form-control form-control-sm'\r\n        style={{ width: '30%' }}\r\n        onChange={e => onSizePerPageChange(e.target.value)}\r\n      >\r\n        <option value='10'>10</option>\r\n        <option value='25'>25</option>\r\n        <option value='50'>50</option>\r\n        <option value='100'>100</option>\r\n      </select>\r\n    </div>\r\n  )\r\n});\r\n\r\nconst { SearchBar } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst dateFormatter = cell => {\r\n  return moment(cell).format('MMMM Do, YYYY');\r\n};\r\n\r\nconst statusFormatter = cell => {\r\n  if (cell === 'Completed') {\r\n    return <Badge color='success'>Completed</Badge>;\r\n  } else if (cell.includes('Unassigned')) {\r\n    return <Badge color='danger'>Unassigned</Badge>;\r\n  } else if (cell.includes('Approval Needed')) {\r\n    return <Badge color='warning'>Approval Needed</Badge>;\r\n  } else if (cell.includes('Assigned')) {\r\n    return <Badge color='info'>Assigned</Badge>;\r\n  } else if (cell.includes('Approved')) {\r\n    return <Badge color='primary'>Approved</Badge>;\r\n  } else if (cell.includes('Closed')) {\r\n    return <Badge color='danger'>Closed</Badge>;\r\n  } else {\r\n    return <Badge color='danger'>N/A</Badge>;\r\n  }\r\n};\r\n\r\nconst nameFormatter = cell => {\r\n  if (cell === undefined) {\r\n    return <span></span>;\r\n  } else {\r\n    return (\r\n      <span>\r\n        {cell.first} {cell.last}\r\n      </span>\r\n    );\r\n  }\r\n};\r\n\r\nconst filterFunction = (cell, row) => {\r\n  const string = `${cell.first} ${cell.last}`;\r\n  return string;\r\n};\r\n\r\nconst WorkOrders = ({\r\n  getWorkOrders,\r\n  getCustomers,\r\n  getEmployees,\r\n  createWorkOrder,\r\n  updateWorkOrder,\r\n  approveWorkOrder,\r\n  customers: { customers, workOrders },\r\n  employees: { employees }\r\n}) => {\r\n  useEffect(() => {\r\n    clearCustomers();\r\n    getWorkOrders();\r\n    getCustomers();\r\n    getEmployees();\r\n  }, [getWorkOrders, getCustomers, getEmployees, clearCustomers]);\r\n\r\n  const formSchema = Yup.object().shape({\r\n    customer: Yup.string()\r\n      .required('Must Select a Customer')\r\n      .notOneOf(['Select Customer'], 'Must Select a Customer'),\r\n    technician: Yup.string()\r\n      .required('Must Select a Technician')\r\n      .notOneOf(['Select Technician'], 'Must Select a Technician')\r\n  });\r\n\r\n  const [infoModal, setInfoModal] = useState({\r\n    isOpen: false,\r\n    isEditOpen: false,\r\n    active: '',\r\n    order: null,\r\n    isLoading: false\r\n  });\r\n\r\n  const [addModal, setAddModal] = useState({\r\n    isOpen: false,\r\n    isLoading: false\r\n  });\r\n\r\n  const actionFormatter = cell => {\r\n    return (\r\n      <UncontrolledDropdown>\r\n        <DropdownToggle\r\n          className='btn-icon-only text-light'\r\n          color=''\r\n          role='button'\r\n          size='sm'\r\n        >\r\n          <i className='fas fa-ellipsis-v' />\r\n        </DropdownToggle>\r\n        <DropdownMenu className='dropdown-menu-arrow' right>\r\n          <DropdownItem\r\n            onClick={() => {\r\n              setInfoModal({\r\n                ...infoModal,\r\n                isOpen: true,\r\n                isEditOpen: false,\r\n                active: cell,\r\n                isLoading: false,\r\n                order: workOrders.findIndex(x => x._id === cell)\r\n              });\r\n            }}\r\n          >\r\n            View\r\n          </DropdownItem>\r\n          <DropdownItem\r\n            onClick={() => {\r\n              setInfoModal({\r\n                ...infoModal,\r\n                isEditOpen: true,\r\n                isOpen: false,\r\n                isLoading: false,\r\n                active: cell,\r\n                order: workOrders.findIndex(x => x._id === cell)\r\n              });\r\n            }}\r\n          >\r\n            Edit\r\n          </DropdownItem>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      dataField: 'dateCreated',\r\n      text: 'Order Date',\r\n      sort: true,\r\n      formatter: dateFormatter\r\n    },\r\n    {\r\n      dataField: 'orderType',\r\n      text: 'Type',\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: 'status',\r\n      text: 'Status',\r\n      sort: true,\r\n      formatter: statusFormatter\r\n    },\r\n    {\r\n      dataField: 'customer.name',\r\n      text: 'Customer',\r\n      sort: true,\r\n      formatter: nameFormatter,\r\n      filterValue: filterFunction,\r\n      csvFormatter: cell => {\r\n        const string = `${cell.first} ${cell.last}`;\r\n        return string;\r\n      }\r\n    },\r\n    {\r\n      dataField: '_id',\r\n      text: 'Actions',\r\n      formatter: actionFormatter\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Fragment>\r\n      <Alert />\r\n      <Sidebar active='workorders' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-12 col-12'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to='/work-orders'>Work Orders</Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container className='mgn-ng-top-60'>\r\n          <Modal\r\n            isOpen={infoModal.isEditOpen}\r\n            toggle={() =>\r\n              setInfoModal({\r\n                ...infoModal,\r\n                isEditOpen: !infoModal.isEditOpen,\r\n                isOpen: false,\r\n                isLoading: false\r\n              })\r\n            }\r\n          >\r\n            <ModalHeader\r\n              toggle={() =>\r\n                setInfoModal({\r\n                  ...infoModal,\r\n                  isEditOpen: !infoModal.isEditOpen,\r\n                  isOpen: false,\r\n                  isLoading: false\r\n                })\r\n              }\r\n            >\r\n              Edit Work Order:\r\n            </ModalHeader>\r\n            <ModalBody>\r\n              <Formik\r\n                initialValues={{\r\n                  orderType: infoModal.active\r\n                    ? workOrders[infoModal.order].orderType\r\n                    : '',\r\n                  customer: infoModal.active\r\n                    ? workOrders[infoModal.order].customer._id\r\n                    : '',\r\n                  description: infoModal.active\r\n                    ? workOrders[infoModal.order].description\r\n                    : '',\r\n                  officeNote: infoModal.active\r\n                    ? workOrders[infoModal.order].officeNote\r\n                    : '',\r\n                  estimatedMinutes: infoModal.active\r\n                    ? workOrders[infoModal.order].estimatedMinutes\r\n                    : '',\r\n                  technician: infoModal.active\r\n                    ? workOrders[infoModal.order].technician\r\n                    : '',\r\n                  showDate:\r\n                    infoModal.active &&\r\n                    workOrders[infoModal.order].scheduledDate\r\n                      ? true\r\n                      : '',\r\n                  scheduledDate: infoModal.active\r\n                    ? workOrders[infoModal.order].scheduledDate\r\n                    : '',\r\n                  notifyCustomer: infoModal.active\r\n                    ? workOrders[infoModal.order].notifyCustomer\r\n                    : '',\r\n                  scheduledDate: infoModal.active\r\n                    ? workOrders[infoModal.order].scheduledDate\r\n                    : '',\r\n                  status: infoModal.active\r\n                    ? workOrders[infoModal.order].status\r\n                    : '',\r\n                  laborCost: infoModal.active\r\n                    ? workOrders[infoModal.order].laborCost\r\n                    : '',\r\n                  price: infoModal.active\r\n                    ? workOrders[infoModal.order].price\r\n                    : ''\r\n                }}\r\n                validationSchema={formSchema}\r\n                onSubmit={async data => {\r\n                  setInfoModal({ ...infoModal, isLoading: true });\r\n                  await updateWorkOrder(data, infoModal.active);\r\n                  await getWorkOrders();\r\n                  setInfoModal({\r\n                    ...infoModal,\r\n                    isLoading: false,\r\n                    isEditOpen: false,\r\n                    isOpen: false\r\n                  });\r\n                }}\r\n                render={({\r\n                  handleSubmit,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  values,\r\n                  setFieldValue,\r\n                  errors,\r\n                  touched\r\n                }) => (\r\n                  <Form onSubmit={handleSubmit}>\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label className='form-control-label'>\r\n                            Order Type:\r\n                          </Label>\r\n                          <Input\r\n                            type='select'\r\n                            name='orderType'\r\n                            value={values.orderType}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                          >\r\n                            <option>Service Call</option>\r\n                            <option>Equipment Repair</option>\r\n                            <option>Filter Clean</option>\r\n                            <option>Pool Opening</option>\r\n                            <option>Pool Closing</option>\r\n                          </Input>\r\n                          {errors.orderType && touched.orderType && (\r\n                            <p className='color-red'>{errors.orderType}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label className='form-control-label'>\r\n                            Customer:\r\n                          </Label>\r\n                          <Input\r\n                            type='select'\r\n                            name='customer'\r\n                            value={values.customer}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                          >\r\n                            <option value={'Select Customer'}>\r\n                              Select Customer\r\n                            </option>\r\n                            {customers &&\r\n                              customers.map(customer => (\r\n                                <option value={customer._id}>\r\n                                  {customer.firstName} {customer.lastName}\r\n                                </option>\r\n                              ))}\r\n                          </Input>\r\n                          {errors.customer && touched.customer && (\r\n                            <p className='color-red'>{errors.customer}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label className='form-control-label'>\r\n                            Order Status:\r\n                          </Label>\r\n                          <Input\r\n                            type='select'\r\n                            name='status'\r\n                            value={values.status}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                          >\r\n                            <option>Approval Needed</option>\r\n                            <option>Approved</option>\r\n                            <option>Completed</option>\r\n                            <option>Closed</option>\r\n                          </Input>\r\n                          {errors.status && touched.status && (\r\n                            <p className='color-red'>{errors.status}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label className='form-control-label'>\r\n                            Order Description:\r\n                          </Label>\r\n                          <Input\r\n                            type='textarea'\r\n                            name='description'\r\n                            value={values.description}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                          />\r\n                          {errors.description && touched.description && (\r\n                            <p className='color-red'>{errors.description}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label className='form-control-label'>\r\n                            Technician:\r\n                          </Label>\r\n                          <Input\r\n                            type='select'\r\n                            name='technician'\r\n                            value={values.technician}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                          >\r\n                            <option value={'Select Technician'}>\r\n                              Select Technician\r\n                            </option>\r\n                            {employees &&\r\n                              employees.map(em => (\r\n                                <option value={em._id}>\r\n                                  {em.firstName} {em.lastName}\r\n                                </option>\r\n                              ))}\r\n                          </Input>\r\n                          {errors.technician && touched.technician && (\r\n                            <p className='color-red'>{errors.technician}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label className='form-control-label'>\r\n                            When To Complete?:\r\n                          </Label>\r\n                          <Input\r\n                            type='select'\r\n                            name='showDate'\r\n                            value={values.showDate}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                          >\r\n                            <option value={true}>Pick a Date</option>\r\n                            <option value=''>Next Scheduled Visit</option>\r\n                          </Input>\r\n                          {errors.showDate && touched.showDate && (\r\n                            <p className='color-red'>{errors.showDate}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {values.showDate && (\r\n                      <Row>\r\n                        <Col>\r\n                          <FormGroup>\r\n                            <Label className='form-control-label'>\r\n                              Date to Complete:\r\n                            </Label>\r\n                            <DatePicker\r\n                              value={values.scheduledDate}\r\n                              onChange={value => {\r\n                                setFieldValue('scheduledDate', value);\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n                    )}\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label className='form-control-label'>\r\n                            Est. Minutes to Complete:\r\n                          </Label>\r\n                          <Input\r\n                            type='number'\r\n                            name='estimatedMinutes'\r\n                            value={values.estimatedMinutes}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                          />\r\n                          {errors.estimatedMinutes &&\r\n                            touched.estimatedMinutes && (\r\n                              <p className='color-red'>\r\n                                {errors.estimatedMinutes}\r\n                              </p>\r\n                            )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label className='form-control-label'>\r\n                            Labor Cost:\r\n                          </Label>\r\n                          <Input\r\n                            type='number'\r\n                            name='laborCost'\r\n                            value={values.laborCost}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                          />\r\n                          {errors.laborCost && touched.laborCost && (\r\n                            <p className='color-red'>{errors.laborCost}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label className='form-control-label'>Price:</Label>\r\n                          <Input\r\n                            type='number'\r\n                            name='price'\r\n                            value={values.price}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                          />\r\n                          {errors.price && touched.price && (\r\n                            <p className='color-red'>{errors.price}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label className='form-control-label'>\r\n                            Office Note:\r\n                          </Label>\r\n                          <Input\r\n                            type='textarea'\r\n                            name='officeNote'\r\n                            value={values.officeNote}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                          />\r\n                          {errors.officeNote && touched.officeNote && (\r\n                            <p className='color-red'>{errors.officeNote}</p>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Button\r\n                      color='success'\r\n                      type='submit'\r\n                      block\r\n                      className='btn-icon'\r\n                    >\r\n                      <span className='btn-inner--icon'>\r\n                        <i className='fas fa-save'></i>\r\n                      </span>\r\n                      {infoModal.isLoading === true ? (\r\n                        <span className='btn-inner--text'>\r\n                          <SpinnerCircular\r\n                            size={24}\r\n                            thickness={180}\r\n                            speed={100}\r\n                            color='rgba(57, 125, 172, 1)'\r\n                            secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                          />{' '}\r\n                          Processing...\r\n                        </span>\r\n                      ) : (\r\n                        <span className='btn-inner--text'>Save Changes</span>\r\n                      )}\r\n                    </Button>\r\n                  </Form>\r\n                )}\r\n              />\r\n            </ModalBody>\r\n          </Modal>\r\n\r\n          {workOrders && infoModal.active && (\r\n            <Modal\r\n              isOpen={infoModal.isOpen}\r\n              toggle={() => {\r\n                setInfoModal({\r\n                  ...infoModal,\r\n                  isOpen: false,\r\n                  isEditOpen: false,\r\n                  isLoading: false\r\n                });\r\n              }}\r\n            >\r\n              <ModalHeader\r\n                toggle={() => {\r\n                  setInfoModal({\r\n                    ...infoModal,\r\n                    isOpen: false,\r\n                    isEditOpen: false,\r\n                    isLoading: false\r\n                  });\r\n                }}\r\n              >\r\n                View Order: {workOrders[infoModal.order].orderType} for{' '}\r\n                {workOrders[infoModal.order].customer.firstName}{' '}\r\n                {workOrders[infoModal.order].customer.lastName}\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <Row>\r\n                  <Col>\r\n                    <Label className='form-control-label'>\r\n                      Creation Method:\r\n                    </Label>\r\n                    {workOrders[infoModal.order].method ? (\r\n                      <p>{workOrders[infoModal.order].method}</p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Order Type:</Label>\r\n                    {workOrders[infoModal.order].orderType ? (\r\n                      <p>{workOrders[infoModal.order].orderType}</p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Status:</Label>\r\n                    <p>\r\n                      {workOrders[infoModal.order].status === 'Completed' ? (\r\n                        <Badge color='success'>Completed</Badge>\r\n                      ) : workOrders[infoModal.order].status === 'Assigned' ? (\r\n                        <Badge color='info'>Assigned</Badge>\r\n                      ) : workOrders[infoModal.order].status ===\r\n                        'Unassigned' ? (\r\n                        <Badge color='danger'>Unassigned</Badge>\r\n                      ) : workOrders[infoModal.order].status === 'Approved' ? (\r\n                        <Badge color='primary'>Approved</Badge>\r\n                      ) : workOrders[infoModal.order].status ===\r\n                        'Approval Needed' ? (\r\n                        <Badge color='warning'>Approval Needed</Badge>\r\n                      ) : workOrders[infoModal.order].status === 'Closed' ? (\r\n                        <Badge color='danger'>Closed</Badge>\r\n                      ) : (\r\n                        <Badge color='danger'>N/A</Badge>\r\n                      )}\r\n                    </p>\r\n                  </Col>\r\n                  <Col>\r\n                    <Label className='form-control-label'>\r\n                      Notified Customer:\r\n                    </Label>\r\n                    {workOrders[infoModal.order].notifyCustomer === true ? (\r\n                      <p>Yes</p>\r\n                    ) : (\r\n                      <p>No</p>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Description:</Label>\r\n                    {workOrders[infoModal.order].description ? (\r\n                      <p>{workOrders[infoModal.order].description}</p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Office Note:</Label>\r\n                    {workOrders[infoModal.order].officeNote ? (\r\n                      <p>{workOrders[infoModal.order].officeNote}</p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Technician:</Label>\r\n                    {workOrders[infoModal.order].technicianName ? (\r\n                      <p>{workOrders[infoModal.order].technicianName}</p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Date Of Order:</Label>\r\n                    {workOrders[infoModal.order].dateCreated ? (\r\n                      <p>\r\n                        {moment(workOrders[infoModal.order].dateCreated).format(\r\n                          'MMMM Do, YYYY'\r\n                        )}\r\n                      </p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <Label className='form-control-label'>\r\n                      Estimated Minutes:\r\n                    </Label>\r\n                    {workOrders[infoModal.order].estimatedMinutes ? (\r\n                      <p>{workOrders[infoModal.order].estimatedMinutes}</p>\r\n                    ) : (\r\n                      <p>0</p>\r\n                    )}\r\n                  </Col>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Labor Cost:</Label>\r\n                    {workOrders[infoModal.order].laborCost ? (\r\n                      <p>{workOrders[infoModal.order].laborCost}</p>\r\n                    ) : (\r\n                      <p>0</p>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Price:</Label>\r\n                    {workOrders[infoModal.order].price ? (\r\n                      <p>{workOrders[infoModal.order].price}</p>\r\n                    ) : (\r\n                      <p>0</p>\r\n                    )}\r\n                  </Col>\r\n                  <Col>\r\n                    <Label className='form-control-label'>\r\n                      Scheduled Date:\r\n                    </Label>\r\n                    {workOrders[infoModal.order].scheduledDate ? (\r\n                      <p>\r\n                        {moment(\r\n                          workOrders[infoModal.order].scheduledDate\r\n                        ).format('MMMM Do, YYYY')}\r\n                      </p>\r\n                    ) : workOrders[infoModal.order].scheduledDate === null ? (\r\n                      <p>Next Scheduled Visit</p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col>\r\n                    <Label className='form-control-label'>Customer Name:</Label>\r\n                    {workOrders[infoModal.order].customer ? (\r\n                      <p>\r\n                        {workOrders[infoModal.order].customer.firstName}{' '}\r\n                        {workOrders[infoModal.order].customer.lastName}\r\n                      </p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                  <Col>\r\n                    <Label className='form-control-label'>\r\n                      Customer Address:\r\n                    </Label>\r\n                    {workOrders[infoModal.order].customer ? (\r\n                      <p>\r\n                        {workOrders[infoModal.order].customer.serviceAddress},{' '}\r\n                        {workOrders[infoModal.order].customer.serviceCity}{' '}\r\n                        {workOrders[infoModal.order].customer.serviceState},{' '}\r\n                        {workOrders[infoModal.order].customer.serviceZip}\r\n                      </p>\r\n                    ) : (\r\n                      <p>N/A</p>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col>\r\n                    {workOrders[infoModal.order].status ===\r\n                      'Approval Needed' && (\r\n                      <Button\r\n                        className='btn-icon'\r\n                        color='primary'\r\n                        block\r\n                        onClick={async e => {\r\n                          e.preventDefault();\r\n                          setInfoModal({ ...infoModal, isLoading: true });\r\n                          await approveWorkOrder(infoModal.active);\r\n                          await getWorkOrders();\r\n                          setInfoModal({\r\n                            ...infoModal,\r\n                            isLoading: false,\r\n                            isOpen: false,\r\n                            isEditOpen: false\r\n                          });\r\n                        }}\r\n                      >\r\n                        <span className='btn-inner--icon'>\r\n                          <i className='fas fa-thumbs-up'></i>\r\n                        </span>\r\n                        {infoModal.isLoading ? (\r\n                          <span className='btn-inner--text'>\r\n                            <SpinnerCircular\r\n                              size={24}\r\n                              thickness={180}\r\n                              speed={100}\r\n                              color='rgba(57, 125, 172, 1)'\r\n                              secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                            />{' '}\r\n                            Processing...\r\n                          </span>\r\n                        ) : (\r\n                          <span className='btn-inner--text'>\r\n                            Approve Work Order\r\n                          </span>\r\n                        )}\r\n                      </Button>\r\n                    )}\r\n\r\n                    <Button\r\n                      color='success'\r\n                      className='btn-icon'\r\n                      block\r\n                      href={`https://www.google.com/maps/dir/?api=1&origin=Your+Location&destination=${\r\n                        workOrders[infoModal.order].customer.serviceLat\r\n                      },${workOrders[infoModal.order].customer.serviceLng}`}\r\n                      target='_blank'\r\n                    >\r\n                      <span className='btn-inner--icon'>\r\n                        <i className='fas fa-directions'></i>\r\n                      </span>\r\n                      <span className='btn-inner--text'>GPS To Customer</span>\r\n                    </Button>\r\n\r\n                    {/* <Button className='btn-icon' color='info' block>\r\n                      <span className='btn-inner--icon'>\r\n                        <i className='fas fa-user-alt'></i>\r\n                      </span>\r\n                      <span className='btn-inner--text'>\r\n                        Change Assigned Technician\r\n                      </span>\r\n                    </Button> */}\r\n                  </Col>\r\n                </Row>\r\n              </ModalBody>\r\n            </Modal>\r\n          )}\r\n          <Card>\r\n            <CardHeader>\r\n              <div className='row align-items-center'>\r\n                <Col lg={{ size: 'auto' }}>\r\n                  <h3 className='mb-0'>Work Orders</h3>\r\n                </Col>\r\n                <Col lg={{ size: 3, offset: 7 }}>\r\n                  <Button\r\n                    color='success'\r\n                    onClick={() =>\r\n                      setAddModal({ ...addModal, isOpen: !addModal.isOpen })\r\n                    }\r\n                  >\r\n                    <span className='btn-inner--icon'>\r\n                      <i className='ni ni-fat-add' />\r\n                    </span>\r\n                    <span className='btn-inner--text'> Add Work Order</span>\r\n                  </Button>\r\n                </Col>\r\n              </div>\r\n            </CardHeader>\r\n\r\n            <WorkOrderModal\r\n              addModal={addModal}\r\n              setAddModal={setAddModal}\r\n              createWorkOrder={createWorkOrder}\r\n              getWorkOrders={getWorkOrders}\r\n              formSchema={formSchema}\r\n              customers={customers}\r\n              employees={employees}\r\n            />\r\n\r\n            <CardBody>\r\n              <ToolkitProvider\r\n                data={workOrders}\r\n                keyField='_id'\r\n                columns={columns}\r\n                search\r\n                exportCSV={{ fileName: 'PP360 | WorkOrders.csv' }}\r\n              >\r\n                {props => (\r\n                  <div\r\n                    className='py-4 table-responsive'\r\n                    style={{ padding: '25px' }}\r\n                  >\r\n                    <div id='datatable-basic_filter' className='px-4 pb-1'>\r\n                      <Row>\r\n                        <Col md='6'>\r\n                          <ExportCSVButton\r\n                            className='buttons-copy buttons-html5 btn-sm'\r\n                            {...props.csvProps}\r\n                          >\r\n                            <i className='ni ni-align-left-2'></i> Export CSV\r\n                          </ExportCSVButton>\r\n                        </Col>\r\n                        <Col md={{ size: 'auto', offset: 3 }}>\r\n                          <SearchBar\r\n                            className='form-control-sm'\r\n                            placeholder='Search Work Orders...'\r\n                            {...props.searchProps}\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                    </div>\r\n\r\n                    <BootstrapTable\r\n                      {...props.baseProps}\r\n                      bootstrap4={true}\r\n                      pagination={pagination}\r\n                      bordered={false}\r\n                      wrapperClasses='table-responsive'\r\n                    />\r\n                  </div>\r\n                )}\r\n              </ToolkitProvider>\r\n            </CardBody>\r\n          </Card>\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nWorkOrders.propTypes = {\r\n  getWorkOrders: PropTypes.func.isRequired,\r\n  getEmployees: PropTypes.func.isRequired,\r\n  createWorkOrder: PropTypes.func.isRequired,\r\n  updateWorkOrder: PropTypes.func.isRequired,\r\n  approveWorkOrder: PropTypes.func.isRequired,\r\n  clearCustomers: PropTypes.func.isRequired,\r\n  customers: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  customers: state.customer,\r\n  employees: state.employee\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getWorkOrders,\r\n  getCustomers,\r\n  getEmployees,\r\n  createWorkOrder,\r\n  updateWorkOrder,\r\n  approveWorkOrder,\r\n  clearCustomers\r\n})(WorkOrders);\r\n",["490","491"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewWorkOrdersModal.js",["492","493","494","495","496","497","498","499","500"],"import React from 'react';\r\n\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n  Row,\r\n  Button,\r\n  Col,\r\n  Badge,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  ListGroupItemHeading,\r\n  ListGroupItemText\r\n} from 'reactstrap';\r\n\r\nconst ViewWorkOrdersModal = ({\r\n  workOrdersModal,\r\n  setWorkOrdersModal,\r\n  customers,\r\n  workOrders\r\n}) => {\r\n  return (\r\n    <Modal\r\n      isOpen={workOrdersModal.isOpen}\r\n      toggle={() =>\r\n        setWorkOrdersModal({\r\n          ...workOrdersModal,\r\n          isOpen: !workOrdersModal.isOpen\r\n        })\r\n      }\r\n    >\r\n      <ModalHeader\r\n        toggle={() =>\r\n          setWorkOrdersModal({\r\n            ...workOrdersModal,\r\n            isOpen: !workOrdersModal.isOpen\r\n          })\r\n        }\r\n      >\r\n        View {customers[0].firstName} {customers[0].lastName}'s Open Work\r\n        Orders:\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <ListGroup>\r\n          {workOrders\r\n            .filter(\r\n              e =>\r\n                e.customer._id === customers[0]._id && e.status === 'Approved'\r\n            )\r\n            .map(c => (\r\n              <ListGroupItem>\r\n                <ListGroupItemHeading>\r\n                  <Badge\r\n                    color={c.status === 'Approved' ? 'primary' : 'warning'}\r\n                  >\r\n                    {c.status}\r\n                  </Badge>{' '}\r\n                  {c.orderType}\r\n                </ListGroupItemHeading>\r\n                <p>\r\n                  Description: {c.description} <br /> Scheduled Date:{' '}\r\n                  {moment(c.scheduledDate).format('MMMM Do YYYY h:mm a')}\r\n                </p>\r\n              </ListGroupItem>\r\n            ))}\r\n        </ListGroup>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ViewWorkOrdersModal;\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ViewMyRoute.js",["501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ManageChecklist.js",["539"],"import React, { useState, useEffect, Fragment, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport {\r\n  getChecklist,\r\n  updateChecklist,\r\n  addItemChecklist,\r\n  getSingleCustomer\r\n} from '../../actions/customer';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  ListGroup,\r\n  ListGroupItem\r\n} from 'reactstrap';\r\n\r\nimport { SpinnerCircular } from 'spinners-react';\r\nimport { Formik } from 'formik';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\n\r\nconst ManageChecklist = ({\r\n  match,\r\n  getChecklist,\r\n  updateChecklist,\r\n  addItemChecklist,\r\n  getSingleCustomer,\r\n  checklist,\r\n  customer: { customer, singleLoading }\r\n}) => {\r\n  const [itemList, updateItemList] = useState(null);\r\n  const [itemListLoading, setItemListLoading] = useState(false);\r\n\r\n  const [addItemModal, setAddItemModal] = useState({\r\n    isOpen: false,\r\n    isLoading: false\r\n  });\r\n\r\n  const toggleAddModal = () => {\r\n    setAddItemModal({ ...addItemModal, isOpen: !addItemModal.isOpen });\r\n  };\r\n\r\n  const [deleteModal, setDeleteModal] = useState({\r\n    isOpen: false,\r\n    active: null,\r\n    isLoading: false\r\n  });\r\n\r\n  const deleteModalToggle = itemId => {\r\n    setDeleteModal({\r\n      ...deleteModal,\r\n      isOpen: !deleteModal.isOpen,\r\n      active: itemId\r\n    });\r\n  };\r\n\r\n  const deleteItemHandler = async () => {\r\n    setDeleteModal({ ...deleteModal, isLoading: true });\r\n    let newList = [...itemList];\r\n\r\n    newList.splice(\r\n      itemList.findIndex(item => item._id === deleteModal.active),\r\n      1\r\n    );\r\n\r\n    await updateItemList(newList);\r\n    await updateChecklist(match.params.id, newList);\r\n\r\n    setDeleteModal({ ...deleteModal, isLoading: false, isOpen: false });\r\n  };\r\n\r\n  const [editModal, setEditModal] = useState({\r\n    active: null,\r\n    activeContent: null,\r\n    isOpen: false,\r\n    isLoading: false\r\n  });\r\n\r\n  const toggleEditModal = (itemId, itemContent) => {\r\n    setEditModal({\r\n      ...editModal,\r\n      active: itemId,\r\n      activeContent: itemContent,\r\n      isOpen: !editModal.isOpen\r\n    });\r\n  };\r\n\r\n  const formRef = useRef();\r\n\r\n  const handleSubmit = () => {\r\n    if (formRef.current) {\r\n      formRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const addRef = useRef();\r\n\r\n  const handleAddItem = () => {\r\n    if (addRef.current) {\r\n      addRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const handleOnDragEnd = result => {\r\n    if (!result.destination) return;\r\n    const items = Array.from(itemList);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    updateItemList(items);\r\n  };\r\n  useEffect(() => {\r\n    async function getData() {\r\n      await getChecklist(match.params.id);\r\n    }\r\n    getData();\r\n  }, [getChecklist, match]);\r\n\r\n  useEffect(() => {\r\n    // if (itemListLoading === true) return;\r\n    updateItemList(checklist);\r\n    // console.log('updated');\r\n  }, [checklist]);\r\n\r\n  useEffect(() => {\r\n    getSingleCustomer(match.params.id);\r\n  }, [getSingleCustomer]);\r\n\r\n  const onSaveHandler = async () => {\r\n    setItemListLoading(true);\r\n    await updateChecklist(match.params.id, itemList);\r\n    await getChecklist(match.params.id);\r\n    setItemListLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='customers' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-12 col-12'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/customers'>Customers</Link>\r\n                      </li>\r\n                      {customer && customer.length >= 1 && (\r\n                        <li className='breadcrumb-item'>\r\n                          <Link to={`/customers/${match.params.id}`}>\r\n                            {customer[0].firstName} {customer[0].lastName}\r\n                          </Link>\r\n                        </li>\r\n                      )}\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to={`/customers/${match.params.id}/deleteImage`}>\r\n                          Manage Service Checklist\r\n                        </Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              {' '}\r\n              <div className='row align-items-center'>\r\n                <Col lg={{ size: 'auto' }}>\r\n                  <h3 className='mb-0'>Manage Checklist</h3>\r\n                  <small>Drag and Drop Items to Rearrange Their Order.</small>\r\n                </Col>\r\n                <Col lg={{ size: 'auto', offset: 9 }}>\r\n                  <Button\r\n                    className='btn-icon'\r\n                    color='success'\r\n                    onClick={onSaveHandler}\r\n                  >\r\n                    <span className='btn-inner--icon'>\r\n                      <i className='fas fa-save'></i>\r\n                    </span>\r\n                    <span className='btn-inner--text'>Save Changes</span>\r\n                  </Button>\r\n                </Col>\r\n              </div>\r\n            </CardHeader>\r\n            <CardBody>\r\n              {!checklist || itemList === null || checklist.length < 1 ? (\r\n                <Fragment>\r\n                  <div className='text-center'>\r\n                    <h3>No Items Found...</h3>\r\n                    <p>Try adding one!</p>\r\n                    <br />\r\n                    <Button\r\n                      className='btn-icon'\r\n                      color='primary'\r\n                      onClick={() => toggleAddModal()}\r\n                    >\r\n                      <span className='btn-inner--icon'>\r\n                        <i className='fas fa-plus'></i>\r\n                      </span>\r\n                      <span className='btn-inner--text'>Add Item</span>\r\n                    </Button>\r\n                  </div>\r\n                </Fragment>\r\n              ) : (\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                  <Droppable droppableId='items'>\r\n                    {provided => (\r\n                      <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                        {itemListLoading ? (\r\n                          <div className='text-center'>\r\n                            <SpinnerCircular\r\n                              size={24}\r\n                              thickness={180}\r\n                              speed={100}\r\n                              color='rgba(57, 125, 172, 1)'\r\n                              secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                            />{' '}\r\n                            <h3>Processing Changes...</h3>\r\n                          </div>\r\n                        ) : (\r\n                          <Fragment>\r\n                            <ListGroup>\r\n                              {itemList.map((item, index) => (\r\n                                <Draggable\r\n                                  key={item._id}\r\n                                  draggableId={item._id}\r\n                                  index={index}\r\n                                >\r\n                                  {provided => (\r\n                                    <div\r\n                                      {...provided.draggableProps}\r\n                                      {...provided.dragHandleProps}\r\n                                      ref={provided.innerRef}\r\n                                    >\r\n                                      <Fragment>\r\n                                        <ListGroupItem className='mgn-btm-10'>\r\n                                          <i className='fas fa-bars'></i>{' '}\r\n                                          {item.item}{' '}\r\n                                          <Button\r\n                                            size='sm'\r\n                                            color='primary'\r\n                                            onClick={() =>\r\n                                              toggleEditModal(\r\n                                                item._id,\r\n                                                item.item\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            Edit\r\n                                          </Button>\r\n                                          <Button\r\n                                            size='sm'\r\n                                            color='danger'\r\n                                            onClick={() =>\r\n                                              deleteModalToggle(item._id)\r\n                                            }\r\n                                          >\r\n                                            Delete\r\n                                          </Button>\r\n                                        </ListGroupItem>\r\n                                      </Fragment>\r\n                                    </div>\r\n                                  )}\r\n                                </Draggable>\r\n                              ))}\r\n                              {provided.placeholder}\r\n                            </ListGroup>\r\n                            <Modal\r\n                              isOpen={editModal.isOpen}\r\n                              toggle={toggleEditModal}\r\n                            >\r\n                              <ModalHeader toggle={toggleEditModal}>\r\n                                Edit Item: {editModal.activeContent}\r\n                              </ModalHeader>\r\n\r\n                              <Formik\r\n                                initialValues={{\r\n                                  item: editModal.activeContent\r\n                                }}\r\n                                innerRef={formRef}\r\n                                onSubmit={async data => {\r\n                                  const index = itemList.findIndex(\r\n                                    item => item._id === editModal.active\r\n                                  );\r\n                                  const original = [...itemList];\r\n                                  original[index].item = data.item;\r\n                                  await updateItemList(original);\r\n                                  onSaveHandler();\r\n                                  setEditModal({ ...editModal, isOpen: false });\r\n                                }}\r\n                                render={({\r\n                                  handleSubmit,\r\n                                  handleChange,\r\n                                  handleBlur,\r\n                                  values,\r\n                                  errors,\r\n                                  touched\r\n                                }) => (\r\n                                  <Fragment>\r\n                                    <ModalBody>\r\n                                      <Form onSubmit={handleSubmit}>\r\n                                        <Row>\r\n                                          <Col lg='12'>\r\n                                            <FormGroup>\r\n                                              <Label>Item:</Label>\r\n                                              <Input\r\n                                                type='text'\r\n                                                name='item'\r\n                                                value={values.item}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                              />\r\n                                            </FormGroup>\r\n                                          </Col>\r\n                                        </Row>\r\n                                      </Form>\r\n                                    </ModalBody>\r\n                                  </Fragment>\r\n                                )}\r\n                              />\r\n\r\n                              <ModalFooter>\r\n                                <Button onClick={toggleEditModal}>\r\n                                  Cancel\r\n                                </Button>\r\n                                <Button color='success' onClick={handleSubmit}>\r\n                                  Save Changes\r\n                                </Button>\r\n                              </ModalFooter>\r\n                            </Modal>\r\n                            <div className='text-center mgn-top-50'>\r\n                              <Button\r\n                                className='btn-icon'\r\n                                color='primary'\r\n                                onClick={toggleAddModal}\r\n                              >\r\n                                <span className='btn-inner--icon'>\r\n                                  <i className='fas fa-plus'></i>\r\n                                </span>\r\n                                <span className='btn-inner--text'>\r\n                                  Add Item\r\n                                </span>\r\n                              </Button>\r\n                            </div>\r\n                          </Fragment>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </Droppable>\r\n                </DragDropContext>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n          <Modal isOpen={addItemModal.isOpen} toggle={toggleAddModal}>\r\n            <ModalHeader toggle={toggleAddModal}>Add New Item:</ModalHeader>\r\n            <ModalBody>\r\n              <Formik\r\n                initialValues={{\r\n                  item: ''\r\n                }}\r\n                innerRef={addRef}\r\n                onSubmit={async data => {\r\n                  await addItemChecklist(match.params.id, data);\r\n                  await getChecklist(match.params.id);\r\n                  toggleAddModal();\r\n                }}\r\n                render={({\r\n                  handleSubmit,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  values,\r\n                  errors,\r\n                  touched\r\n                }) => (\r\n                  <Fragment>\r\n                    <Form onSubmit={handleSubmit}>\r\n                      <FormGroup>\r\n                        <Label>Item Content:</Label>\r\n                        <Input\r\n                          type='text'\r\n                          name='item'\r\n                          placeholder='Item Content...'\r\n                          value={values.item}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                        />\r\n                      </FormGroup>\r\n                    </Form>\r\n                  </Fragment>\r\n                )}\r\n              />\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button onClick={toggleAddModal}>Cancel</Button>\r\n              <Button color='success' onClick={handleAddItem}>\r\n                Save Item\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n\r\n          <Modal isOpen={deleteModal.isOpen} toggle={deleteModalToggle}>\r\n            <ModalHeader toggle={deleteModalToggle}>Are You Sure?</ModalHeader>\r\n            <ModalBody>\r\n              This will delete this item. This action is permanent and cannot be\r\n              undone.\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button onClick={deleteModalToggle}>Cancel</Button>\r\n              <Button color='danger' onClick={deleteItemHandler}>\r\n                {deleteModal.isLoading ? (\r\n                  <span>\r\n                    <SpinnerCircular\r\n                      size={24}\r\n                      thickness={180}\r\n                      speed={100}\r\n                      color='rgba(57, 125, 172, 1)'\r\n                      secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                    />\r\n                    Processing...\r\n                  </span>\r\n                ) : (\r\n                  <span>Delete Item</span>\r\n                )}\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nManageChecklist.propTypes = {\r\n  getChecklist: PropTypes.func.isRequired,\r\n  updateChecklist: PropTypes.func.isRequired,\r\n  addItemChecklist: PropTypes.func.isRequired,\r\n  getSingleCustomer: PropTypes.func.isRequired,\r\n  checklist: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  checklist: state.customer.checklist,\r\n  customer: state.customer.singleCustomer\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getChecklist,\r\n  updateChecklist,\r\n  addItemChecklist,\r\n  getSingleCustomer\r\n})(ManageChecklist);\r\n",["540","541"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\EditUser.js",["542","543"],"import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { SpinnerCircular } from 'spinners-react';\r\nimport {\r\n  updateEmployee,\r\n  getSingleEmployee,\r\n  updateEmployeePassword\r\n} from '../../actions/employee';\r\n\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Alert from '../Layout/Alert';\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Input,\r\n  Form,\r\n  Label,\r\n  FormGroup,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardFooter\r\n} from 'reactstrap';\r\n\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst EditUser = ({\r\n  match,\r\n  updateEmployee,\r\n  getSingleEmployee,\r\n  updateEmployeePassword,\r\n  employee\r\n}) => {\r\n  const [savingInfo, setSavingInfo] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getSingleEmployee(match.params.id);\r\n  }, [getSingleEmployee]);\r\n\r\n  const lowercaseRegex = /(?=.*[a-z])/;\r\n  const uppercaseRegex = /(?=.*[A-X])/;\r\n  const numericRegex = /(?=.*[0-9])/;\r\n\r\n  const passwordSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n      .matches(lowercaseRegex, 'Password must contain lowercase letter')\r\n      .matches(uppercaseRegex, 'Password must contain uppercase letter')\r\n      .matches(numericRegex, 'Password must contain a number')\r\n      .min(8, 'Password must be at least 8 characters long')\r\n      .required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password')], 'Passwords do not match')\r\n      .required('Please Confirm Password')\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='users' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-6 col-7'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/users'>Users</Link>\r\n                      </li>\r\n                      {employee.length >= 1 && (\r\n                        <li className='breadcrumb-item'>\r\n                          <Link to={`/users/${match.params.id}/view`}>\r\n                            {employee[0].firstName} {employee[0].lastName}\r\n                          </Link>\r\n                        </li>\r\n                      )}\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link to={`/users/${match.params.id}/edit`}>\r\n                          Edit User\r\n                        </Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60'>\r\n          <Card>\r\n            <CardHeader>\r\n              <Row className='align-items-center'>\r\n                <Col sm={{ size: 8 }}>\r\n                  <h3 className='mb-0'>Edit User:</h3>\r\n                </Col>\r\n              </Row>\r\n            </CardHeader>\r\n            <CardBody>\r\n              {!employee || !employee.length >= 1 ? (\r\n                <Fragment>\r\n                  <div className='text-center'>\r\n                    <h4>Loading Data...</h4>\r\n                    <SpinnerCircular\r\n                      size={54}\r\n                      thickness={180}\r\n                      speed={100}\r\n                      color='rgba(57, 125, 172, 1)'\r\n                      secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                    />\r\n                  </div>\r\n                </Fragment>\r\n              ) : (\r\n                <Fragment>\r\n                  <Formik\r\n                    initialValues={{\r\n                      firstName: employee[0].firstName,\r\n                      lastName: employee[0].lastName,\r\n                      email: employee[0].email,\r\n                      phone: employee[0].phone,\r\n                      role: employee[0].role\r\n                    }}\r\n                    onSubmit={async data => {\r\n                      setSavingInfo(true);\r\n                      await updateEmployee(match.params.id, data);\r\n                      setSavingInfo(false);\r\n                    }}\r\n                    render={({\r\n                      handleSubmit,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      validateForm,\r\n                      isValid\r\n                    }) => (\r\n                      <Fragment>\r\n                        <Form>\r\n                          <h6 className='heading-small text-muted mb-4'>\r\n                            User Information\r\n                          </h6>\r\n                          <div className='pl-lg-4'>\r\n                            <Row>\r\n                              <Col md='3'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='firstName'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    First Name\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='text'\r\n                                    name='firstName'\r\n                                    placeholder='Johnny'\r\n                                    value={values.firstName}\r\n                                    onChange={handleChange}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                              <Col md='3'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='lastName'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Last Name\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='text'\r\n                                    name='lastName'\r\n                                    value={values.lastName}\r\n                                    placeholder='Appleseed'\r\n                                    onChange={handleChange}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                              <Col md='6'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='email'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Email\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='email'\r\n                                    name='email'\r\n                                    value={values.email}\r\n                                    placeholder='johnny@example.com'\r\n                                    onChange={handleChange}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col md='6'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='role'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Role\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='select'\r\n                                    name='role'\r\n                                    value={values.role}\r\n                                    onChange={handleChange}\r\n                                  >\r\n                                    <option>Technician</option>\r\n                                    <option>Logistics</option>\r\n                                    <option>Admin</option>\r\n                                  </Input>\r\n                                </FormGroup>\r\n                              </Col>\r\n                              <Col md='6'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='Phone'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Phone\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='text'\r\n                                    name='phone'\r\n                                    value={values.phone}\r\n                                    placeholder='(555) 555-5555'\r\n                                    onChange={handleChange}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n                            <Button\r\n                              color='success'\r\n                              type='submit'\r\n                              onClick={handleSubmit}\r\n                            >\r\n                              {savingInfo ? (\r\n                                <span>\r\n                                  {' '}\r\n                                  <SpinnerCircular\r\n                                    size={24}\r\n                                    thickness={180}\r\n                                    speed={100}\r\n                                    color='rgba(57, 125, 172, 1)'\r\n                                    secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                  />{' '}\r\n                                  Processing...\r\n                                </span>\r\n                              ) : (\r\n                                <span>Save User Info</span>\r\n                              )}\r\n                            </Button>\r\n                          </div>\r\n                        </Form>\r\n                      </Fragment>\r\n                    )}\r\n                  />\r\n\r\n                  <hr className='my-4' />\r\n\r\n                  <Formik\r\n                    initialValues={{\r\n                      password: '',\r\n                      confirmPassword: ''\r\n                    }}\r\n                    onSubmit={async data => {\r\n                      updateEmployeePassword(match.params.id, data);\r\n                    }}\r\n                    validationSchema={passwordSchema}\r\n                    render={({\r\n                      handleSubmit,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      validateForm,\r\n                      isValid\r\n                    }) => (\r\n                      <Fragment>\r\n                        <h6 className='heading-small text-muted mb-4'>\r\n                          Change Password\r\n                        </h6>\r\n                        <div className='pl-lg-4'>\r\n                          <Form>\r\n                            <Row>\r\n                              <Col md='6'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='password'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    New Password\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='password'\r\n                                    name='password'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                  />\r\n                                  {errors.password && touched.password && (\r\n                                    <p className='color-red'>\r\n                                      {errors.password}\r\n                                    </p>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n\r\n                              <Col md='6'>\r\n                                <FormGroup>\r\n                                  <Label\r\n                                    for='confirmPassword'\r\n                                    className='form-control-label'\r\n                                  >\r\n                                    Confirm New Password\r\n                                  </Label>\r\n                                  <Input\r\n                                    type='password'\r\n                                    name='confirmPassword'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                  />\r\n                                  {errors.confirmPassword &&\r\n                                    touched.confirmPassword && (\r\n                                      <p className='color-red'>\r\n                                        {errors.confirmPassword}\r\n                                      </p>\r\n                                    )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n                            <Button\r\n                              color='success'\r\n                              type='submit'\r\n                              onClick={handleSubmit}\r\n                            >\r\n                              Save New Password\r\n                            </Button>\r\n                          </Form>\r\n                        </div>\r\n                      </Fragment>\r\n                    )}\r\n                  />\r\n                </Fragment>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nEditUser.propTypes = {\r\n  updateEmployee: PropTypes.func.isRequired,\r\n  getSingleEmployee: PropTypes.func.isRequired,\r\n  updateEmployeePassword: PropTypes.func.isRequired,\r\n  employee: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  employee: state.employee.singleEmployee\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateEmployee,\r\n  getSingleEmployee,\r\n  updateEmployeePassword\r\n})(EditUser);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\customer.js",["544"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ConfirmModal.js",["545","546","547","548","549","550","551","552","553","554"],"import React from 'react';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from 'reactstrap';\r\n\r\nconst ConfirmModal = props => {\r\n  return (\r\n    <Modal isOpen={props.openState} toggle={props.toggle}>\r\n      <ModalHeader toggle={props.toggle}>{props.header}</ModalHeader>\r\n      <ModalBody>\r\n        <p>\r\n          Are you sure you want to {props.action}? {props.result}\r\n        </p>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button block color='danger' onClick={props.toggle}>\r\n          Cancel\r\n        </Button>\r\n\r\n        <Button block color='success' onClick={props.confirm}>\r\n          {props.loading ? <span>Processing...</span> : <span>Confirm</span>}\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ConfirmModal;\r\n",["555","556"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\FormCreator.js",["557","558","559","560","561","562","563","564","565","566","567","568"],"import React, { Component, Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styled from 'styled-components';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from 'reactstrap';\r\n\r\nimport FormItemController from './FormItemController';\r\nimport FormSettingsController from './FormSettingsController';\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst copy = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const item = sourceClone[droppableSource.index];\r\n\r\n  destClone.splice(droppableDestination.index, 0, { ...item, id: uuidv4() });\r\n  return destClone;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst Content = styled.div`\r\n  margin-right: 200px;\r\n`;\r\n\r\nconst Item = styled.div`\r\n  display: flex;\r\n  user-select: none;\r\n  padding: 0.5rem;\r\n  margin: 0 0 0.5rem 0;\r\n  align-items: flex-start;\r\n  align-content: flex-start;\r\n  line-height: 1.5;\r\n  border-radius: 3px;\r\n  background: #fff;\r\n  border: 1px ${props => (props.isDragging ? 'dashed #000' : 'solid #ddd')};\r\n`;\r\n\r\nconst Clone = styled(Item)`\r\n  ~ div {\r\n    transform: none !important;\r\n  }\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  align-content: center;\r\n  user-select: none;\r\n  margin: -0.5rem 0.5rem -0.5rem -0.5rem;\r\n  padding: 0.5rem;\r\n  line-height: 1.5;\r\n  border-radius: 3px 0 0 3px;\r\n  background: #fff;\r\n  border-right: 1px solid #ddd;\r\n  color: #000;\r\n`;\r\n\r\nconst List = styled.div`\r\n  border: 1px ${props => (props.isDraggingOver ? 'dashed #000' : 'solid #ddd')};\r\n  background: #fff;\r\n  padding: 0.5rem 0.5rem 0;\r\n  border-radius: 3px;\r\n  flex: 0 0 150px;\r\n  font-family: sans-serif;\r\n  min-height: 200px;\r\n`;\r\n\r\nconst Kiosk = styled(List)`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  width: 200px;\r\n`;\r\n\r\nconst Container = styled(List)`\r\n  margin: 0.5rem 0.5rem 1.5rem;\r\n`;\r\n\r\nconst Notice = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  align-content: center;\r\n  justify-content: center;\r\n  padding: 0.5rem;\r\n  margin: 0 0.5rem 0.5rem;\r\n  border: 1px solid transparent;\r\n  line-height: 1.5;\r\n  color: #aaa;\r\n`;\r\n\r\nconst ITEMS = [\r\n  {\r\n    id: uuidv4(),\r\n    content: 'Input',\r\n    icon: 'fa-font',\r\n    tag: 'input',\r\n    type: 'text',\r\n    label: 'Input Field',\r\n    placeholder: ''\r\n  },\r\n  {\r\n    id: uuidv4(),\r\n    content: 'Text Area',\r\n    icon: 'fa-align-left',\r\n    tag: 'textarea',\r\n    label: 'Text Area Field',\r\n    placeholder: ''\r\n  },\r\n  {\r\n    id: uuidv4(),\r\n    content: 'Multiple Choice',\r\n    icon: 'fa-check-square',\r\n    label: 'Multiple Choice Field',\r\n    placeholder: '',\r\n    items: [\r\n      {\r\n        label: 'Inground Pool',\r\n        priceChange: 'increase',\r\n        amount: '20'\r\n      },\r\n      {\r\n        label: 'Above Ground Pool',\r\n        priceChange: 'increase',\r\n        amount: '0'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: uuidv4(),\r\n    content: 'Email',\r\n    icon: 'fa-envelope',\r\n    tag: 'input',\r\n    type: 'email',\r\n    label: 'Email Field',\r\n    placeholder: ''\r\n  },\r\n  {\r\n    id: uuidv4(),\r\n    content: 'Picture Choice',\r\n    icon: 'fa-image',\r\n    label: 'Picture Choice Field',\r\n    placeholder: '',\r\n    items: [\r\n      {\r\n        id: uuidv4(),\r\n        label: 'Inground Pool',\r\n        priceChange: 'increase',\r\n        amount: '20'\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        label: 'Above Ground Pool',\r\n        priceChange: 'decrease',\r\n        amount: '5'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default class FormCreator extends Component {\r\n  state = {\r\n    form: []\r\n  };\r\n\r\n  editPictureField(itemId, label, itemData) {\r\n    const formState = this.state.form;\r\n    let foundIndex = formState.findIndex(e => e.id == itemId);\r\n\r\n    formState[foundIndex].label = label;\r\n    formState[foundIndex].items = itemData;\r\n\r\n    //console.log(formState);\r\n\r\n    this.setState({ form: formState });\r\n\r\n    console.log(this.state.form);\r\n  }\r\n\r\n  editItem(itemId, label, placeholder) {\r\n    const formState = this.state.form;\r\n\r\n    let foundIndex = formState.findIndex(e => e.id == itemId);\r\n\r\n    formState[foundIndex].label = label;\r\n    formState[foundIndex].placeholder = placeholder;\r\n\r\n    // Never saved to state?\r\n  }\r\n\r\n  deletePictureOption(itemId, optionId) {\r\n    let formState = this.state.form.slice();\r\n\r\n    let foundIndex = formState.findIndex(e => e.id == itemId);\r\n\r\n    let updatedOptions = formState[foundIndex].items.filter(obj => {\r\n      return obj.id !== `${optionId}`;\r\n    });\r\n\r\n    //console.log(updatedOptions);\r\n\r\n    formState[foundIndex].items = updatedOptions;\r\n\r\n    this.setState({ form: formState });\r\n\r\n    console.log(this.state.form);\r\n\r\n    // console.log(formState);\r\n  }\r\n\r\n  deleteItem(item) {\r\n    const formState = this.state.form;\r\n\r\n    let updatedForm = formState.filter(obj => {\r\n      return obj.id !== `${item}`;\r\n    });\r\n\r\n    this.setState({ form: updatedForm });\r\n  }\r\n\r\n  onDragEnd = result => {\r\n    const { source, destination } = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    switch (source.droppableId) {\r\n      case destination.droppableId:\r\n        this.setState({\r\n          [destination.droppableId]: reorder(\r\n            this.state[source.droppableId],\r\n            source.index,\r\n            destination.index\r\n          )\r\n        });\r\n        break;\r\n      case 'ITEMS':\r\n        this.setState({\r\n          [destination.droppableId]: copy(\r\n            ITEMS,\r\n            this.state[destination.droppableId],\r\n            source,\r\n            destination\r\n          )\r\n        });\r\n        break;\r\n      default:\r\n        this.setState(\r\n          move(\r\n            this.state[source.droppableId],\r\n            this.state[destination.droppableId],\r\n            source,\r\n            destination\r\n          )\r\n        );\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    // console.log(this.state.form);\r\n    return (\r\n      <Fragment>\r\n        <FormSettingsController />\r\n        <DragDropContext onDragEnd={this.onDragEnd}>\r\n          <Droppable droppableId='ITEMS' isDropDisabled={true}>\r\n            {(provided, snapshot) => (\r\n              <Kiosk\r\n                ref={provided.innerRef}\r\n                isDraggingOver={snapshot.isDraggingOver}\r\n                className='builder__sidebar'\r\n              >\r\n                <h3 className='text-center text-white'>Control Panel</h3>\r\n                {ITEMS.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <React.Fragment>\r\n                        <Item\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          isDragging={snapshot.isDragging}\r\n                          style={provided.draggableProps.style}\r\n                          className='text-center creator__block'\r\n                        >\r\n                          <div className='width-100'>\r\n                            <i className={`fas ${item.icon}`}></i>\r\n                            <h4 className='text-white fweight-normal'>\r\n                              {item.content}\r\n                            </h4>\r\n                          </div>\r\n                        </Item>\r\n                        {snapshot.isDragging && (\r\n                          <Clone>\r\n                            {' '}\r\n                            <div className='width-100 text-center creator__block'>\r\n                              <i className={`fas ${item.icon}`}></i>\r\n                              <h4 className='text-white fweight-normal'>\r\n                                {item.content}\r\n                              </h4>\r\n                            </div>\r\n                          </Clone>\r\n                        )}\r\n                      </React.Fragment>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n\r\n                {provided.placeholder}\r\n              </Kiosk>\r\n            )}\r\n          </Droppable>\r\n          <Content>\r\n            {Object.keys(this.state).map((list, i) => (\r\n              <Droppable key={list} droppableId={list}>\r\n                {(provided, snapshot) => (\r\n                  <Container\r\n                    ref={provided.innerRef}\r\n                    isDraggingOver={snapshot.isDraggingOver}\r\n                  >\r\n                    <div className='text-center'>\r\n                      <i className='fas fa-plus-square'></i>\r\n                      <p>\r\n                        Drag and drop a item from the control panel to get\r\n                        started.\r\n                      </p>\r\n                    </div>\r\n\r\n                    {this.state[list].length\r\n                      ? this.state[list].map((item, index) => (\r\n                          <Draggable\r\n                            key={item.id}\r\n                            draggableId={item.id}\r\n                            index={index}\r\n                          >\r\n                            {(provided, snapshot) => (\r\n                              <Item\r\n                                ref={provided.innerRef}\r\n                                {...provided.draggableProps}\r\n                                isDragging={snapshot.isDragging}\r\n                                style={provided.draggableProps.style}\r\n                              >\r\n                                <Handle {...provided.dragHandleProps}>\r\n                                  <svg\r\n                                    width='24'\r\n                                    height='24'\r\n                                    viewBox='0 0 24 24'\r\n                                  >\r\n                                    <path\r\n                                      fill='currentColor'\r\n                                      d='M3,15H21V13H3V15M3,19H21V17H3V19M3,11H21V9H3V11M3,5V7H21V5H3Z'\r\n                                    />\r\n                                  </svg>\r\n                                </Handle>\r\n                                <FormItemController\r\n                                  item={item}\r\n                                  deleteItem={this.deleteItem.bind(this)}\r\n                                  editItem={this.editItem.bind(this)}\r\n                                  editPictureField={this.editPictureField.bind(\r\n                                    this\r\n                                  )}\r\n                                  deletePictureOption={this.deletePictureOption.bind(\r\n                                    this\r\n                                  )}\r\n                                />\r\n                                {/* {item.content}\r\n                              \r\n                              <div className='mgn-left-30'>\r\n                                <Button size='sm' color='info'>\r\n                                  Edit\r\n                                </Button>\r\n                                <Button\r\n                                  size='sm'\r\n                                  color='warning'\r\n                                  onClick={e => this.deleteItem(item.id)}\r\n                                >\r\n                                  Delete\r\n                                </Button>\r\n                              </div> */}\r\n                              </Item>\r\n                            )}\r\n                          </Draggable>\r\n                        ))\r\n                      : !provided.placeholder && (\r\n                          <Notice>Drop items here</Notice>\r\n                        )}\r\n                    {provided.placeholder}\r\n                  </Container>\r\n                )}\r\n              </Droppable>\r\n            ))}\r\n          </Content>\r\n        </DragDropContext>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// export default FormCreator;\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Customers.js",["569","570"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\Login.js",["571","572","573","574","575"],"import React, { Fragment, useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { login } from '../../actions/auth';\r\n\r\nimport Navbar from '../Layout/Navbar';\r\nimport Footer from '../Layout/Footer';\r\nimport Alert from '../Layout/Alert';\r\n\r\nconst Login = ({ login, isAuthenticated }) => {\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    password: ''\r\n  });\r\n\r\n  const { email, password } = formData;\r\n\r\n  const onChange = e => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmit = async e => {\r\n    e.preventDefault();\r\n    login(email, password);\r\n  };\r\n\r\n  // Redirect if logged in\r\n  if (isAuthenticated) {\r\n    return <Redirect to='/dashboard' />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Navbar />\r\n      <Alert />\r\n\r\n      <div className='main-content' style={{ background: '#172b4d' }}>\r\n        <div className='header bg-gradient-primary py-7 py-lg-8 pt-lg-9'>\r\n          <div className='container'>\r\n            <div className='header-body text-center mb-7'>\r\n              <div className='row justify-content-center'>\r\n                <div className='col-xl-5 col-lg-6 col-md-8 px-5'>\r\n                  <h1 className='text-white'>Welcome Back!</h1>\r\n                  <p className='text-lead text-white'>\r\n                    Sign into your PoolPro360 account below.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='separator separator-bottom separator-skew zindex-100'>\r\n            <svg\r\n              x='0'\r\n              y='0'\r\n              viewBox='0 0 2560 100'\r\n              preserveAspectRatio='none'\r\n              version='1.1'\r\n              xmlns='http://www.w3.org/2000/svg'\r\n            >\r\n              <polygon\r\n                className='fill-default'\r\n                points='2560 0 2560 100 0 100'\r\n              ></polygon>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='container mt--8 pb-5'>\r\n          <div className='row justify-content-center'>\r\n            <div className='col-lg-5 col-md-7'>\r\n              <div className='card bg-secondary border-0 mb-0'>\r\n                <div className='card-body px-lg-5 py-lg-5'>\r\n                  <div className='text-center text-muted mb-4'>\r\n                    <small>Sign in with credentials:</small>\r\n                  </div>\r\n                  <form role='form' onSubmit={onSubmit}>\r\n                    <div className='form-group mb-3'>\r\n                      <div className='input-group input-group-merge input-group-alternative'>\r\n                        <div className='input-group-prepend'>\r\n                          <span className='input-group-text'>\r\n                            <i className='ni ni-email-83'></i>\r\n                          </span>\r\n                        </div>\r\n                        <input\r\n                          className='form-control'\r\n                          placeholder='Email'\r\n                          type='email'\r\n                          onChange={e => onChange(e)}\r\n                          name='email'\r\n                          value={email}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                      <div className='input-group input-group-merge input-group-alternative'>\r\n                        <div className='input-group-prepend'>\r\n                          <span className='input-group-text'>\r\n                            <i className='ni ni-lock-circle-open'></i>\r\n                          </span>\r\n                        </div>\r\n                        <input\r\n                          className='form-control'\r\n                          placeholder='Password'\r\n                          type='password'\r\n                          onChange={e => onChange(e)}\r\n                          name='password'\r\n                          value={password}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className='custom-control custom-control-alternative custom-checkbox'>\r\n                      <input\r\n                        className='custom-control-input'\r\n                        id=' customCheckLogin'\r\n                        type='checkbox'\r\n                      />\r\n                      <label\r\n                        className='custom-control-label'\r\n                        htmlFor=' customCheckLogin'\r\n                      >\r\n                        <span className='text-muted'>Remember me</span>\r\n                      </label>\r\n                    </div>\r\n                    <div className='text-center'>\r\n                      <button\r\n                        type='button'\r\n                        type='submit'\r\n                        className='btn btn-primary my-4'\r\n                      >\r\n                        Sign in\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n              <div className='row mt-3'>\r\n                <div className='col-6'>\r\n                  <a href='#' className='text-light'>\r\n                    <small>Forgot password?</small>\r\n                  </a>\r\n                </div>\r\n                <div className='col-6 text-right'>\r\n                  <a href='#' className='text-light'>\r\n                    <small>Create new account</small>\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Footer cssClass='footer-dark' />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nLogin.propTypes = {\r\n  login: PropTypes.func.isRequired,\r\n  isAuthenticated: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\ManageEquipment.js",["576","577","578","579","580","581"],"import React, { Fragment, useState, useEffect, useRef } from 'react';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { SpinnerCircular } from 'spinners-react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Badge\r\n} from 'reactstrap';\r\n\r\nimport { Formik } from 'formik';\r\nimport {\r\n  getSingleCustomer,\r\n  updateEquipment,\r\n  deleteEquipment\r\n} from '../../actions/customer';\r\n\r\nimport Alert from '../Layout/Alert';\r\nimport Sidebar from '../dashboard/Sidebar';\r\nimport Dashnav from '../dashboard/Dashnav';\r\nimport Footer from '../Layout/Footer';\r\n\r\nimport PumpManager from '../EquipmentManagers/PumpManager';\r\nimport FilterManager from '../EquipmentManagers/FilterManager';\r\nimport HeaterManager from '../EquipmentManagers/HeaterManager';\r\nimport CleanerManager from '../EquipmentManagers/CleanerManager.';\r\nimport CustomManager from '../EquipmentManagers/CustomManager';\r\n\r\nconst ManageEquipment = ({\r\n  match,\r\n  getSingleCustomer,\r\n  updateEquipment,\r\n  deleteEquipment,\r\n  customer: { customer, singleLoading }\r\n}) => {\r\n  useEffect(() => {\r\n    getSingleCustomer(match.params.id);\r\n  }, [getSingleCustomer]);\r\n\r\n  const [itemsList, setItemsList] = useState([]);\r\n  const formRef = useRef();\r\n  const handleSubmit = () => {\r\n    if (formRef.current) {\r\n      formRef.current.handleSubmit();\r\n    }\r\n  };\r\n\r\n  const onAddItem = () => {\r\n    const object = {};\r\n    object.itentifier = uuidv4();\r\n    object.category = 'Cleaners';\r\n    object.make = 'Aqua Products';\r\n    object.model = 'AquaBot AB';\r\n\r\n    setItemsList([...itemsList, object]);\r\n  };\r\n\r\n  const handleCategoryChange = (id, data) => {\r\n    const itemIndex = itemsList.findIndex(item => item.itentifier === `${id}`);\r\n\r\n    const list = [...itemsList];\r\n    const itemToEdit = { ...list[itemIndex] };\r\n\r\n    itemToEdit.category = data.target.value;\r\n\r\n    list[itemIndex] = itemToEdit;\r\n\r\n    setItemsList(list);\r\n  };\r\n\r\n  const handleMakeChange = (id, data) => {\r\n    const itemIndex = itemsList.findIndex(item => item.itentifier === `${id}`);\r\n\r\n    const list = [...itemsList];\r\n    const itemToEdit = { ...list[itemIndex] };\r\n\r\n    itemToEdit.make = data.target.value;\r\n\r\n    list[itemIndex] = itemToEdit;\r\n\r\n    setItemsList(list);\r\n  };\r\n\r\n  const handleModelChange = (id, data) => {\r\n    const itemIndex = itemsList.findIndex(item => item.itentifier === `${id}`);\r\n\r\n    const list = [...itemsList];\r\n    const itemToEdit = { ...list[itemIndex] };\r\n\r\n    itemToEdit.model = data.target.value;\r\n\r\n    list[itemIndex] = itemToEdit;\r\n\r\n    setItemsList(list);\r\n  };\r\n\r\n  const [itemDeleteModal, setItemDeleteModal] = useState({\r\n    isOpen: false,\r\n    active: null,\r\n    isLoading: false\r\n  });\r\n\r\n  const toggleDeleteModal = itemId => {\r\n    setItemDeleteModal({\r\n      isOpen: !itemDeleteModal.open,\r\n      active: itemId,\r\n      isLoading: false\r\n    });\r\n  };\r\n\r\n  const handleItemDelete = async itemId => {\r\n    await deleteEquipment(match.params.id, itemId);\r\n    getSingleCustomer(match.params.id);\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Fragment>\r\n      <Sidebar active='customers' />\r\n      <div className='main-content' id='panel'>\r\n        <Dashnav />\r\n        <Alert />\r\n        <div className='header bg-primary pb-6'>\r\n          <div className='container-fluid'>\r\n            <div className='header-body'>\r\n              <div className='row align-items-center py-4'>\r\n                <div className='col-lg-12 col-12'>\r\n                  <h6 className='h2 text-white d-inline-block mb-0'>\r\n                    PoolPro360\r\n                  </h6>\r\n                  <nav\r\n                    aria-label='breadcrumb'\r\n                    className='d-none d-md-inline-block ml-md-4'\r\n                  >\r\n                    <ol className='breadcrumb breadcrumb-links breadcrumb-dark'>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/'>\r\n                          <i className='fas fa-home' />\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/dashboard'>Dashboard</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to='/customers'>Customers</Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item'>\r\n                        <Link to={`/customers/${match.params.id}`}>\r\n                          {match.params.id}\r\n                        </Link>\r\n                      </li>\r\n                      <li className='breadcrumb-item active'>\r\n                        <Link\r\n                          to={`/customers/${match.params.id}/manage/equipment`}\r\n                        >\r\n                          Manage Equipment\r\n                        </Link>\r\n                      </li>\r\n                    </ol>\r\n                  </nav>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Container className='mgn-ng-top-60'>\r\n          {!customer ? (\r\n            <Card>\r\n              <CardHeader>\r\n                {' '}\r\n                <div className='row align-items-center'>\r\n                  <div className='col-8'>\r\n                    <h3 className='mb-0'>Manage Equipment:</h3>\r\n                  </div>\r\n                </div>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <div className='text-center'>\r\n                  <h4>Loading Data...</h4>\r\n                  <SpinnerCircular\r\n                    size={54}\r\n                    thickness={180}\r\n                    speed={100}\r\n                    color='rgba(57, 125, 172, 1)'\r\n                    secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                  />\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          ) : (\r\n            <Card>\r\n              <CardHeader>\r\n                {' '}\r\n                <div className='row align-items-center'>\r\n                  <Col sm={{ size: 8 }}>\r\n                    <h3 className='mb-0'>Manage Equipment:</h3>\r\n                  </Col>\r\n                  <Col sm={{ size: 4 }} className='d-none d-lg-block'>\r\n                    <div className='text-right'>\r\n                      <Button\r\n                        type='submit'\r\n                        color='success'\r\n                        onClick={() => {\r\n                          handleSubmit();\r\n                          history.push(`/customers/${match.params.id}`);\r\n                        }}\r\n                      >\r\n                        Save Changes\r\n                      </Button>\r\n                    </div>\r\n                  </Col>\r\n                  <Col\r\n                    sm={{ size: 4 }}\r\n                    className='d-block d-sm-block d-md-block d-lg-none'\r\n                  >\r\n                    <br />\r\n                    <Button\r\n                      type='submit'\r\n                      color='success'\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      Save Changes\r\n                    </Button>\r\n                  </Col>\r\n                </div>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Fragment>\r\n                  <Formik\r\n                    initialValues={{\r\n                      poolType: customer[0].poolEquipment.poolType,\r\n                      bodiesOfWater: customer[0].poolEquipment.bodiesOfWater,\r\n                      poolGallons: customer[0].poolEquipment.poolGallons,\r\n                      pumpMake: customer[0].poolEquipment.pumpMake,\r\n                      pumpModel: customer[0].poolEquipment.pumpModel,\r\n                      heaterMake: customer[0].poolEquipment.heaterMake,\r\n                      heaterModel: customer[0].poolEquipment.heaterModel,\r\n                      filterMake: customer[0].poolEquipment.filterMake,\r\n                      filterModel: customer[0].poolEquipment.filterModel,\r\n                      cleanerMake: customer[0].poolEquipment.cleanerMake,\r\n                      cleanerModel: customer[0].poolEquipment.cleanerModel\r\n                    }}\r\n                    innerRef={formRef}\r\n                    onSubmit={async data => {\r\n                      await updateEquipment(match.params.id, itemsList, data);\r\n                      getSingleCustomer(match.params.id);\r\n                      setItemsList([]);\r\n                    }}\r\n                    render={({\r\n                      handleSubmit,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      values\r\n                    }) => (\r\n                      <Fragment>\r\n                        <Form onSubmit={handleSubmit}>\r\n                          <Row>\r\n                            <Col lg='4'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='poolType'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Pool Type:\r\n                                </Label>\r\n                                <Input\r\n                                  type='select'\r\n                                  name='poolType'\r\n                                  onChange={handleChange}\r\n                                  value={values.poolType}\r\n                                >\r\n                                  <option>N/A</option>\r\n                                  <option>Inground Pool</option>\r\n                                  <option>Above Ground Pool</option>\r\n                                  <option>Other</option>\r\n                                </Input>\r\n                              </FormGroup>\r\n                              <FormGroup>\r\n                                <Label className='form-control-label'>\r\n                                  How Many Gallons Is The Pool?:\r\n                                </Label>\r\n                                <InputGroup>\r\n                                  <Input\r\n                                    type='number'\r\n                                    placeholder='28000'\r\n                                    onChange={handleChange}\r\n                                    name='poolGallons'\r\n                                    value={values.poolGallons}\r\n                                  />\r\n                                  <InputGroupAddon addonType='append'>\r\n                                    <InputGroupText>Gallons</InputGroupText>\r\n                                  </InputGroupAddon>\r\n                                </InputGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='4'>\r\n                              <FormGroup>\r\n                                <Label\r\n                                  for='bodiesOfWater'\r\n                                  className='form-control-label'\r\n                                >\r\n                                  Bodies Of Water:\r\n                                </Label>\r\n                                <Input\r\n                                  type='select'\r\n                                  name='bodiesOfWater'\r\n                                  onChange={handleChange}\r\n                                  value={values.bodiesOfWater}\r\n                                >\r\n                                  <option>N/A</option>\r\n                                  <option>Pool</option>\r\n                                  <option>Spa</option>\r\n                                  <option>Pool & Spa</option>\r\n                                </Input>\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg='4'>\r\n                              <PumpManager\r\n                                handleChange={handleChange}\r\n                                handleBlur={handleBlur}\r\n                                values={values}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <hr />\r\n                          <Row>\r\n                            <Col lg='4'>\r\n                              <FilterManager\r\n                                handleChange={handleChange}\r\n                                handleBlur={handleBlur}\r\n                                values={values}\r\n                              />\r\n                            </Col>\r\n                            <Col lg='4'>\r\n                              <HeaterManager\r\n                                handleChange={handleChange}\r\n                                handleBlur={handleBlur}\r\n                                values={values}\r\n                              />\r\n                            </Col>\r\n\r\n                            <Col lg='4'>\r\n                              <CleanerManager\r\n                                handleChange={handleChange}\r\n                                handleBlur={handleBlur}\r\n                                values={values}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <hr />\r\n                          {customer[0].poolEquipment.other.map(item => (\r\n                            <Fragment key={item._id}>\r\n                              <Row>\r\n                                <Col md='3'>\r\n                                  <h4>Category:</h4>\r\n                                  {item.category}\r\n                                </Col>\r\n                                <Col md='3'>\r\n                                  <h4>Make:</h4>\r\n                                  {item.make}\r\n                                </Col>\r\n                                <Col md='3'>\r\n                                  <h4>Model:</h4>\r\n                                  {item.model}\r\n                                </Col>\r\n                                <Col md='3'>\r\n                                  <h4>Actions:</h4>\r\n                                  <Button\r\n                                    color='danger'\r\n                                    size='sm'\r\n                                    onClick={() => {\r\n                                      toggleDeleteModal(item._id);\r\n                                    }}\r\n                                  >\r\n                                    Delete Item\r\n                                  </Button>\r\n                                </Col>\r\n                              </Row>\r\n                              <br />\r\n                            </Fragment>\r\n                          ))}\r\n                          <Modal\r\n                            isOpen={itemDeleteModal.isOpen}\r\n                            toggle={e =>\r\n                              setItemDeleteModal({\r\n                                ...itemDeleteModal,\r\n                                isOpen: false\r\n                              })\r\n                            }\r\n                          >\r\n                            <ModalHeader\r\n                              toggle={e =>\r\n                                setItemDeleteModal({\r\n                                  ...itemDeleteModal,\r\n                                  isOpen: false\r\n                                })\r\n                              }\r\n                            >\r\n                              Are you sure?\r\n                            </ModalHeader>\r\n                            <ModalBody>\r\n                              Are you sure you want to delete this item? This\r\n                              action cannot be undone.\r\n                            </ModalBody>\r\n                            <ModalFooter>\r\n                              <Button\r\n                                onClick={e =>\r\n                                  setItemDeleteModal({\r\n                                    ...itemDeleteModal,\r\n                                    isOpen: false\r\n                                  })\r\n                                }\r\n                              >\r\n                                Cancel\r\n                              </Button>\r\n                              <Button\r\n                                color='danger'\r\n                                onClick={async e => {\r\n                                  setItemDeleteModal({\r\n                                    ...itemDeleteModal,\r\n                                    isLoading: true\r\n                                  });\r\n                                  await handleItemDelete(\r\n                                    itemDeleteModal.active\r\n                                  );\r\n                                  setItemDeleteModal({\r\n                                    isLoading: false,\r\n                                    isOpen: false,\r\n                                    active: null\r\n                                  });\r\n                                }}\r\n                              >\r\n                                {itemDeleteModal.isLoading ? (\r\n                                  <span>\r\n                                    <SpinnerCircular\r\n                                      size={24}\r\n                                      thickness={180}\r\n                                      speed={100}\r\n                                      color='rgba(57, 125, 172, 1)'\r\n                                      secondaryColor='rgba(0, 0, 0, 0.44)'\r\n                                    />{' '}\r\n                                    Processing...\r\n                                  </span>\r\n                                ) : (\r\n                                  <span>Delete Item</span>\r\n                                )}\r\n                              </Button>\r\n                            </ModalFooter>\r\n                          </Modal>\r\n                          <br />\r\n                          <CustomManager\r\n                            itemsList={itemsList}\r\n                            handleCategoryChange={handleCategoryChange}\r\n                            handleBlur={handleBlur}\r\n                            handleChange={handleChange}\r\n                            handleModelChange={handleModelChange}\r\n                            handleMakeChange={handleMakeChange}\r\n                          />\r\n\r\n                          <Row>\r\n                            <Col lg='12'>\r\n                              <div className='text-center'>\r\n                                <Button\r\n                                  className='btn-icon'\r\n                                  color='success'\r\n                                  onClick={onAddItem}\r\n                                  block\r\n                                >\r\n                                  <span className='btn-inner--icon'>\r\n                                    <i className='fas fa-plus'></i>\r\n                                  </span>\r\n                                  <span className='btn-inner--text'>\r\n                                    Add Item\r\n                                  </span>\r\n                                </Button>\r\n                              </div>\r\n                            </Col>\r\n                          </Row>\r\n                          <br />\r\n                        </Form>\r\n                      </Fragment>\r\n                    )}\r\n                  />\r\n                </Fragment>\r\n              </CardBody>\r\n            </Card>\r\n          )}\r\n          <Footer />\r\n        </Container>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nManageEquipment.propTypes = {\r\n  getSingleCustomer: PropTypes.func.isRequired,\r\n  updateEquipment: PropTypes.func.isRequired,\r\n  deleteEquipment: PropTypes.func.isRequired,\r\n  customer: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  customer: state.customer.singleCustomer\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSingleCustomer,\r\n  updateEquipment,\r\n  deleteEquipment\r\n})(ManageEquipment);\r\n","C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\user.js",["582","583"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\alert.js",["584"],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\actions\\auth.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\variables\\chart.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\components\\Layout\\LeafletMap.js",[],"C:\\Users\\camer\\Documents\\Sites\\poolpro360v2\\client\\src\\reducers\\employee.js",["585"],{"ruleId":"586","severity":1,"message":"587","line":9,"column":10,"nodeType":"588","messageId":"589","endLine":9,"endColumn":16},{"ruleId":"586","severity":1,"message":"590","line":19,"column":3,"nodeType":"588","messageId":"589","endLine":19,"endColumn":9},{"ruleId":"586","severity":1,"message":"591","line":28,"column":3,"nodeType":"588","messageId":"589","endLine":28,"endColumn":8},{"ruleId":"586","severity":1,"message":"592","line":29,"column":3,"nodeType":"588","messageId":"589","endLine":29,"endColumn":14},{"ruleId":"586","severity":1,"message":"593","line":30,"column":3,"nodeType":"588","messageId":"589","endLine":30,"endColumn":12},{"ruleId":"586","severity":1,"message":"594","line":31,"column":3,"nodeType":"588","messageId":"589","endLine":31,"endColumn":14},{"ruleId":"586","severity":1,"message":"595","line":32,"column":3,"nodeType":"588","messageId":"589","endLine":32,"endColumn":7},{"ruleId":"586","severity":1,"message":"596","line":33,"column":3,"nodeType":"588","messageId":"589","endLine":33,"endColumn":12},{"ruleId":"586","severity":1,"message":"597","line":34,"column":3,"nodeType":"588","messageId":"589","endLine":34,"endColumn":8},{"ruleId":"586","severity":1,"message":"598","line":35,"column":3,"nodeType":"588","messageId":"589","endLine":35,"endColumn":8},{"ruleId":"599","replacedBy":"600"},{"ruleId":"601","replacedBy":"602"},{"ruleId":"586","severity":1,"message":"603","line":26,"column":11,"nodeType":"588","messageId":"589","endLine":26,"endColumn":14},{"ruleId":"586","severity":1,"message":"603","line":108,"column":11,"nodeType":"588","messageId":"589","endLine":108,"endColumn":14},{"ruleId":"586","severity":1,"message":"603","line":141,"column":11,"nodeType":"588","messageId":"589","endLine":141,"endColumn":14},{"ruleId":"586","severity":1,"message":"603","line":175,"column":11,"nodeType":"588","messageId":"589","endLine":175,"endColumn":14},{"ruleId":"586","severity":1,"message":"603","line":204,"column":11,"nodeType":"588","messageId":"589","endLine":204,"endColumn":14},{"ruleId":"586","severity":1,"message":"603","line":223,"column":11,"nodeType":"588","messageId":"589","endLine":223,"endColumn":14},{"ruleId":"586","severity":1,"message":"604","line":48,"column":3,"nodeType":"588","messageId":"589","endLine":48,"endColumn":23},{"ruleId":"586","severity":1,"message":"605","line":49,"column":3,"nodeType":"588","messageId":"589","endLine":49,"endColumn":15},{"ruleId":"586","severity":1,"message":"606","line":50,"column":3,"nodeType":"588","messageId":"589","endLine":50,"endColumn":15},{"ruleId":"586","severity":1,"message":"607","line":51,"column":3,"nodeType":"588","messageId":"589","endLine":51,"endColumn":17},{"ruleId":"586","severity":1,"message":"608","line":60,"column":3,"nodeType":"588","messageId":"589","endLine":60,"endColumn":8},{"ruleId":"586","severity":1,"message":"609","line":66,"column":3,"nodeType":"588","messageId":"589","endLine":66,"endColumn":11},{"ruleId":"586","severity":1,"message":"610","line":67,"column":3,"nodeType":"588","messageId":"589","endLine":67,"endColumn":12},{"ruleId":"586","severity":1,"message":"611","line":224,"column":9,"nodeType":"588","messageId":"589","endLine":224,"endColumn":26},{"ruleId":"586","severity":1,"message":"603","line":290,"column":11,"nodeType":"588","messageId":"589","endLine":290,"endColumn":14},{"ruleId":"612","severity":1,"message":"613","line":1211,"column":49,"nodeType":"614","endLine":1211,"endColumn":75},{"ruleId":"599","replacedBy":"615"},{"ruleId":"601","replacedBy":"616"},{"ruleId":"617","severity":1,"message":"618","line":10,"column":1,"nodeType":"619","endLine":28,"endColumn":2},{"ruleId":"586","severity":1,"message":"594","line":61,"column":3,"nodeType":"588","messageId":"589","endLine":61,"endColumn":14},{"ruleId":"586","severity":1,"message":"595","line":62,"column":3,"nodeType":"588","messageId":"589","endLine":62,"endColumn":7},{"ruleId":"586","severity":1,"message":"620","line":70,"column":3,"nodeType":"588","messageId":"589","endLine":70,"endColumn":13},{"ruleId":"586","severity":1,"message":"621","line":71,"column":3,"nodeType":"588","messageId":"589","endLine":71,"endColumn":10},{"ruleId":"586","severity":1,"message":"622","line":72,"column":3,"nodeType":"588","messageId":"589","endLine":72,"endColumn":6},{"ruleId":"586","severity":1,"message":"623","line":73,"column":3,"nodeType":"588","messageId":"589","endLine":73,"endColumn":10},{"ruleId":"586","severity":1,"message":"624","line":74,"column":3,"nodeType":"588","messageId":"589","endLine":74,"endColumn":10},{"ruleId":"586","severity":1,"message":"625","line":235,"column":9,"nodeType":"588","messageId":"589","endLine":235,"endColumn":22},{"ruleId":"617","severity":1,"message":"618","line":21,"column":1,"nodeType":"619","endLine":61,"endColumn":2},{"ruleId":"586","severity":1,"message":"626","line":82,"column":3,"nodeType":"588","messageId":"589","endLine":82,"endColumn":23},{"ruleId":"586","severity":1,"message":"627","line":83,"column":3,"nodeType":"588","messageId":"589","endLine":83,"endColumn":20},{"ruleId":"599","replacedBy":"628"},{"ruleId":"601","replacedBy":"629"},{"ruleId":"586","severity":1,"message":"630","line":9,"column":10,"nodeType":"588","messageId":"589","endLine":9,"endColumn":14},{"ruleId":"599","replacedBy":"631"},{"ruleId":"601","replacedBy":"632"},{"ruleId":"586","severity":1,"message":"630","line":3,"column":10,"nodeType":"588","messageId":"589","endLine":3,"endColumn":14},{"ruleId":"586","severity":1,"message":"633","line":26,"column":3,"nodeType":"588","messageId":"589","endLine":26,"endColumn":13},{"ruleId":"634","severity":1,"message":"635","line":115,"column":19,"nodeType":"614","endLine":115,"endColumn":66},{"ruleId":"634","severity":1,"message":"635","line":118,"column":19,"nodeType":"614","endLine":118,"endColumn":66},{"ruleId":"586","severity":1,"message":"636","line":1,"column":27,"nodeType":"588","messageId":"589","endLine":1,"endColumn":36},{"ruleId":"586","severity":1,"message":"637","line":1,"column":38,"nodeType":"588","messageId":"589","endLine":1,"endColumn":46},{"ruleId":"586","severity":1,"message":"630","line":2,"column":10,"nodeType":"588","messageId":"589","endLine":2,"endColumn":14},{"ruleId":"586","severity":1,"message":"638","line":4,"column":10,"nodeType":"588","messageId":"589","endLine":4,"endColumn":13},{"ruleId":"586","severity":1,"message":"639","line":4,"column":15,"nodeType":"588","messageId":"589","endLine":4,"endColumn":18},{"ruleId":"586","severity":1,"message":"640","line":4,"column":20,"nodeType":"588","messageId":"589","endLine":4,"endColumn":29},{"ruleId":"586","severity":1,"message":"590","line":4,"column":31,"nodeType":"588","messageId":"589","endLine":4,"endColumn":37},{"ruleId":"586","severity":1,"message":"622","line":4,"column":39,"nodeType":"588","messageId":"589","endLine":4,"endColumn":42},{"ruleId":"599","replacedBy":"641"},{"ruleId":"601","replacedBy":"642"},{"ruleId":"586","severity":1,"message":"637","line":1,"column":27,"nodeType":"588","messageId":"589","endLine":1,"endColumn":35},{"ruleId":"586","severity":1,"message":"636","line":1,"column":37,"nodeType":"588","messageId":"589","endLine":1,"endColumn":46},{"ruleId":"586","severity":1,"message":"643","line":1,"column":48,"nodeType":"588","messageId":"589","endLine":1,"endColumn":54},{"ruleId":"586","severity":1,"message":"637","line":1,"column":27,"nodeType":"588","messageId":"589","endLine":1,"endColumn":35},{"ruleId":"586","severity":1,"message":"638","line":2,"column":10,"nodeType":"588","messageId":"589","endLine":2,"endColumn":13},{"ruleId":"586","severity":1,"message":"639","line":2,"column":15,"nodeType":"588","messageId":"589","endLine":2,"endColumn":18},{"ruleId":"586","severity":1,"message":"640","line":2,"column":20,"nodeType":"588","messageId":"589","endLine":2,"endColumn":29},{"ruleId":"586","severity":1,"message":"590","line":2,"column":31,"nodeType":"588","messageId":"589","endLine":2,"endColumn":37},{"ruleId":"586","severity":1,"message":"622","line":2,"column":39,"nodeType":"588","messageId":"589","endLine":2,"endColumn":42},{"ruleId":"612","severity":1,"message":"613","line":23,"column":13,"nodeType":"614","endLine":23,"endColumn":31},{"ruleId":"612","severity":1,"message":"613","line":44,"column":21,"nodeType":"614","endLine":44,"endColumn":40},{"ruleId":"644","severity":1,"message":"645","line":86,"column":19,"nodeType":"646","endLine":86,"endColumn":34},{"ruleId":"644","severity":1,"message":"645","line":101,"column":19,"nodeType":"646","endLine":101,"endColumn":34},{"ruleId":"644","severity":1,"message":"645","line":116,"column":19,"nodeType":"646","endLine":116,"endColumn":34},{"ruleId":"644","severity":1,"message":"645","line":131,"column":19,"nodeType":"646","endLine":131,"endColumn":34},{"ruleId":"599","replacedBy":"647"},{"ruleId":"601","replacedBy":"648"},{"ruleId":"599","replacedBy":"649"},{"ruleId":"601","replacedBy":"650"},{"ruleId":"586","severity":1,"message":"651","line":1,"column":10,"nodeType":"588","messageId":"589","endLine":1,"endColumn":18},{"ruleId":"586","severity":1,"message":"640","line":3,"column":20,"nodeType":"588","messageId":"589","endLine":3,"endColumn":29},{"ruleId":"586","severity":1,"message":"590","line":3,"column":31,"nodeType":"588","messageId":"589","endLine":3,"endColumn":37},{"ruleId":"586","severity":1,"message":"622","line":3,"column":39,"nodeType":"588","messageId":"589","endLine":3,"endColumn":42},{"ruleId":"612","severity":1,"message":"613","line":239,"column":17,"nodeType":"614","endLine":242,"endColumn":19},{"ruleId":"612","severity":1,"message":"613","line":300,"column":17,"nodeType":"614","endLine":303,"endColumn":19},{"ruleId":"612","severity":1,"message":"613","line":328,"column":17,"nodeType":"614","endLine":331,"endColumn":19},{"ruleId":"644","severity":1,"message":"645","line":374,"column":21,"nodeType":"646","endLine":374,"endColumn":36},{"ruleId":"644","severity":1,"message":"645","line":430,"column":21,"nodeType":"646","endLine":430,"endColumn":36},{"ruleId":"644","severity":1,"message":"645","line":452,"column":25,"nodeType":"646","endLine":452,"endColumn":40},{"ruleId":"612","severity":1,"message":"613","line":456,"column":25,"nodeType":"614","endLine":459,"endColumn":27},{"ruleId":"612","severity":1,"message":"613","line":469,"column":25,"nodeType":"614","endLine":472,"endColumn":27},{"ruleId":"612","severity":1,"message":"613","line":482,"column":25,"nodeType":"614","endLine":485,"endColumn":27},{"ruleId":"612","severity":1,"message":"613","line":495,"column":25,"nodeType":"614","endLine":498,"endColumn":27},{"ruleId":"612","severity":1,"message":"613","line":508,"column":25,"nodeType":"614","endLine":511,"endColumn":27},{"ruleId":"612","severity":1,"message":"613","line":521,"column":25,"nodeType":"614","endLine":524,"endColumn":27},{"ruleId":"612","severity":1,"message":"613","line":536,"column":25,"nodeType":"614","endLine":539,"endColumn":27},{"ruleId":"612","severity":1,"message":"613","line":549,"column":25,"nodeType":"614","endLine":552,"endColumn":27},{"ruleId":"599","replacedBy":"652"},{"ruleId":"601","replacedBy":"653"},{"ruleId":"586","severity":1,"message":"654","line":20,"column":3,"nodeType":"588","messageId":"589","endLine":20,"endColumn":21},{"ruleId":"586","severity":1,"message":"655","line":21,"column":3,"nodeType":"588","messageId":"589","endLine":21,"endColumn":20},{"ruleId":"586","severity":1,"message":"656","line":22,"column":3,"nodeType":"588","messageId":"589","endLine":22,"endColumn":11},{"ruleId":"586","severity":1,"message":"657","line":94,"column":10,"nodeType":"588","messageId":"589","endLine":94,"endColumn":13},{"ruleId":"586","severity":1,"message":"658","line":112,"column":9,"nodeType":"588","messageId":"589","endLine":112,"endColumn":21},{"ruleId":"659","severity":1,"message":"660","line":143,"column":6,"nodeType":"661","endLine":143,"endColumn":17,"suggestions":"662"},{"ruleId":"659","severity":1,"message":"663","line":162,"column":6,"nodeType":"661","endLine":162,"endColumn":17,"suggestions":"664"},{"ruleId":"586","severity":1,"message":"665","line":176,"column":11,"nodeType":"588","messageId":"589","endLine":176,"endColumn":17},{"ruleId":"586","severity":1,"message":"666","line":218,"column":10,"nodeType":"588","messageId":"589","endLine":218,"endColumn":19},{"ruleId":"586","severity":1,"message":"605","line":30,"column":3,"nodeType":"588","messageId":"589","endLine":30,"endColumn":15},{"ruleId":"586","severity":1,"message":"606","line":31,"column":3,"nodeType":"588","messageId":"589","endLine":31,"endColumn":15},{"ruleId":"586","severity":1,"message":"607","line":32,"column":3,"nodeType":"588","messageId":"589","endLine":32,"endColumn":17},{"ruleId":"586","severity":1,"message":"604","line":37,"column":3,"nodeType":"588","messageId":"589","endLine":37,"endColumn":23},{"ruleId":"586","severity":1,"message":"667","line":38,"column":3,"nodeType":"588","messageId":"589","endLine":38,"endColumn":8},{"ruleId":"586","severity":1,"message":"668","line":39,"column":3,"nodeType":"588","messageId":"589","endLine":39,"endColumn":11},{"ruleId":"586","severity":1,"message":"669","line":40,"column":3,"nodeType":"588","messageId":"589","endLine":40,"endColumn":8},{"ruleId":"586","severity":1,"message":"670","line":41,"column":3,"nodeType":"588","messageId":"589","endLine":41,"endColumn":10},{"ruleId":"586","severity":1,"message":"640","line":42,"column":3,"nodeType":"588","messageId":"589","endLine":42,"endColumn":12},{"ruleId":"659","severity":1,"message":"671","line":70,"column":6,"nodeType":"661","endLine":70,"endColumn":12,"suggestions":"672"},{"ruleId":"586","severity":1,"message":"673","line":78,"column":9,"nodeType":"588","messageId":"589","endLine":78,"endColumn":19},{"ruleId":"586","severity":1,"message":"674","line":123,"column":9,"nodeType":"588","messageId":"589","endLine":123,"endColumn":16},{"ruleId":"659","severity":1,"message":"675","line":211,"column":13,"nodeType":"676","endLine":225,"endColumn":4},{"ruleId":"659","severity":1,"message":"677","line":225,"column":6,"nodeType":"661","endLine":225,"endColumn":16,"suggestions":"678"},{"ruleId":"586","severity":1,"message":"679","line":228,"column":10,"nodeType":"588","messageId":"589","endLine":228,"endColumn":28},{"ruleId":"586","severity":1,"message":"680","line":264,"column":9,"nodeType":"588","messageId":"589","endLine":264,"endColumn":21},{"ruleId":"659","severity":1,"message":"681","line":273,"column":6,"nodeType":"661","endLine":273,"endColumn":17,"suggestions":"682"},{"ruleId":"659","severity":1,"message":"681","line":280,"column":6,"nodeType":"661","endLine":280,"endColumn":20,"suggestions":"683"},{"ruleId":"684","severity":1,"message":"685","line":562,"column":55,"nodeType":"686","messageId":"687","endLine":562,"endColumn":57},{"ruleId":"684","severity":1,"message":"688","line":3396,"column":68,"nodeType":"686","messageId":"687","endLine":3396,"endColumn":70},{"ruleId":"684","severity":1,"message":"688","line":3442,"column":70,"nodeType":"686","messageId":"687","endLine":3442,"endColumn":72},{"ruleId":"599","replacedBy":"689"},{"ruleId":"601","replacedBy":"690"},{"ruleId":"586","severity":1,"message":"590","line":11,"column":20,"nodeType":"588","messageId":"589","endLine":11,"endColumn":26},{"ruleId":"586","severity":1,"message":"691","line":11,"column":28,"nodeType":"588","messageId":"589","endLine":11,"endColumn":36},{"ruleId":"586","severity":1,"message":"692","line":11,"column":38,"nodeType":"588","messageId":"589","endLine":11,"endColumn":42},{"ruleId":"659","severity":1,"message":"693","line":45,"column":6,"nodeType":"661","endLine":45,"endColumn":8,"suggestions":"694"},{"ruleId":"599","replacedBy":"695"},{"ruleId":"601","replacedBy":"696"},{"ruleId":"586","severity":1,"message":"697","line":23,"column":10,"nodeType":"588","messageId":"589","endLine":23,"endColumn":20},{"ruleId":"586","severity":1,"message":"698","line":24,"column":8,"nodeType":"588","messageId":"589","endLine":24,"endColumn":21},{"ruleId":"586","severity":1,"message":"699","line":32,"column":3,"nodeType":"588","messageId":"589","endLine":32,"endColumn":14},{"ruleId":"586","severity":1,"message":"700","line":34,"column":3,"nodeType":"588","messageId":"589","endLine":34,"endColumn":11},{"ruleId":"586","severity":1,"message":"633","line":37,"column":3,"nodeType":"588","messageId":"589","endLine":37,"endColumn":13},{"ruleId":"586","severity":1,"message":"701","line":47,"column":3,"nodeType":"588","messageId":"589","endLine":47,"endColumn":13},{"ruleId":"586","severity":1,"message":"702","line":48,"column":3,"nodeType":"588","messageId":"589","endLine":48,"endColumn":17},{"ruleId":"586","severity":1,"message":"703","line":49,"column":3,"nodeType":"588","messageId":"589","endLine":49,"endColumn":17},{"ruleId":"586","severity":1,"message":"668","line":50,"column":3,"nodeType":"588","messageId":"589","endLine":50,"endColumn":11},{"ruleId":"586","severity":1,"message":"670","line":52,"column":3,"nodeType":"588","messageId":"589","endLine":52,"endColumn":10},{"ruleId":"586","severity":1,"message":"704","line":56,"column":3,"nodeType":"588","messageId":"589","endLine":56,"endColumn":22},{"ruleId":"586","severity":1,"message":"705","line":57,"column":3,"nodeType":"588","messageId":"589","endLine":57,"endColumn":12},{"ruleId":"586","severity":1,"message":"706","line":58,"column":3,"nodeType":"588","messageId":"589","endLine":58,"endColumn":16},{"ruleId":"586","severity":1,"message":"691","line":59,"column":3,"nodeType":"588","messageId":"589","endLine":59,"endColumn":11},{"ruleId":"586","severity":1,"message":"594","line":63,"column":3,"nodeType":"588","messageId":"589","endLine":63,"endColumn":14},{"ruleId":"586","severity":1,"message":"707","line":80,"column":15,"nodeType":"588","messageId":"589","endLine":80,"endColumn":19},{"ruleId":"586","severity":1,"message":"708","line":88,"column":8,"nodeType":"588","messageId":"589","endLine":88,"endColumn":14},{"ruleId":"586","severity":1,"message":"709","line":95,"column":8,"nodeType":"588","messageId":"589","endLine":95,"endColumn":12},{"ruleId":"586","severity":1,"message":"710","line":100,"column":3,"nodeType":"588","messageId":"589","endLine":100,"endColumn":16},{"ruleId":"586","severity":1,"message":"711","line":103,"column":8,"nodeType":"588","messageId":"589","endLine":103,"endColumn":11},{"ruleId":"586","severity":1,"message":"712","line":104,"column":10,"nodeType":"588","messageId":"589","endLine":104,"endColumn":13},{"ruleId":"586","severity":1,"message":"713","line":105,"column":8,"nodeType":"588","messageId":"589","endLine":105,"endColumn":16},{"ruleId":"659","severity":1,"message":"671","line":165,"column":6,"nodeType":"661","endLine":165,"endColumn":12,"suggestions":"714"},{"ruleId":"586","severity":1,"message":"715","line":199,"column":9,"nodeType":"588","messageId":"589","endLine":199,"endColumn":27},{"ruleId":"586","severity":1,"message":"716","line":201,"column":9,"nodeType":"588","messageId":"589","endLine":201,"endColumn":14},{"ruleId":"586","severity":1,"message":"717","line":335,"column":10,"nodeType":"588","messageId":"589","endLine":335,"endColumn":22},{"ruleId":"586","severity":1,"message":"718","line":335,"column":24,"nodeType":"588","messageId":"589","endLine":335,"endColumn":39},{"ruleId":"586","severity":1,"message":"719","line":336,"column":10,"nodeType":"588","messageId":"589","endLine":336,"endColumn":19},{"ruleId":"586","severity":1,"message":"720","line":336,"column":21,"nodeType":"588","messageId":"589","endLine":336,"endColumn":33},{"ruleId":"586","severity":1,"message":"721","line":337,"column":10,"nodeType":"588","messageId":"589","endLine":337,"endColumn":20},{"ruleId":"586","severity":1,"message":"722","line":337,"column":22,"nodeType":"588","messageId":"589","endLine":337,"endColumn":35},{"ruleId":"586","severity":1,"message":"723","line":338,"column":10,"nodeType":"588","messageId":"589","endLine":338,"endColumn":19},{"ruleId":"586","severity":1,"message":"724","line":338,"column":21,"nodeType":"588","messageId":"589","endLine":338,"endColumn":33},{"ruleId":"586","severity":1,"message":"725","line":339,"column":10,"nodeType":"588","messageId":"589","endLine":339,"endColumn":19},{"ruleId":"586","severity":1,"message":"726","line":339,"column":21,"nodeType":"588","messageId":"589","endLine":339,"endColumn":33},{"ruleId":"586","severity":1,"message":"727","line":340,"column":10,"nodeType":"588","messageId":"589","endLine":340,"endColumn":23},{"ruleId":"586","severity":1,"message":"728","line":340,"column":25,"nodeType":"588","messageId":"589","endLine":340,"endColumn":41},{"ruleId":"586","severity":1,"message":"729","line":341,"column":10,"nodeType":"588","messageId":"589","endLine":341,"endColumn":24},{"ruleId":"586","severity":1,"message":"730","line":341,"column":26,"nodeType":"588","messageId":"589","endLine":341,"endColumn":43},{"ruleId":"586","severity":1,"message":"731","line":356,"column":20,"nodeType":"588","messageId":"589","endLine":356,"endColumn":31},{"ruleId":"586","severity":1,"message":"732","line":357,"column":10,"nodeType":"588","messageId":"589","endLine":357,"endColumn":27},{"ruleId":"586","severity":1,"message":"733","line":357,"column":29,"nodeType":"588","messageId":"589","endLine":357,"endColumn":49},{"ruleId":"586","severity":1,"message":"734","line":358,"column":10,"nodeType":"588","messageId":"589","endLine":358,"endColumn":27},{"ruleId":"586","severity":1,"message":"735","line":361,"column":10,"nodeType":"588","messageId":"589","endLine":361,"endColumn":26},{"ruleId":"586","severity":1,"message":"736","line":363,"column":9,"nodeType":"588","messageId":"589","endLine":363,"endColumn":28},{"ruleId":"586","severity":1,"message":"737","line":389,"column":9,"nodeType":"588","messageId":"589","endLine":389,"endColumn":23},{"ruleId":"659","severity":1,"message":"675","line":393,"column":13,"nodeType":"676","endLine":404,"endColumn":4},{"ruleId":"659","severity":1,"message":"738","line":404,"column":6,"nodeType":"661","endLine":404,"endColumn":16,"suggestions":"739"},{"ruleId":"586","severity":1,"message":"679","line":407,"column":10,"nodeType":"588","messageId":"589","endLine":407,"endColumn":28},{"ruleId":"586","severity":1,"message":"740","line":413,"column":9,"nodeType":"588","messageId":"589","endLine":413,"endColumn":21},{"ruleId":"586","severity":1,"message":"741","line":437,"column":9,"nodeType":"588","messageId":"589","endLine":437,"endColumn":15},{"ruleId":"586","severity":1,"message":"680","line":443,"column":9,"nodeType":"588","messageId":"589","endLine":443,"endColumn":21},{"ruleId":"659","severity":1,"message":"681","line":452,"column":6,"nodeType":"661","endLine":452,"endColumn":17,"suggestions":"742"},{"ruleId":"659","severity":1,"message":"681","line":459,"column":6,"nodeType":"661","endLine":459,"endColumn":20,"suggestions":"743"},{"ruleId":"586","severity":1,"message":"636","line":1,"column":27,"nodeType":"588","messageId":"589","endLine":1,"endColumn":36},{"ruleId":"586","severity":1,"message":"637","line":1,"column":38,"nodeType":"588","messageId":"589","endLine":1,"endColumn":46},{"ruleId":"586","severity":1,"message":"744","line":4,"column":3,"nodeType":"588","messageId":"589","endLine":4,"endColumn":12},{"ruleId":"586","severity":1,"message":"745","line":5,"column":3,"nodeType":"588","messageId":"589","endLine":5,"endColumn":13},{"ruleId":"586","severity":1,"message":"746","line":6,"column":3,"nodeType":"588","messageId":"589","endLine":6,"endColumn":9},{"ruleId":"586","severity":1,"message":"747","line":7,"column":3,"nodeType":"588","messageId":"589","endLine":7,"endColumn":13},{"ruleId":"586","severity":1,"message":"654","line":8,"column":3,"nodeType":"588","messageId":"589","endLine":8,"endColumn":21},{"ruleId":"586","severity":1,"message":"655","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":20},{"ruleId":"586","severity":1,"message":"656","line":10,"column":3,"nodeType":"588","messageId":"589","endLine":10,"endColumn":11},{"ruleId":"586","severity":1,"message":"748","line":13,"column":8,"nodeType":"588","messageId":"589","endLine":13,"endColumn":29},{"ruleId":"586","severity":1,"message":"749","line":22,"column":8,"nodeType":"588","messageId":"589","endLine":22,"endColumn":14},{"ruleId":"586","severity":1,"message":"750","line":28,"column":8,"nodeType":"588","messageId":"589","endLine":28,"endColumn":22},{"ruleId":"586","severity":1,"message":"751","line":35,"column":8,"nodeType":"588","messageId":"589","endLine":35,"endColumn":18},{"ruleId":"586","severity":1,"message":"752","line":37,"column":5,"nodeType":"588","messageId":"589","endLine":37,"endColumn":8},{"ruleId":"586","severity":1,"message":"753","line":39,"column":7,"nodeType":"588","messageId":"589","endLine":39,"endColumn":17},{"ruleId":"586","severity":1,"message":"754","line":48,"column":7,"nodeType":"588","messageId":"589","endLine":48,"endColumn":21},{"ruleId":"586","severity":1,"message":"755","line":53,"column":7,"nodeType":"588","messageId":"589","endLine":53,"endColumn":16},{"ruleId":"586","severity":1,"message":"657","line":86,"column":10,"nodeType":"588","messageId":"589","endLine":86,"endColumn":13},{"ruleId":"586","severity":1,"message":"756","line":92,"column":10,"nodeType":"588","messageId":"589","endLine":92,"endColumn":18},{"ruleId":"586","severity":1,"message":"757","line":97,"column":9,"nodeType":"588","messageId":"589","endLine":97,"endColumn":22},{"ruleId":"586","severity":1,"message":"758","line":104,"column":9,"nodeType":"588","messageId":"589","endLine":104,"endColumn":26},{"ruleId":"586","severity":1,"message":"759","line":111,"column":9,"nodeType":"588","messageId":"589","endLine":111,"endColumn":15},{"ruleId":"586","severity":1,"message":"760","line":117,"column":9,"nodeType":"588","messageId":"589","endLine":117,"endColumn":18},{"ruleId":"586","severity":1,"message":"761","line":143,"column":10,"nodeType":"588","messageId":"589","endLine":143,"endColumn":21},{"ruleId":"586","severity":1,"message":"762","line":143,"column":23,"nodeType":"588","messageId":"589","endLine":143,"endColumn":37},{"ruleId":"586","severity":1,"message":"763","line":147,"column":9,"nodeType":"588","messageId":"589","endLine":147,"endColumn":19},{"ruleId":"586","severity":1,"message":"764","line":148,"column":9,"nodeType":"588","messageId":"589","endLine":148,"endColumn":15},{"ruleId":"586","severity":1,"message":"636","line":1,"column":27,"nodeType":"588","messageId":"589","endLine":1,"endColumn":36},{"ruleId":"586","severity":1,"message":"637","line":1,"column":38,"nodeType":"588","messageId":"589","endLine":1,"endColumn":46},{"ruleId":"586","severity":1,"message":"765","line":7,"column":8,"nodeType":"588","messageId":"589","endLine":7,"endColumn":23},{"ruleId":"586","severity":1,"message":"766","line":8,"column":3,"nodeType":"588","messageId":"589","endLine":8,"endColumn":9},{"ruleId":"586","severity":1,"message":"767","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":12},{"ruleId":"599","replacedBy":"768"},{"ruleId":"601","replacedBy":"769"},{"ruleId":"586","severity":1,"message":"770","line":5,"column":19,"nodeType":"588","messageId":"589","endLine":5,"endColumn":26},{"ruleId":"586","severity":1,"message":"771","line":8,"column":10,"nodeType":"588","messageId":"589","endLine":8,"endColumn":16},{"ruleId":"659","severity":1,"message":"772","line":42,"column":6,"nodeType":"661","endLine":42,"endColumn":39,"suggestions":"773"},{"ruleId":"586","severity":1,"message":"643","line":1,"column":48,"nodeType":"588","messageId":"589","endLine":1,"endColumn":54},{"ruleId":"586","severity":1,"message":"594","line":32,"column":3,"nodeType":"588","messageId":"589","endLine":32,"endColumn":14},{"ruleId":"586","severity":1,"message":"620","line":38,"column":3,"nodeType":"588","messageId":"589","endLine":38,"endColumn":13},{"ruleId":"586","severity":1,"message":"621","line":39,"column":3,"nodeType":"588","messageId":"589","endLine":39,"endColumn":10},{"ruleId":"586","severity":1,"message":"622","line":40,"column":3,"nodeType":"588","messageId":"589","endLine":40,"endColumn":6},{"ruleId":"586","severity":1,"message":"623","line":41,"column":3,"nodeType":"588","messageId":"589","endLine":41,"endColumn":10},{"ruleId":"586","severity":1,"message":"624","line":42,"column":3,"nodeType":"588","messageId":"589","endLine":42,"endColumn":10},{"ruleId":"586","severity":1,"message":"609","line":43,"column":3,"nodeType":"588","messageId":"589","endLine":43,"endColumn":11},{"ruleId":"586","severity":1,"message":"610","line":44,"column":3,"nodeType":"588","messageId":"589","endLine":44,"endColumn":12},{"ruleId":"659","severity":1,"message":"774","line":150,"column":6,"nodeType":"661","endLine":150,"endColumn":65,"suggestions":"775"},{"ruleId":"776","severity":1,"message":"777","line":348,"column":19,"nodeType":"778","messageId":"687","endLine":348,"endColumn":32},{"ruleId":"599","replacedBy":"779"},{"ruleId":"601","replacedBy":"780"},{"ruleId":"586","severity":1,"message":"708","line":3,"column":8,"nodeType":"588","messageId":"589","endLine":3,"endColumn":14},{"ruleId":"586","severity":1,"message":"638","line":7,"column":3,"nodeType":"588","messageId":"589","endLine":7,"endColumn":6},{"ruleId":"586","severity":1,"message":"590","line":8,"column":3,"nodeType":"588","messageId":"589","endLine":8,"endColumn":9},{"ruleId":"586","severity":1,"message":"639","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":6},{"ruleId":"586","severity":1,"message":"595","line":14,"column":3,"nodeType":"588","messageId":"589","endLine":14,"endColumn":7},{"ruleId":"586","severity":1,"message":"598","line":15,"column":3,"nodeType":"588","messageId":"589","endLine":15,"endColumn":8},{"ruleId":"586","severity":1,"message":"597","line":16,"column":3,"nodeType":"588","messageId":"589","endLine":16,"endColumn":8},{"ruleId":"586","severity":1,"message":"596","line":17,"column":3,"nodeType":"588","messageId":"589","endLine":17,"endColumn":12},{"ruleId":"586","severity":1,"message":"627","line":21,"column":3,"nodeType":"588","messageId":"589","endLine":21,"endColumn":20},{"ruleId":"586","severity":1,"message":"637","line":1,"column":27,"nodeType":"588","messageId":"589","endLine":1,"endColumn":35},{"ruleId":"586","severity":1,"message":"636","line":1,"column":37,"nodeType":"588","messageId":"589","endLine":1,"endColumn":46},{"ruleId":"586","severity":1,"message":"590","line":5,"column":3,"nodeType":"588","messageId":"589","endLine":5,"endColumn":9},{"ruleId":"586","severity":1,"message":"608","line":6,"column":3,"nodeType":"588","messageId":"589","endLine":6,"endColumn":8},{"ruleId":"586","severity":1,"message":"700","line":7,"column":3,"nodeType":"588","messageId":"589","endLine":7,"endColumn":11},{"ruleId":"586","severity":1,"message":"692","line":8,"column":3,"nodeType":"588","messageId":"589","endLine":8,"endColumn":7},{"ruleId":"586","severity":1,"message":"781","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":13},{"ruleId":"586","severity":1,"message":"605","line":10,"column":3,"nodeType":"588","messageId":"589","endLine":10,"endColumn":15},{"ruleId":"586","severity":1,"message":"606","line":11,"column":3,"nodeType":"588","messageId":"589","endLine":11,"endColumn":15},{"ruleId":"586","severity":1,"message":"607","line":12,"column":3,"nodeType":"588","messageId":"589","endLine":12,"endColumn":17},{"ruleId":"586","severity":1,"message":"595","line":13,"column":3,"nodeType":"588","messageId":"589","endLine":13,"endColumn":7},{"ruleId":"586","severity":1,"message":"596","line":14,"column":3,"nodeType":"588","messageId":"589","endLine":14,"endColumn":12},{"ruleId":"586","severity":1,"message":"597","line":15,"column":3,"nodeType":"588","messageId":"589","endLine":15,"endColumn":8},{"ruleId":"586","severity":1,"message":"598","line":16,"column":3,"nodeType":"588","messageId":"589","endLine":16,"endColumn":8},{"ruleId":"586","severity":1,"message":"604","line":17,"column":3,"nodeType":"588","messageId":"589","endLine":17,"endColumn":23},{"ruleId":"586","severity":1,"message":"667","line":18,"column":3,"nodeType":"588","messageId":"589","endLine":18,"endColumn":8},{"ruleId":"586","severity":1,"message":"668","line":19,"column":3,"nodeType":"588","messageId":"589","endLine":19,"endColumn":11},{"ruleId":"586","severity":1,"message":"669","line":20,"column":3,"nodeType":"588","messageId":"589","endLine":20,"endColumn":8},{"ruleId":"586","severity":1,"message":"670","line":21,"column":3,"nodeType":"588","messageId":"589","endLine":21,"endColumn":10},{"ruleId":"586","severity":1,"message":"639","line":23,"column":3,"nodeType":"588","messageId":"589","endLine":23,"endColumn":6},{"ruleId":"586","severity":1,"message":"638","line":24,"column":3,"nodeType":"588","messageId":"589","endLine":24,"endColumn":6},{"ruleId":"586","severity":1,"message":"705","line":25,"column":3,"nodeType":"588","messageId":"589","endLine":25,"endColumn":12},{"ruleId":"586","severity":1,"message":"706","line":26,"column":3,"nodeType":"588","messageId":"589","endLine":26,"endColumn":16},{"ruleId":"586","severity":1,"message":"691","line":27,"column":3,"nodeType":"588","messageId":"589","endLine":27,"endColumn":11},{"ruleId":"586","severity":1,"message":"591","line":28,"column":3,"nodeType":"588","messageId":"589","endLine":28,"endColumn":8},{"ruleId":"586","severity":1,"message":"593","line":29,"column":3,"nodeType":"588","messageId":"589","endLine":29,"endColumn":12},{"ruleId":"586","severity":1,"message":"592","line":30,"column":3,"nodeType":"588","messageId":"589","endLine":30,"endColumn":14},{"ruleId":"586","severity":1,"message":"782","line":44,"column":10,"nodeType":"588","messageId":"589","endLine":44,"endColumn":25},{"ruleId":"586","severity":1,"message":"587","line":55,"column":10,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"783","line":56,"column":13,"nodeType":"588","messageId":"589","endLine":56,"endColumn":16},{"ruleId":"586","severity":1,"message":"784","line":58,"column":8,"nodeType":"588","messageId":"589","endLine":58,"endColumn":13},{"ruleId":"586","severity":1,"message":"785","line":60,"column":8,"nodeType":"588","messageId":"589","endLine":60,"endColumn":14},{"ruleId":"586","severity":1,"message":"786","line":62,"column":8,"nodeType":"588","messageId":"589","endLine":62,"endColumn":22},{"ruleId":"586","severity":1,"message":"765","line":63,"column":8,"nodeType":"588","messageId":"589","endLine":63,"endColumn":23},{"ruleId":"586","severity":1,"message":"766","line":64,"column":3,"nodeType":"588","messageId":"589","endLine":64,"endColumn":9},{"ruleId":"586","severity":1,"message":"767","line":65,"column":3,"nodeType":"588","messageId":"589","endLine":65,"endColumn":12},{"ruleId":"586","severity":1,"message":"787","line":67,"column":8,"nodeType":"588","messageId":"589","endLine":67,"endColumn":25},{"ruleId":"586","severity":1,"message":"698","line":68,"column":8,"nodeType":"588","messageId":"589","endLine":68,"endColumn":21},{"ruleId":"659","severity":1,"message":"772","line":147,"column":6,"nodeType":"661","endLine":147,"endColumn":25,"suggestions":"788"},{"ruleId":"599","replacedBy":"789"},{"ruleId":"601","replacedBy":"790"},{"ruleId":"586","severity":1,"message":"633","line":30,"column":3,"nodeType":"588","messageId":"589","endLine":30,"endColumn":13},{"ruleId":"659","severity":1,"message":"772","line":47,"column":6,"nodeType":"661","endLine":47,"endColumn":25,"suggestions":"791"},{"ruleId":"617","severity":1,"message":"618","line":31,"column":1,"nodeType":"619","endLine":110,"endColumn":2},{"ruleId":"586","severity":1,"message":"640","line":4,"column":3,"nodeType":"588","messageId":"589","endLine":4,"endColumn":12},{"ruleId":"586","severity":1,"message":"638","line":5,"column":3,"nodeType":"588","messageId":"589","endLine":5,"endColumn":6},{"ruleId":"586","severity":1,"message":"692","line":7,"column":3,"nodeType":"588","messageId":"589","endLine":7,"endColumn":7},{"ruleId":"586","severity":1,"message":"691","line":8,"column":3,"nodeType":"588","messageId":"589","endLine":8,"endColumn":11},{"ruleId":"586","severity":1,"message":"781","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":13},{"ruleId":"586","severity":1,"message":"639","line":10,"column":3,"nodeType":"588","messageId":"589","endLine":10,"endColumn":6},{"ruleId":"586","severity":1,"message":"604","line":11,"column":3,"nodeType":"588","messageId":"589","endLine":11,"endColumn":23},{"ruleId":"586","severity":1,"message":"605","line":12,"column":3,"nodeType":"588","messageId":"589","endLine":12,"endColumn":15},{"ruleId":"586","severity":1,"message":"606","line":13,"column":3,"nodeType":"588","messageId":"589","endLine":13,"endColumn":15},{"ruleId":"586","severity":1,"message":"607","line":14,"column":3,"nodeType":"588","messageId":"589","endLine":14,"endColumn":17},{"ruleId":"599","replacedBy":"792"},{"ruleId":"601","replacedBy":"793"},{"ruleId":"586","severity":1,"message":"794","line":2,"column":8,"nodeType":"588","messageId":"589","endLine":2,"endColumn":16},{"ruleId":"586","severity":1,"message":"590","line":8,"column":3,"nodeType":"588","messageId":"589","endLine":8,"endColumn":9},{"ruleId":"586","severity":1,"message":"638","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":6},{"ruleId":"586","severity":1,"message":"639","line":10,"column":3,"nodeType":"588","messageId":"589","endLine":10,"endColumn":6},{"ruleId":"586","severity":1,"message":"591","line":11,"column":3,"nodeType":"588","messageId":"589","endLine":11,"endColumn":8},{"ruleId":"586","severity":1,"message":"592","line":12,"column":3,"nodeType":"588","messageId":"589","endLine":12,"endColumn":14},{"ruleId":"586","severity":1,"message":"593","line":13,"column":3,"nodeType":"588","messageId":"589","endLine":13,"endColumn":12},{"ruleId":"586","severity":1,"message":"594","line":14,"column":3,"nodeType":"588","messageId":"589","endLine":14,"endColumn":14},{"ruleId":"586","severity":1,"message":"795","line":54,"column":7,"nodeType":"588","messageId":"589","endLine":54,"endColumn":11},{"ruleId":"684","severity":1,"message":"685","line":203,"column":52,"nodeType":"686","messageId":"687","endLine":203,"endColumn":54},{"ruleId":"684","severity":1,"message":"685","line":218,"column":52,"nodeType":"686","messageId":"687","endLine":218,"endColumn":54},{"ruleId":"684","severity":1,"message":"685","line":229,"column":52,"nodeType":"686","messageId":"687","endLine":229,"endColumn":54},{"ruleId":"776","severity":1,"message":"796","line":367,"column":41,"nodeType":"778","messageId":"687","endLine":367,"endColumn":46},{"ruleId":"776","severity":1,"message":"797","line":368,"column":41,"nodeType":"778","messageId":"687","endLine":368,"endColumn":49},{"ruleId":"586","severity":1,"message":"630","line":2,"column":10,"nodeType":"588","messageId":"589","endLine":2,"endColumn":14},{"ruleId":"798","severity":1,"message":"799","line":79,"column":19,"nodeType":"614","endLine":79,"endColumn":57},{"ruleId":"800","severity":1,"message":"801","line":130,"column":25,"nodeType":"646","endLine":130,"endColumn":38},{"ruleId":"634","severity":1,"message":"635","line":141,"column":19,"nodeType":"614","endLine":141,"endColumn":54},{"ruleId":"634","severity":1,"message":"635","line":146,"column":19,"nodeType":"614","endLine":146,"endColumn":54},{"ruleId":"586","severity":1,"message":"604","line":20,"column":3,"nodeType":"588","messageId":"589","endLine":20,"endColumn":23},{"ruleId":"586","severity":1,"message":"605","line":21,"column":3,"nodeType":"588","messageId":"589","endLine":21,"endColumn":15},{"ruleId":"586","severity":1,"message":"606","line":22,"column":3,"nodeType":"588","messageId":"589","endLine":22,"endColumn":15},{"ruleId":"586","severity":1,"message":"607","line":23,"column":3,"nodeType":"588","messageId":"589","endLine":23,"endColumn":17},{"ruleId":"586","severity":1,"message":"608","line":35,"column":3,"nodeType":"588","messageId":"589","endLine":35,"endColumn":8},{"ruleId":"659","severity":1,"message":"772","line":65,"column":6,"nodeType":"661","endLine":65,"endColumn":25,"suggestions":"802"},{"ruleId":"586","severity":1,"message":"803","line":103,"column":11,"nodeType":"588","messageId":"589","endLine":103,"endColumn":17},{"ruleId":"586","severity":1,"message":"803","line":129,"column":11,"nodeType":"588","messageId":"589","endLine":129,"endColumn":17},{"ruleId":"617","severity":1,"message":"618","line":5,"column":1,"nodeType":"619","endLine":16,"endColumn":2},{"ruleId":"617","severity":1,"message":"618","line":9,"column":1,"nodeType":"619","endLine":26,"endColumn":2},"no-unused-vars","'Formik' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'ModalFooter' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'Label' is defined but never used.","no-native-reassign",["804"],"no-negated-in-lhs",["805"],"'res' is assigned a value but never used.","'UncontrolledDropdown' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'DropdownToggle' is defined but never used.","'Badge' is defined but never used.","'CardText' is defined but never used.","'CardTitle' is defined but never used.","'handleEmailSubmit' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["804"],["805"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'Nav' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'cardFormatter' is assigned a value but never used.","'ListGroupItemHeading' is defined but never used.","'ListGroupItemText' is defined but never used.",["804"],["805"],"'Link' is defined but never used.",["804"],["805"],"'CardFooter' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useEffect' is defined but never used.","'useState' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Container' is defined but never used.",["804"],["805"],"'useRef' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["804"],["805"],["804"],["805"],"'setAlert' is defined but never used.",["804"],["805"],"'DirectionsRenderer' is defined but never used.","'DirectionsService' is defined but never used.","'Polyline' is defined but never used.","'map' is assigned a value but never used.","'routeBuilder' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dateSelected', 'getEmployeeRouteRB', 'loading', and 'selectedTech'. Either include them or remove the dependency array. If 'getEmployeeRouteRB' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["806"],"React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.",["807"],"'bounds' is assigned a value but never used.","'frequency' is assigned a value but never used.","'Media' is defined but never used.","'Progress' is defined but never used.","'Table' is defined but never used.","'Tooltip' is defined but never used.","React Hook useEffect has a missing dependency: 'getEmployeeRoute'. Either include it or remove the dependency array. If 'getEmployeeRoute' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["808"],"'pagination' is assigned a value but never used.","'columns' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'getEmployeeRoute', 'getEmployeeRouteRB', and 'user'. Either include them or remove the dependency array. If 'getEmployeeRouteRB' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["809"],"'repairPictureState' is assigned a value but never used.","'onDropRepair' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'logModal'. Either include it or remove the dependency array. You can also do a functional update 'setLogModal(l => ...)' if you only need 'logModal' in the 'setLogModal' call.",["810"],["811"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["804"],["805"],"'CardBody' is defined but never used.","'Card' is defined but never used.","React Hook useEffect has a missing dependency: 'active'. Either include it or remove the dependency array.",["812"],["804"],["805"],"'Scrollbars' is defined but never used.","'ImageUploader' is defined but never used.","'ButtonGroup' is defined but never used.","'Collapse' is defined but never used.","'Pagination' is defined but never used.","'PaginationItem' is defined but never used.","'PaginationLink' is defined but never used.","'UncontrolledTooltip' is defined but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.","'Line' is defined but never used.","'Moment' is defined but never used.","'List' is defined but never used.","'chartExample1' is defined but never used.","'map' is defined but never used.","'set' is defined but never used.","'customer' is defined but never used.",["813"],"'dontBookWithinDays' is assigned a value but never used.","'slots' is assigned a value but never used.","'isProcessing' is assigned a value but never used.","'setIsProcessing' is assigned a value but never used.","'showChems' is assigned a value but never used.","'setShowChems' is assigned a value but never used.","'showRepair' is assigned a value but never used.","'setShowRepair' is assigned a value but never used.","'notesView' is assigned a value but never used.","'setNotesView' is assigned a value but never used.","'shockOpen' is assigned a value but never used.","'setShockOpen' is assigned a value but never used.","'algacidesOpen' is assigned a value but never used.","'setAlgacidesOpen' is assigned a value but never used.","'otherChemsOpen' is assigned a value but never used.","'setOtherChemsOpen' is assigned a value but never used.","'setRouteDay' is assigned a value but never used.","'showEquipmentList' is assigned a value but never used.","'setShowEquipmentList' is assigned a value but never used.","'showUnableService' is assigned a value but never used.","'unableProcessing' is assigned a value but never used.","'submitUnableService' is assigned a value but never used.","'onUnableChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getEmployeeRoute' and 'user'. Either include them or remove the dependency array. If 'getEmployeeRoute' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["814"],"'uploadImages' is assigned a value but never used.","'onDrop' is assigned a value but never used.",["815"],["816"],"'GoogleMap' is defined but never used.","'LoadScript' is defined but never used.","'Marker' is defined but never used.","'InfoWindow' is defined but never used.","'MapDirectionsRenderer' is defined but never used.","'Footer' is defined but never used.","'RoutingMachine' is defined but never used.","'LeafletMap' is defined but never used.","'key' is assigned a value but never used.","'markerIcon' is assigned a value but never used.","'containerStyle' is assigned a value but never used.","'locations' is assigned a value but never used.","'mapState' is assigned a value but never used.","'onMarkerClick' is assigned a value but never used.","'onInfoWindowClose' is assigned a value but never used.","'onLoad' is assigned a value but never used.","'onUnmount' is assigned a value but never used.","'centerPoint' is assigned a value but never used.","'setCenterPoint' is assigned a value but never used.","'ZOOM_LEVEL' is assigned a value but never used.","'mapRef' is assigned a value but never used.","'ToolkitProvider' is defined but never used.","'Search' is defined but never used.","'CSVExport' is defined but never used.",["804"],["805"],"'BSAlert' is defined but never used.","'notify' is defined but never used.","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.",["817"],"React Hook useEffect has an unnecessary dependency: 'clearCustomers'. Either exclude it or remove the dependency array. Outer scope values like 'clearCustomers' aren't valid dependencies because mutating them doesn't re-render the component.",["818"],"no-dupe-keys","Duplicate key 'scheduledDate'.","ObjectExpression",["804"],["805"],"'CardHeader' is defined but never used.","'SpinnerCircular' is defined but never used.","'Yup' is defined but never used.","'axios' is defined but never used.","'moment' is defined but never used.","'BootstrapTable' is defined but never used.","'paginationFactory' is defined but never used.",["819"],["804"],["805"],["820"],["804"],["805"],"'ReactDOM' is defined but never used.","'grid' is assigned a value but never used.","Duplicate key 'email'.","Duplicate key 'altEmail'.","jsx-a11y/no-redundant-roles","The element form has an implicit role of form. Defining this explicitly is redundant and should be avoided.","react/jsx-no-duplicate-props","No duplicate props allowed",["821"],"'errors' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"822","fix":"823"},{"desc":"824","fix":"825"},{"desc":"826","fix":"827"},{"desc":"828","fix":"829"},{"desc":"830","fix":"831"},{"desc":"832","fix":"833"},{"desc":"834","fix":"835"},{"desc":"826","fix":"836"},{"desc":"837","fix":"838"},{"desc":"830","fix":"839"},{"desc":"832","fix":"840"},{"desc":"841","fix":"842"},{"desc":"843","fix":"844"},{"desc":"845","fix":"846"},{"desc":"847","fix":"848"},{"desc":"845","fix":"849"},"Update the dependencies array to be: [customers, dateSelected, getEmployeeRouteRB, loading, selectedTech]",{"range":"850","text":"851"},"Update the dependencies array to be: [loading, routeList]",{"range":"852","text":"853"},"Update the dependencies array to be: [getEmployeeRoute, user]",{"range":"854","text":"855"},"Update the dependencies array to be: [getEmployeeRoute, getEmployeeRouteRB, routeDay, user]",{"range":"856","text":"857"},"Update the dependencies array to be: [checklist, logModal]",{"range":"858","text":"859"},"Update the dependencies array to be: [logModal, serviceNotes]",{"range":"860","text":"861"},"Update the dependencies array to be: [active]",{"range":"862","text":"863"},{"range":"864","text":"855"},"Update the dependencies array to be: [getEmployeeRoute, routeDay, user]",{"range":"865","text":"866"},{"range":"867","text":"859"},{"range":"868","text":"861"},"Update the dependencies array to be: [getSingleCustomer, getEmployees, match.params.id]",{"range":"869","text":"870"},"Update the dependencies array to be: [getWorkOrders, getCustomers, getEmployees]",{"range":"871","text":"872"},"Update the dependencies array to be: [getSingleCustomer, match.params.id]",{"range":"873","text":"874"},"Update the dependencies array to be: [getSingleEmployee, match.params.id]",{"range":"875","text":"876"},{"range":"877","text":"874"},[3641,3652],"[customers, dateSelected, getEmployeeRouteRB, loading, selectedTech]",[4195,4206],"[loading, routeList]",[1503,1509],"[getEmployeeRoute, user]",[5621,5631],"[getEmployeeRoute, getEmployeeRouteRB, routeDay, user]",[6727,6738],"[checklist, logModal]",[6853,6867],"[logModal, serviceNotes]",[1208,1210],"[active]",[4077,4083],[10410,10420],"[getEmployeeRoute, routeDay, user]",[11516,11527],[11642,11656],[980,1013],"[getSingleCustomer, getEmployees, match.params.id]",[3642,3701],"[getWorkOrders, getCustomers, getEmployees]",[3375,3394],"[getSingleCustomer, match.params.id]",[959,978],"[getSingleEmployee, match.params.id]",[1541,1560]]